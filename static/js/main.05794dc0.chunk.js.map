{"version":3,"sources":["comp/RowComp.module.css","comp/MessagesComp.module.css","comp/AppComp.module.css","comp/LabelComp.module.css","comp/ProgressComp.module.css","comp/ShieldComp.module.css","comp/SpacerComp.module.css","function/stringToIdbSortable.tsx","model/constants.tsx","function/omit.tsx","function/withInterface.tsx","function/dateToString.tsx","model/Dictionary.tsx","model/Translation.tsx","model/Word.tsx","storage/makeKeyRangeWordsCount.tsx","storage/countNumberOfQuestions.tsx","storage/readDictionaryById.tsx","storage/storeDictionary.tsx","storage/updateDictionaryCount.tsx","storage/Db.tsx","function/dictionaryToString.tsx","hook/useDictionary.tsx","hook/usePageTitle.tsx","comp/ShowMessageContext.tsx","storage/countItems.tsx","storage/makeKeyRangeWordsModifiedDate.tsx","storage/countWordsByDictionaryId.tsx","hook/useWordCountByDictionaryId.tsx","model/TLoadable.tsx","storage/deleteDictionary.tsx","comp/RowComp.tsx","comp/ButtonRowComp.tsx","comp/ContentRowComp.tsx","comp/DictionaryComp.tsx","comp/FocusRefComp.tsx","comp/IconComp.tsx","comp/LoadableComp.tsx","hook/usePrevious.tsx","comp/ShieldContext.tsx","comp/UnknownDictionaryComp.tsx","comp/DictionaryPage.tsx","hook/useNumberOfQuestions.tsx","function/url.tsx","function/sanitizeString.tsx","function/sanitizeDictionary.tsx","storage/checkForConflictingDictionary.tsx","hook/useDictionaryValidationErrors.tsx","hook/useConflictingDictionary.tsx","comp/FormRowComp.tsx","comp/LabelComp.tsx","comp/DictionaryPropsComp.tsx","storage/readWordByTranslation.tsx","storage/checkForConflictingWord.tsx","comp/TranslationComp.tsx","comp/WordComp.tsx","comp/ErrorsComp.tsx","comp/EditDictionaryComp.tsx","comp/EditDictionaryPage.tsx","storage/readWord.tsx","hook/useWord.tsx","function/sanitizeTranslation.tsx","function/sanitizeWord.tsx","hook/useWordValidationErrors.tsx","hook/useExistingTranslationError.tsx","storage/storeWord.tsx","comp/EditWordComp.tsx","comp/EditWordPage.tsx","storage/readWordsByDictionaryId.tsx","storage/readItems.tsx","storage/makeKeyRangeWordsCountTranslation.tsx","hook/useWordsByDictionaryId.tsx","comp/PagingComp.tsx","comp/ExportDictionaryPage.tsx","function/asyncFilter.tsx","function/handleDictionaryImport.tsx","function/dictionaryFromAndroid.tsx","function/dictionaryFromExport.tsx","function/readJsonFromFile.tsx","function/wordFromAndroid.tsx","function/wordFromExport.tsx","comp/GetWordsComp.tsx","storage/readDictionaries.tsx","comp/SetImportParamsComp.tsx","comp/ImportFromFilePage.tsx","storage/readQuestions.tsx","hook/useQuestions.tsx","function/avoidDuplicates.tsx","function/shuffle.tsx","comp/LearnComp.tsx","comp/ProgressComp.tsx","comp/LearnPage.tsx","comp/MessagesComp.tsx","comp/NotFoundPage.tsx","comp/ShieldComp.tsx","comp/SpacerComp.tsx","function/queryToRegExp.tsx","selector/selectPageCount.tsx","storage/countDictionaries.tsx","comp/StartPage.tsx","comp/WordsMenuComp.tsx","function/translationToString.tsx","function/toggle.tsx","comp/WordListComp.tsx","comp/WordListByDateComp.tsx","storage/deleteWords.tsx","storage/toggleWords.tsx","comp/WordsSortComp.tsx","comp/WordsPage.tsx","function/sanitizeEnumValue.tsx","function/wordToString.tsx","function/sanitizePageIndex.tsx","serviceWorker.ts","index.tsx","comp/AppComp.tsx","hook/usePersistentStorage.tsx","hook/useMessages.tsx","hook/useShield.tsx","function/hasKeys.tsx"],"names":["module","exports","_map","firstNonLetterIndex","getStringToIdbSortableMap","start","performance","now","arr","i","push","String","fromCharCode","sort","a","b","localeCompare","map","Map","n","length","set","size","console","log","createMap","setStringToIdbSortableMap","stringToIdbSortable","s","reverse","toLocaleLowerCase","replace","match","index","get","isNumber","charCodeAt","DEFAULT_COUNT","PROGRESS_CHARACTER","QUESTIONS_CHARACTER","NO_QUESTIONS_CHARACTER","WARNING_CHARACTER","ERROR_CHARACTER","SUCCESS_CHARACTER","CHECKBOX_CHARACTER","CLOSE_CHARACTER","MIN_MAX_RANGE","omit","o","keyToOmit","result","withInterface","dateToString","d","year","getFullYear","month","getMonth","padStart","date","getDate","dictionaryToDb","id","language0","language1","name","nameForSort","language0ForSort","language1ForSort","count","countForSort","dictionaryFromDb","translationToDb","t","text","description","textForSort","descriptionForSort","translationFromDb","wordToDb","w","translation0","translation1","dictionaryId","modifiedDate","modifiedDateForSort","wordFromDb","makeKeyRangeWordsCount","IDBKeyRange","bound","countNumberOfQuestions","getDb","transaction","STORE_WORDS","wordsStore","objectStore","index0","INDEX_WORDS_COUNT_0","index1","INDEX_WORDS_COUNT_1","count0","count1","readDictionaryById","STORE_DICTIONARIES","dictionary","storeDictionary","dictionariesStore","put","updateDictionaryCount","existingDictionary","Error","DB_NAME","DEPRECATED_STORE_WORDLISTS","INDEX_DICTIONARIES_NAME","INDEX_DICTIONARIES_LANGUAGE_0","INDEX_DICTIONARIES_LANGUAGE_1","INDEX_DICTIONARIES_COUNT_NAME","INDEX_WORDS_TRANSLATION_0","INDEX_WORDS_TRANSLATION_1","INDEX_WORDS_MODIFIED_DATE_0","INDEX_WORDS_MODIFIED_DATE_1","INDEX_WORDS_COUNT_TRANSLATION_0","INDEX_WORDS_COUNT_TRANSLATION_1","STORE_SETTINGS","KEY_SETTINGS_STRING_TO_IDB_SORTABLE_MAP","db","initDb","showMessage","openDB","upgrade","oldVersion","newVersion","createDb2","upgradeDb1To2","upgradeDb2To3","blocked","blocking","createObjectStore","keyPath","autoIncrement","createIndex","unique","wordlistsStore","openCursor","cursor","dictionary1","value","lang1Name","lang2Name","words","word1","Date","lang1","lang1Count","lang2","lang2Count","continue","deleteObjectStore","openKeyCursor","primaryKey","dictionaryToString","useDictionary","useState","$dictionary","set$dictionary","loadDictionary","useCallback","aborted","then","current","catch","e","error","undefined","usePageTitle","title","useEffect","document","ShowMessageContext","createContext","message","countItems","source","filter","range","makeKeyRangeWordsModifiedDate","dictionaryIdIndex","useWordCountByDictionaryId","$wordCount","set$wordCount","useContext","loadWordCount","countWordsByDictionaryId","isLoaded","isString","hasNotStartedLoading","deleteDictionary","wordsIndex","wordCursor","delete","RowComp","children","_isVertical","_gap","_padding","_fill","_wrap","className","styles","wrapper","columnWrapper","rowWrapper","wrapperFill","padding0","Boolean","join","column","row","fill","wrap","gap0","ButtonRowComp","props","ContentRowComp","DictionaryComp","_dictionary","FocusRefComp","_focusThis","focus","IconComp","role","aria-label","_icon","LoadableComp","_value","_load","_debugName","previousLoad","ref","useRef","usePrevious","loadChanged","valueIsLoadingAt","hadNotStartedLoading","valueNeedsLoadingAt","warn","Fragment","hasLoadError","style","color","ShieldContext","showShield","hideShield","UnknownDictionaryComp","to","DictionaryPage","history","useHistory","routeMatch","useRouteMatch","parseInt","params","$numberOfQuestions","set$numberOfQuestions","loadNumberOfQuestions","useNumberOfQuestions","askLinkRef","addAWordLinkRef","wordCount","numberOfQuestions","innerRef","type","onClick","window","confirm","goBack","url","literals","encodeURIComponent","sanitizeString","trim","sanitizeDictionary","DictionaryNameConflictError","checkForConflictingDictionary","dbDictionary","dictionaryWithSameName","useDictionaryValidationErrors","conflictingDictionary","$conflictingDictionary","set$conflictingDictionary","isAborted","exists","useConflictingDictionary","useMemo","FormRowComp","LabelComp","_for","_required","htmlFor","label","required","DictionaryPropsComp","_setDictionary","autoFocus","onChange","target","readWordByTranslation","translationIndex","translation","word","ExistingTranslationError","translations","checkForConflictingWord","Promise","all","existingTranslations","existingTranslationsWithDifferingId","other","TranslationComp","_translation","WordComp","_word","_swapTranslations","ErrorsComp","_errors","errors","key","EditDictionaryComp","_storeDictionary","sanitizedDictionary","dictionaryValidationErrors","touched","onSubmit","preventDefault","disabled","EditDictionaryPage","finish","storedDictionaryId","readWord","wordId","useWord","$word","set$word","loadWord","sanitizeTranslation","sanitizeWord","useWordValidationErrors","existingTranslationError","$conflictingTranslations","set$conflictingTranslations","useExistingTranslationError","storeWord","EditWordComp","_refresh","_onSuccess","$translation0Text","set$translation0Text","$translation1Text","set$translation1Text","$translation0Description","set$translation0Description","$translation1Description","set$translation1Description","sanitizedWord","validationErrors","EditWordPage","onSuccess","WordsByDictionaryIdSort","readItems","pageSize","Infinity","page","direction","isFinite","getAll","firstItemIndex","advance","ModifiedDate0","rest","getIndexName","makeKeyRange","CountTranslation0","CountTranslation1","ModifiedDate1","makeKeyRangeWordsCountTranslation","useWordsByDictionaryId","$words","set$words","loadWords","readWordsByDictionaryId","PagingComp","_page","_pageCount","_setPage","ExportDictionaryPage","textAreaRef","$page","set$page","pageCount","Math","max","ceil","$json","version","JSON","stringify","downloadLinkRef","readOnly","setSelectionRange","execCommand","download","href","asyncFilter","fn","item","flags","handleDictionaryImport","wordsWithDictionaryId","wordsNotConflicting","done","dictionaryFromAndroid","firstLanguageName","secondLanguageName","dictionaryFromExport","readJsonFromFile","file","resolve","reject","reader","FileReader","addEventListener","parse","readAsText","wordFromAndroid","inFirstLanguage","firstLanguageComment","inSecondLanguage","secondLanguageComment","wordFromExport","GetWordsComp","_setImportableDictionary","set$json","files","placeholder","rows","cols","json","currentTarget","readDictionaries","nameIndex","dictionaries","SetImportParamsComp","_importableDictionary","_importParams","_setImportParams","_dictionaryId","React","$dictionaries","set$dictionaries","loadDictionaries","dictionaryById","find","importParams","swapLanguages","setDictionary","ImportFromFilePage","$importableDictionary","set$importableDictionary","$importParams","set$importParams","setImportableDictionary","v","translation0Index","translation1Index","getAllKeys","translationId","useQuestions","wordIdNotFirst","$questions","set$questions","loadQuestions","readQuestions","questions","equals","slice","lastItem","splice","avoidDuplicates","newIndex","floor","random","shuffle","shift","LearnComp","_translationId","_next","inputRef","questionLanguage","answerLanguage","question","correctAnswer","$answer","set$answer","isAnswerCorrect","$answerShown","set$answerShown","newCount","min","success","ProgressComp","_progress","outer","inner","flexBasis","LearnPage","lastWordId","$questionsCount","set$questionsCount","$questionsLearnedCount","set$questionsLearnedCount","progress","$questionIndex","set$questionIndex","next","MessagesComp","_messages","_removeMessageByIndex","content","button","NotFoundPage","ShieldComp","returnFocus","shield","tabIndex","SpacerComp","spacer","queryToRegExp","q","RegExp","escapeStringRegexp","selectPageCount","itemCount","countDictionaries","StartPage","$pageSize","$query","set$query","$totalDictionaryCount","set$totalDictionaryCount","$dictionaryCount","set$dictionaryCount","$dictionariesOnPage","set$dictionariesOnPage","loadDictionariesOnPage","queryRe","test","totalCount","makeADictionaryLinkRef","BulkActions","translationToString","toggle","flag","WordListComp","_firstIndex","_words","_selectedWordIds","_setSelectedWordIds","checked","WordListByDateComp","wordsByDate","reduce","lastList","firstIndex","list","deleteWords","wordIds","toggleWords","enable","updateWord","update","WordsMenuComp","_onDone","selectedWordsCount","Object","keys","Deselect","Disable","Enable","Delete","_","WordsSortComp","_sort","_setSort","_language0Name","_language1Name","sortByDate","includes","sortByLanguage0","getSort","WordsPage","location","useLocation","query","qs","search","qRe","wordToString","isNaN","sanitizePageIndex","setQ","setPage","newPage","setSort","newSort","$selectedWordIds","set$selectedWordIds","isLocalhost","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","ReactDOM","render","$hasDb","set$hasDb","$isPersistentStorage","set$isPersistentStorage","loadPersistentStorage","storage","persisted","usePersistentStorage","$messages","set$messages","messages","info","messageString","lastMessage","lastMessageCount","lastMessageStart","removeMessageByIndex","useMessages","$shieldKeys","set$shieldKeys","shieldContextValue","shieldKeys","useShield","globalThis","setIsCached","setHasUpdate","settingsStore","Provider","header","back","forward","exact","path","footer","isPersistentStorage","persist","prototype","hasOwnProperty","call","hasKeys","getElementById","URL","process","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.05794dc0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rowWrapper\":\"RowComp_rowWrapper__2MCRr\",\"row\":\"RowComp_row__Egk8h\",\"columnWrapper\":\"RowComp_columnWrapper__136bt\",\"column\":\"RowComp_column__3-k_k\",\"wrapperFill\":\"RowComp_wrapperFill__1UIOA\",\"fill\":\"RowComp_fill__3J7jB\",\"wrap\":\"RowComp_wrap__WdZI2\",\"gap0\":\"RowComp_gap0__1zBEK\",\"gap1\":\"RowComp_gap1__3wSRY\",\"gap5\":\"RowComp_gap5__2ypI8\",\"gap10\":\"RowComp_gap10__1hW5G\",\"gap20\":\"RowComp_gap20__GijU0\",\"padding0\":\"RowComp_padding0__1x4SV\",\"padding1\":\"RowComp_padding1__3j0BN\",\"padding5\":\"RowComp_padding5__1yO6C\",\"padding10\":\"RowComp_padding10__fU-2E\",\"padding20\":\"RowComp_padding20__292B9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"MessagesComp_message__2Q2g8\",\"content\":\"MessagesComp_content__ndLmS\",\"button\":\"MessagesComp_button__3hOJd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppComp_header__OGJ-E\",\"footer\":\"AppComp_footer__1JXH0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"LabelComp_label__wDGbU\",\"required\":\"LabelComp_required__AnfXQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"outer\":\"ProgressComp_outer__1mjze\",\"inner\":\"ProgressComp_inner__PP5AI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"shield\":\"ShieldComp_shield__s66tj\",\"fade-in\":\"ShieldComp_fade-in__12tfv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spacer\":\"SpacerComp_spacer__-a9f5\",\"__NEVER__\":\"SpacerComp___NEVER____c243L\"};","import { isNumber } from 'util'\n\nlet _map: Map<string, number> | null = null\nlet firstNonLetterIndex = 0\n\nfunction createMap() {\n\tconst start = performance.now()\n\tlet arr: string[] = []\n\tfor (let i = 0; i <= 0xffff; i++) {\n\t\tarr.push(String.fromCharCode(i))\n\t}\n\tarr = arr.sort((a, b) => a.localeCompare(b))\n\tconst map = new Map()\n\tfor (let i = 0, n = arr.length; i < n; i++) {\n\t\tmap.set(arr[i], i)\n\t}\n\tfirstNonLetterIndex = map.size\n\tconsole.log(`[pyhjvs] createMap took ${performance.now() - start} ms`)\n\treturn map\n}\n\nexport function getStringToIdbSortableMap() {\n\tif (!_map) _map = createMap()\n\treturn _map!\n}\n\nexport function setStringToIdbSortableMap(map: Map<string, number>) {\n\t_map = map\n}\n\nexport function stringToIdbSortable(\n\ts: string,\n\t{ reverse }: { reverse?: boolean } = {},\n) {\n\tconst map = getStringToIdbSortableMap()\n\ts = s.toLocaleLowerCase()\n\treturn s.replace(/./g, match => {\n\t\tlet index = map.get(match)\n\t\tif (!isNumber(index)) {\n\t\t\tindex = firstNonLetterIndex + match.charCodeAt(0)\n\t\t}\n\t\tif (reverse) {\n\t\t\tindex = 0xffff - index\n\t\t}\n\t\treturn String.fromCharCode(index)\n\t})\n}\n","export const DEFAULT_COUNT = 1\nexport const PROGRESS_CHARACTER = '⌚'\nexport const QUESTIONS_CHARACTER = '▶️'\nexport const NO_QUESTIONS_CHARACTER = '⏹️'\nexport const WARNING_CHARACTER = '⚠️'\nexport const ERROR_CHARACTER = '❌'\nexport const SUCCESS_CHARACTER = '✔️'\nexport const CHECKBOX_CHARACTER = '✅'\nexport const CLOSE_CHARACTER = '×'\nexport const MIN_KEY = -Infinity\nexport const MAX_KEY = [[]]\nexport const MIN_MAX_RANGE: readonly [typeof MIN_KEY, typeof MAX_KEY] = [\n\tMIN_KEY,\n\tMAX_KEY,\n]\n","export function omit<T, K extends keyof T>(o: T, keyToOmit: K): Omit<T, K> {\n\tconst result = { ...o }\n\tdelete result[keyToOmit]\n\treturn result\n}\n","export function withInterface<T>(o: T): T {\n\treturn o\n}\n","export function dateToString(d: Date): string {\n\tconst year = d.getFullYear()\n\tconst month = (d.getMonth() + 1 + '').padStart(2, '0')\n\tconst date = (d.getDate() + '').padStart(2, '0')\n\treturn `${year}-${month}-${date}`\n}\n","import { stringToIdbSortable } from '../function/stringToIdbSortable'\nimport { ExportedWord, Word1, WordFromAndroid } from './Word'\n\nexport interface Dictionary {\n\tid?: number\n\tname: string\n\tlanguage0: string\n\tlanguage1: string\n\tcount: number\n}\n\nexport interface ExportedDictionary {\n\tversion: 1\n\tname: string\n\tlanguage0: string\n\tlanguage1: string\n\twords: readonly ExportedWord[]\n}\n\nexport interface DbDictionary extends Dictionary {\n\tnameForSort: string\n\tlanguage0ForSort: string\n\tlanguage1ForSort: string\n\tcountForSort: number\n}\n\nexport interface Dictionary1 {\n\tid?: number\n\tname: string\n\tlang1Name: string\n\tlang2Name: string\n\twords: Word1[]\n}\n\nexport interface DictionaryFromAndroid {\n\tname: string\n\tfirstLanguageName: string\n\tsecondLanguageName: string\n\twords: WordFromAndroid[]\n}\n\nexport function dictionaryToDb(o: Dictionary): DbDictionary {\n\treturn {\n\t\t...(o.id && { id: o.id }),\n\t\tlanguage0: o.language0,\n\t\tlanguage1: o.language1,\n\t\tname: o.name,\n\t\tnameForSort: stringToIdbSortable(o.name),\n\t\tlanguage0ForSort: stringToIdbSortable(o.language0),\n\t\tlanguage1ForSort: stringToIdbSortable(o.language1),\n\t\tcount: o.count || 0,\n\t\tcountForSort: o.count ? 0 : 1,\n\t}\n}\n\nexport function dictionaryFromDb(o: DbDictionary): Dictionary {\n\treturn {\n\t\tid: o.id,\n\t\tlanguage0: o.language0,\n\t\tlanguage1: o.language1,\n\t\tname: o.name,\n\t\tcount: o.count || 0,\n\t}\n}\n","import { stringToIdbSortable } from '../function/stringToIdbSortable'\n\nexport interface Translation {\n\ttext: string\n\tdescription: string\n\tcount: number\n}\n\nexport interface DbTranslation extends Translation {\n\ttextForSort: string\n\tdescriptionForSort: string\n\tcountForSort: number\n}\n\nexport function translationToDb(t: Translation): DbTranslation {\n\treturn {\n\t\ttext: t.text,\n\t\tcount: t.count,\n\t\tdescription: t.description,\n\t\ttextForSort: stringToIdbSortable(t.text),\n\t\tdescriptionForSort: stringToIdbSortable(t.description),\n\t\tcountForSort: t.count > 0 ? 0 : 1,\n\t}\n}\n\nexport function translationFromDb(t: DbTranslation): Translation {\n\treturn {\n\t\ttext: t.text,\n\t\tcount: t.count,\n\t\tdescription: t.description,\n\t}\n}\n","import { stringToIdbSortable } from '../function/stringToIdbSortable'\nimport {\n\tDbTranslation,\n\tTranslation,\n\ttranslationFromDb,\n\ttranslationToDb,\n} from './Translation'\n\nexport interface Word {\n\tid?: number\n\tdictionaryId: number\n\ttranslation0: Translation\n\ttranslation1: Translation\n\tmodifiedDate: string\n}\n\nexport interface DbWord {\n\tid?: number\n\tdictionaryId: number\n\ttranslation0: DbTranslation\n\ttranslation1: DbTranslation\n\tmodifiedDate: string\n\tmodifiedDateForSort: string\n\tcountForSort: number\n}\n\nexport interface ExportedWord {\n\ttranslation0: Translation\n\ttranslation1: Translation\n\tmodifiedDate: string\n}\n\nexport interface Word1 {\n\tlang1: string\n\tlang2: string\n\tlang1Count: number\n\tlang2Count: number\n}\n\nexport interface WordFromAndroid {\n\tinFirstLanguage: string\n\tfirstLanguageComment: string\n\tinSecondLanguage: string\n\tsecondLanguageComment: string\n}\n\nexport function wordToDb(w: Word): DbWord {\n\tconst translation0 = translationToDb(w.translation0)\n\tconst translation1 = translationToDb(w.translation1)\n\treturn {\n\t\t...(w.id && { id: w.id }),\n\t\tdictionaryId: w.dictionaryId,\n\t\ttranslation0,\n\t\ttranslation1,\n\t\tmodifiedDate: w.modifiedDate,\n\t\tmodifiedDateForSort: stringToIdbSortable(w.modifiedDate, {\n\t\t\treverse: true,\n\t\t}),\n\t\tcountForSort:\n\t\t\ttranslation0.countForSort === 0 || translation1.countForSort === 0\n\t\t\t\t? 0\n\t\t\t\t: 1,\n\t}\n}\n\nexport function wordFromDb(w: DbWord): Word {\n\treturn {\n\t\tid: w.id,\n\t\tdictionaryId: w.dictionaryId,\n\t\ttranslation0: translationFromDb(w.translation0),\n\t\ttranslation1: translationFromDb(w.translation1),\n\t\tmodifiedDate: w.modifiedDate,\n\t}\n}\n","import { MIN_MAX_RANGE } from '../model/constants'\nimport { TKeyLimits } from '../model/TKeyLimits'\n\nexport function makeKeyRangeWordsCount({\n\tdictionaryId,\n\tcountForSort = MIN_MAX_RANGE,\n}: {\n\tdictionaryId: number\n\tcountForSort?: TKeyLimits<number>\n}) {\n\treturn IDBKeyRange.bound(\n\t\t[dictionaryId, countForSort[0]],\n\t\t[dictionaryId, countForSort[1]],\n\t)\n}\n","import { IDBPTransaction } from 'idb/build/esm/entry'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_COUNT_0,\n\tINDEX_WORDS_COUNT_1,\n\tSTORE_WORDS,\n} from './Db'\nimport { makeKeyRangeWordsCount } from './makeKeyRangeWordsCount'\n\nexport async function countNumberOfQuestions({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tdictionaryId,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n}): Promise<number> {\n\tconst wordsStore = t.objectStore(STORE_WORDS)\n\tconst index0 = wordsStore.index(INDEX_WORDS_COUNT_0)\n\tconst index1 = wordsStore.index(INDEX_WORDS_COUNT_1)\n\tconst count0 = await index0.count(\n\t\tmakeKeyRangeWordsCount({ dictionaryId, countForSort: [0, 0] }),\n\t)\n\tconst count1 = await index1.count(\n\t\tmakeKeyRangeWordsCount({ dictionaryId, countForSort: [0, 0] }),\n\t)\n\treturn count0 + count1\n}\n","import { IDBPTransaction } from 'idb'\nimport { dictionaryFromDb } from '../model/Dictionary'\nimport { Db, getDb, STORE_DICTIONARIES } from './Db'\n\nexport async function readDictionaryById({\n\tt = getDb().transaction([STORE_DICTIONARIES], 'readonly'),\n\tid,\n}: {\n\tt?: IDBPTransaction<Db>\n\tid: number\n}) {\n\tconst dictionary = await t.objectStore(STORE_DICTIONARIES).get(id)\n\treturn dictionary && dictionaryFromDb(dictionary)\n}\n","import { IDBPTransaction } from 'idb'\nimport { Dictionary, dictionaryToDb } from '../model/Dictionary'\nimport { Db, getDb, STORE_DICTIONARIES } from './Db'\n\nexport async function storeDictionary({\n\tt = getDb().transaction([STORE_DICTIONARIES], 'readwrite'),\n\tdictionary,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionary: Dictionary\n}) {\n\tif (dictionary.id == null) delete dictionary.id\n\tconst dictionariesStore = t.objectStore(STORE_DICTIONARIES)\n\treturn dictionariesStore.put(dictionaryToDb(dictionary))\n}\n","import { IDBPTransaction } from 'idb'\nimport { Dictionary } from '../model/Dictionary'\nimport { countNumberOfQuestions } from './countNumberOfQuestions'\nimport { Db, getDb, STORE_DICTIONARIES, STORE_WORDS } from './Db'\nimport { readDictionaryById } from './readDictionaryById'\nimport { storeDictionary } from './storeDictionary'\n\nexport async function updateDictionaryCount({\n\tt = getDb().transaction([STORE_DICTIONARIES, STORE_WORDS], 'readwrite'),\n\tdictionaryId,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n}) {\n\tconst existingDictionary = await readDictionaryById({ t, id: dictionaryId })\n\tif (!existingDictionary)\n\t\tthrow new Error(`[q0t3gf] Ismeretlen szótár: ${dictionaryId}`)\n\tconst count = await countNumberOfQuestions({\n\t\tt,\n\t\tdictionaryId,\n\t})\n\tconst dictionary: Dictionary = {\n\t\t...existingDictionary,\n\t\tcount,\n\t}\n\tawait storeDictionary({ t: t as IDBPTransaction<Db>, dictionary })\n}\n","import { DBSchema, IDBPDatabase, IDBPTransaction, openDB } from 'idb'\nimport { isNumber } from 'util'\nimport { dateToString } from '../function/dateToString'\nimport { getStringToIdbSortableMap } from '../function/stringToIdbSortable'\nimport { ERROR_CHARACTER } from '../model/constants'\nimport { DbDictionary, Dictionary1, dictionaryToDb } from '../model/Dictionary'\nimport { DbWord, wordToDb } from '../model/Word'\nimport { updateDictionaryCount } from './updateDictionaryCount'\n\nexport const DB_NAME = 'mag'\n\nexport const DEPRECATED_STORE_WORDLISTS = 'wordlists'\n\nexport const STORE_DICTIONARIES = 'dictionaries'\nexport const INDEX_DICTIONARIES_NAME = 'name'\nexport const INDEX_DICTIONARIES_LANGUAGE_0 = 'language0'\nexport const INDEX_DICTIONARIES_LANGUAGE_1 = 'language1'\nexport const INDEX_DICTIONARIES_COUNT_NAME = 'countName'\n\nexport const STORE_WORDS = 'words'\nexport const INDEX_WORDS_COUNT_0 = 'count0'\nexport const INDEX_WORDS_COUNT_1 = 'count1'\nexport const INDEX_WORDS_TRANSLATION_0 = 'translation0'\nexport const INDEX_WORDS_TRANSLATION_1 = 'translation1'\nexport const INDEX_WORDS_MODIFIED_DATE_0 = 'modifiedDateForSort0'\nexport const INDEX_WORDS_MODIFIED_DATE_1 = 'modifiedDateForSort1'\nexport const INDEX_WORDS_COUNT_TRANSLATION_0 = 'countTranslation0'\nexport const INDEX_WORDS_COUNT_TRANSLATION_1 = 'countTranslation1'\n\nexport const STORE_SETTINGS = 'settings'\nexport const KEY_SETTINGS_STRING_TO_IDB_SORTABLE_MAP = 'stringToIdbSortableMap'\n\nexport interface Db extends DBSchema {\n\tdictionaries: {\n\t\tkey: number\n\t\tvalue: DbDictionary\n\t\tindexes: {\n\t\t\t[INDEX_DICTIONARIES_NAME]: string\n\t\t\t[INDEX_DICTIONARIES_LANGUAGE_0]: string\n\t\t\t[INDEX_DICTIONARIES_LANGUAGE_1]: string\n\t\t\t[INDEX_DICTIONARIES_COUNT_NAME]: [number, string]\n\t\t}\n\t}\n\twords: {\n\t\tkey: number\n\t\tvalue: DbWord\n\t\tindexes: {\n\t\t\t[INDEX_WORDS_COUNT_0]: [number, number]\n\t\t\t[INDEX_WORDS_COUNT_1]: [number, number]\n\t\t\t[INDEX_WORDS_TRANSLATION_0]: [number, string, string]\n\t\t\t[INDEX_WORDS_TRANSLATION_1]: [number, string, string]\n\t\t\t[INDEX_WORDS_MODIFIED_DATE_0]: [\n\t\t\t\tnumber,\n\t\t\t\tstring,\n\t\t\t\tnumber,\n\t\t\t\tstring,\n\t\t\t\tstring,\n\t\t\t]\n\t\t\t[INDEX_WORDS_MODIFIED_DATE_1]: [\n\t\t\t\tnumber,\n\t\t\t\tstring,\n\t\t\t\tnumber,\n\t\t\t\tstring,\n\t\t\t\tstring,\n\t\t\t]\n\t\t\t[INDEX_WORDS_COUNT_TRANSLATION_0]: [number, number, string, string]\n\t\t\t[INDEX_WORDS_COUNT_TRANSLATION_1]: [number, number, string, string]\n\t\t}\n\t}\n\tsettings: {\n\t\tkey: string\n\t\tvalue: any\n\t}\n}\n\nexport interface Db1 extends DBSchema {\n\twordlists: {\n\t\tkey: number\n\t\tvalue: Dictionary1\n\t\tindexes: {\n\t\t\tname: string\n\t\t}\n\t}\n}\n\nlet db: IDBPDatabase<Db> | null = null\n\nexport function getDb() {\n\tif (!db) throw new Error(`[pye4b8]`)\n\treturn db\n}\n\nexport async function initDb(showMessage: (message: any) => void) {\n\tdb = await openDB<Db>(DB_NAME, 3, {\n\t\tasync upgrade(db, oldVersion, newVersion, t) {\n\t\t\ttry {\n\t\t\t\tif (oldVersion < 2) {\n\t\t\t\t\tawait createDb2(t)\n\t\t\t\t}\n\t\t\t\tswitch (oldVersion) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tawait upgradeDb1To2((t as unknown) as IDBPTransaction<\n\t\t\t\t\t\t\tDb1 | Db\n\t\t\t\t\t\t>)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tif (oldVersion < 3) {\n\t\t\t\t\tawait upgradeDb2To3(t)\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tshowMessage(e)\n\t\t\t}\n\t\t},\n\t\tblocked() {\n\t\t\tshowMessage(\n\t\t\t\t`${ERROR_CHARACTER} [pycho4] Az adatbázist nem tudom a szükséges szintre fejleszteni, mert egy másik fülön nyitva van.`,\n\t\t\t)\n\t\t},\n\t\tblocking() {\n\t\t\tshowMessage(\n\t\t\t\t`${ERROR_CHARACTER} [pychpy] Egy másik fül szeretné az adatbázist fejleszteni, de nem képes rá, mert ez a fül nyitva van.`,\n\t\t\t)\n\t\t},\n\t})\n\treturn db\n}\n\nasync function createDb2(t: IDBPTransaction<Db>) {\n\tconst dictionariesStore = t.db.createObjectStore(STORE_DICTIONARIES, {\n\t\tkeyPath: 'id',\n\t\tautoIncrement: true,\n\t})\n\tdictionariesStore.createIndex(INDEX_DICTIONARIES_NAME, 'nameForSort', {\n\t\tunique: true,\n\t})\n\tdictionariesStore.createIndex(\n\t\tINDEX_DICTIONARIES_LANGUAGE_0,\n\t\t'language0ForSort',\n\t)\n\tdictionariesStore.createIndex(\n\t\tINDEX_DICTIONARIES_LANGUAGE_1,\n\t\t'language1ForSort',\n\t)\n\n\tconst wordsStore = t.db.createObjectStore(STORE_WORDS, {\n\t\tkeyPath: 'id',\n\t\tautoIncrement: true,\n\t})\n\twordsStore.createIndex(INDEX_WORDS_COUNT_0, [\n\t\t'dictionaryId',\n\t\t'translation0.countForSort',\n\t])\n\twordsStore.createIndex(INDEX_WORDS_COUNT_1, [\n\t\t'dictionaryId',\n\t\t'translation1.countForSort',\n\t])\n\twordsStore.createIndex(INDEX_WORDS_MODIFIED_DATE_0, [\n\t\t'dictionaryId',\n\t\t'modifiedDateForSort',\n\t\t'countForSort',\n\t\t'translation0.textForSort',\n\t\t'translation0.descriptionForSort',\n\t])\n\twordsStore.createIndex(INDEX_WORDS_MODIFIED_DATE_1, [\n\t\t'dictionaryId',\n\t\t'modifiedDateForSort',\n\t\t'countForSort',\n\t\t'translation1.textForSort',\n\t\t'translation1.descriptionForSort',\n\t])\n\twordsStore.createIndex(INDEX_WORDS_COUNT_TRANSLATION_0, [\n\t\t'dictionaryId',\n\t\t'countForSort',\n\t\t'translation0.textForSort',\n\t\t'translation0.descriptionForSort',\n\t])\n\twordsStore.createIndex(INDEX_WORDS_COUNT_TRANSLATION_1, [\n\t\t'dictionaryId',\n\t\t'countForSort',\n\t\t'translation1.textForSort',\n\t\t'translation1.descriptionForSort',\n\t])\n\twordsStore.createIndex(\n\t\tINDEX_WORDS_TRANSLATION_0,\n\t\t['dictionaryId', 'translation0.text', 'translation0.description'],\n\t\t{\n\t\t\tunique: true,\n\t\t},\n\t)\n\twordsStore.createIndex(\n\t\tINDEX_WORDS_TRANSLATION_1,\n\t\t['dictionaryId', 'translation1.text', 'translation1.description'],\n\t\t{\n\t\t\tunique: true,\n\t\t},\n\t)\n\n\tconst settingsStore = t.db.createObjectStore(STORE_SETTINGS)\n\tsettingsStore.put(\n\t\tgetStringToIdbSortableMap(),\n\t\tKEY_SETTINGS_STRING_TO_IDB_SORTABLE_MAP,\n\t)\n}\n\nasync function upgradeDb1To2(t: IDBPTransaction<Db1 | Db>) {\n\tconst dictionariesStore = t.objectStore(STORE_DICTIONARIES)\n\tconst wordsStore = t.objectStore(STORE_WORDS)\n\tconst wordlistsStore = t.objectStore(DEPRECATED_STORE_WORDLISTS)\n\tlet cursor = await wordlistsStore.openCursor()\n\twhile (cursor) {\n\t\tconst dictionary1 = cursor.value\n\t\tconst dictionaryId = await dictionariesStore.put(\n\t\t\tdictionaryToDb({\n\t\t\t\tname: dictionary1.name,\n\t\t\t\tlanguage0: dictionary1.lang1Name,\n\t\t\t\tlanguage1: dictionary1.lang2Name,\n\t\t\t\tcount: 0,\n\t\t\t}),\n\t\t)\n\t\tif (isNumber(dictionaryId)) {\n\t\t\tfor (const word1 of dictionary1.words) {\n\t\t\t\tawait wordsStore.put(\n\t\t\t\t\twordToDb({\n\t\t\t\t\t\tdictionaryId,\n\t\t\t\t\t\tmodifiedDate: dateToString(new Date()),\n\t\t\t\t\t\ttranslation0: {\n\t\t\t\t\t\t\ttext: word1.lang1,\n\t\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\t\tcount: word1.lang1Count,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttranslation1: {\n\t\t\t\t\t\t\ttext: word1.lang2,\n\t\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\t\tcount: word1.lang2Count,\n\t\t\t\t\t\t},\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t\tcursor = await cursor.continue()\n\t}\n\tt.db.deleteObjectStore(DEPRECATED_STORE_WORDLISTS)\n}\n\nasync function upgradeDb2To3(t: IDBPTransaction<Db>) {\n\tconst dictionariesStore = t.objectStore(STORE_DICTIONARIES)\n\tlet cursor = await dictionariesStore.openKeyCursor()\n\twhile (cursor) {\n\t\tawait updateDictionaryCount({ t, dictionaryId: cursor.primaryKey })\n\t\tcursor = await cursor.continue()\n\t}\n\tdictionariesStore.createIndex(INDEX_DICTIONARIES_COUNT_NAME, [\n\t\t'countForSort',\n\t\t'nameForSort',\n\t])\n}\n","import { QUESTIONS_CHARACTER } from '../model/constants'\nimport { Dictionary } from '../model/Dictionary'\n\nexport function dictionaryToString(dictionary: Dictionary): string {\n\treturn `${dictionary.name} (${dictionary.language0}, ${\n\t\tdictionary.language1\n\t}${dictionary.count ? `; ${QUESTIONS_CHARACTER} ${dictionary.count}` : ''})`\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { Dictionary } from '../model/Dictionary'\nimport { TLoadable } from '../model/TLoadable'\nimport { readDictionaryById } from '../storage/readDictionaryById'\n\nexport function useDictionary(dictionaryId: number | null) {\n\tconst [$dictionary, set$dictionary] = useState<\n\t\tTLoadable<{ current: Dictionary | undefined }>\n\t>(null)\n\tconst loadDictionary = useCallback(() => {\n\t\tif (dictionaryId == null) {\n\t\t\tset$dictionary({ current: undefined })\n\t\t} else {\n\t\t\tlet aborted = false\n\t\t\tset$dictionary(Date.now())\n\t\t\treadDictionaryById({ id: dictionaryId })\n\t\t\t\t.then(dictionary => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$dictionary({ current: dictionary })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tset$dictionary(e + '')\n\t\t\t\t})\n\t\t\treturn () => {\n\t\t\t\taborted = true\n\t\t\t}\n\t\t}\n\t}, [dictionaryId])\n\treturn {\n\t\t$dictionary,\n\t\tset$dictionary,\n\t\tloadDictionary,\n\t}\n}\n","import { useEffect } from 'react'\n\nexport function usePageTitle(title: string) {\n\tuseEffect(() => {\n\t\tdocument.title = `${title} :: Mag`\n\t}, [title])\n}\n","import { createContext } from 'react'\n\nexport const ShowMessageContext = createContext((message: any) => {})\n","export interface ReadItemsSource<T> {\n\tcount(key?: IDBKeyRange): Promise<number>\n\topenCursor(range?: IDBKeyRange): Promise<ReadItemsCursor<T> | null>\n}\n\nexport interface ReadItemsCursor<T> {\n\tvalue: T\n\tcontinue(): Promise<ReadItemsCursor<T> | null>\n}\n\nexport interface CountItemsParams<T> extends CountItemsPagingParams<T> {\n\tsource: ReadItemsSource<T>\n}\n\nexport interface CountItemsPagingParams<T> {\n\tfilter?: (item: T) => boolean\n\trange?: IDBKeyRange\n}\n\nexport async function countItems<T>({\n\tsource,\n\tfilter,\n\trange,\n}: CountItemsParams<T>): Promise<number> {\n\tif (!filter) {\n\t\treturn source.count(range)\n\t}\n\tlet result: number = 0\n\tlet cursor = await source.openCursor(range)\n\tif (cursor) {\n\t\twhile (cursor) {\n\t\t\tif (filter(cursor.value)) {\n\t\t\t\tresult++\n\t\t\t}\n\t\t\tcursor = await cursor.continue()\n\t\t}\n\t}\n\treturn result\n}\n","import { MIN_MAX_RANGE } from '../model/constants'\nimport { TKeyLimits } from '../model/TKeyLimits'\n\nexport function makeKeyRangeWordsModifiedDate({\n\tdictionaryId,\n\tmodifiedDateForSort = MIN_MAX_RANGE,\n\tcountForSort = MIN_MAX_RANGE,\n\ttextForSort = MIN_MAX_RANGE,\n\tdescriptionForSort = MIN_MAX_RANGE,\n}: {\n\tdictionaryId: number\n\tmodifiedDateForSort?: TKeyLimits<string>\n\tcountForSort?: TKeyLimits<number>\n\ttextForSort?: TKeyLimits<string>\n\tdescriptionForSort?: TKeyLimits<string>\n}) {\n\treturn IDBKeyRange.bound(\n\t\t[\n\t\t\tdictionaryId,\n\t\t\tmodifiedDateForSort[0],\n\t\t\tcountForSort[0],\n\t\t\ttextForSort[0],\n\t\t\tdescriptionForSort[0],\n\t\t],\n\t\t[\n\t\t\tdictionaryId,\n\t\t\tmodifiedDateForSort[1],\n\t\t\tcountForSort[1],\n\t\t\ttextForSort[1],\n\t\t\tdescriptionForSort[1],\n\t\t],\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { DbWord } from '../model/Word'\nimport { countItems } from './countItems'\nimport { Db, getDb, INDEX_WORDS_MODIFIED_DATE_0, STORE_WORDS } from './Db'\nimport { makeKeyRangeWordsModifiedDate } from './makeKeyRangeWordsModifiedDate'\n\nexport async function countWordsByDictionaryId({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tdictionaryId,\n\tfilter,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n\tfilter?: (item: DbWord) => boolean\n}): Promise<number> {\n\tconst dictionaryIdIndex = t\n\t\t.objectStore(STORE_WORDS)\n\t\t.index(INDEX_WORDS_MODIFIED_DATE_0)\n\treturn countItems({\n\t\tsource: dictionaryIdIndex,\n\t\trange: makeKeyRangeWordsModifiedDate({ dictionaryId }),\n\t\tfilter,\n\t})\n}\n","import { useContext, useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { ShowMessageContext } from '../comp/ShowMessageContext'\nimport { TLoadable } from '../model/TLoadable'\nimport { DbWord } from '../model/Word'\nimport { countWordsByDictionaryId } from '../storage/countWordsByDictionaryId'\n\nexport function useWordCountByDictionaryId({\n\tdictionaryId,\n\tfilter,\n}: {\n\tdictionaryId: number | null\n\tfilter?: (word: DbWord) => boolean\n}) {\n\tconst [$wordCount, set$wordCount] = useState<\n\t\tTLoadable<{ current: number }>\n\t>(null)\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst loadWordCount = useCallback(() => {\n\t\tif (dictionaryId == null) {\n\t\t\tset$wordCount({ current: 0 })\n\t\t} else {\n\t\t\tlet aborted = false\n\t\t\tset$wordCount(Date.now())\n\t\t\tcountWordsByDictionaryId({ dictionaryId, filter })\n\t\t\t\t.then(count => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$wordCount({ current: count })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tshowMessage(e)\n\t\t\t\t\tset$wordCount(e + '')\n\t\t\t\t})\n\t\t\treturn () => {\n\t\t\t\taborted = true\n\t\t\t}\n\t\t}\n\t}, [dictionaryId, filter, showMessage])\n\treturn { $wordCount, set$wordCount, loadWordCount }\n}\n","import { isNumber, isString } from 'util'\n\nexport type TLoadable<T extends object> = T | null | number | string\n\nexport function isLoaded<T extends object>(o: TLoadable<T>): o is T {\n\treturn o != null && !isNumber(o) && !isString(o)\n}\n\nexport function hasNotStartedLoading(o: TLoadable<any>): o is null {\n\treturn o === null\n}\n\nexport function isLoading(o: TLoadable<any>): o is number {\n\treturn isNumber(o)\n}\n\nexport function hasLoadError(o: TLoadable<any>): o is string {\n\treturn isString(o)\n}\n","import { IDBPTransaction } from 'idb'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_COUNT_0,\n\tSTORE_DICTIONARIES,\n\tSTORE_WORDS,\n} from './Db'\nimport { makeKeyRangeWordsCount } from './makeKeyRangeWordsCount'\n\nexport async function deleteDictionary({\n\tt = getDb().transaction([STORE_DICTIONARIES, STORE_WORDS], 'readwrite'),\n\tdictionaryId,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n}) {\n\tconst wordsIndex = t.objectStore(STORE_WORDS).index(INDEX_WORDS_COUNT_0)\n\tlet wordCursor = await wordsIndex.openCursor(\n\t\tmakeKeyRangeWordsCount({ dictionaryId }),\n\t)\n\twhile (wordCursor) {\n\t\twordCursor.delete()\n\t\twordCursor = await wordCursor.continue()\n\t}\n\tconst dictionaryStore = t.objectStore(STORE_DICTIONARIES)\n\tdictionaryStore.delete(dictionaryId)\n}\n","import React, { PropsWithChildren } from 'react'\nimport styles from './RowComp.module.css'\n\nexport interface RowCompProps {\n\t_isVertical?: boolean\n\t_gap?: 0 | 1 | 5 | 10 | 20\n\t_padding?: 0 | 1 | 5 | 10 | 20\n\t_fill?: boolean\n\t_wrap?: boolean\n}\n\nexport function RowComp({\n\tchildren,\n\t_isVertical,\n\t_gap,\n\t_padding,\n\t_fill,\n\t_wrap,\n}: PropsWithChildren<RowCompProps>) {\n\treturn (\n\t\t<div\n\t\t\tclassName={[\n\t\t\t\tstyles.wrapper,\n\t\t\t\t_isVertical ? styles.columnWrapper : styles.rowWrapper,\n\t\t\t\t_fill && styles.wrapperFill,\n\t\t\t\t_padding ? styles[`padding${_padding}`] : styles.padding0,\n\t\t\t]\n\t\t\t\t.filter(Boolean)\n\t\t\t\t.join(' ')}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={[\n\t\t\t\t\t_isVertical ? styles.column : styles.row,\n\t\t\t\t\t_fill && styles.fill,\n\t\t\t\t\t_wrap && styles.wrap,\n\t\t\t\t\t_gap ? styles[`gap${_gap}`] : styles.gap0,\n\t\t\t\t]\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t.join(' ')}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import React, { PropsWithChildren } from 'react'\nimport { RowComp } from './RowComp'\n\nexport interface ButtonRowCompProps {}\n\nexport function ButtonRowComp(props: PropsWithChildren<ButtonRowCompProps>) {\n\treturn (\n\t\t<RowComp _gap={5} _wrap _fill>\n\t\t\t{props.children}\n\t\t</RowComp>\n\t)\n}\n","import React, { PropsWithChildren } from 'react'\nimport { RowComp } from './RowComp'\n\nexport interface ContentRowCompProps {}\n\nexport function ContentRowComp(props: PropsWithChildren<ContentRowCompProps>) {\n\treturn (\n\t\t<RowComp _isVertical _gap={10}>\n\t\t\t{props.children}\n\t\t</RowComp>\n\t)\n}\n","import React from 'react'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { Dictionary } from '../model/Dictionary'\n\nexport interface DictionaryCompProps {\n\t_dictionary: Dictionary\n}\n\nexport function DictionaryComp({ _dictionary }: DictionaryCompProps) {\n\treturn <>{dictionaryToString(_dictionary)}</>\n}\n","import React, { useEffect } from 'react'\n\nexport interface FocusRefCompProps<T extends HTMLElement> {\n\t_focusThis: React.RefObject<T | null | undefined>\n}\n\nexport function FocusRefComp<T extends HTMLElement>({\n\t_focusThis,\n}: FocusRefCompProps<T>) {\n\tuseEffect(() => {\n\t\tif (_focusThis.current) {\n\t\t\t_focusThis.current.focus()\n\t\t}\n\t}, [_focusThis])\n\treturn <></>\n}\n","import React from 'react'\n\nexport interface IconCompProps {\n\t_icon: string\n}\n\nexport function IconComp(props: IconCompProps) {\n\treturn (\n\t\t<span role='img' aria-label=''>\n\t\t\t{props._icon}\n\t\t</span>\n\t)\n}\n","import React, { ReactNode, useEffect, useRef } from 'react'\nimport { usePrevious } from '../hook/usePrevious'\nimport { PROGRESS_CHARACTER } from '../model/constants'\nimport {\n\thasLoadError,\n\thasNotStartedLoading,\n\tisLoaded,\n\tisLoading,\n\tTLoadable,\n} from '../model/TLoadable'\n\nexport interface LoadableCompProps<T extends object> {\n\t_value: TLoadable<T>\n\t_load?: () => (() => void) | void\n\t_debugName?: string\n\tchildren: (value: T) => ReactNode\n}\n\nexport function LoadableComp<T extends object>({\n\t_value,\n\t_load,\n\t_debugName,\n\tchildren,\n}: LoadableCompProps<T>) {\n\tconst previousLoad = usePrevious(_load)\n\tconst loadChanged = _load !== previousLoad\n\tconst valueIsLoadingAt = useRef(0)\n\tconst hadNotStartedLoading = useRef(false)\n\tconst valueNeedsLoadingAt =\n\t\t_load &&\n\t\t(loadChanged ||\n\t\t\t(!hadNotStartedLoading.current && hasNotStartedLoading(_value)))\n\t\t\t? Date.now()\n\t\t\t: valueIsLoadingAt.current\n\tif (hadNotStartedLoading.current && hasNotStartedLoading(_value)) {\n\t\tconsole.warn(`[pyfh9t] Már töltöm: ${_debugName}`)\n\t}\n\thadNotStartedLoading.current = hasNotStartedLoading(_value)\n\tuseEffect(() => {\n\t\tif (_load) {\n\t\t\tvalueIsLoadingAt.current = valueNeedsLoadingAt\n\t\t\treturn _load()\n\t\t}\n\t}, [_load, _debugName, valueNeedsLoadingAt, valueIsLoadingAt])\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{!loadChanged && isLoaded(_value) && children(_value)}\n\t\t\t{(loadChanged ||\n\t\t\t\thasNotStartedLoading(_value) ||\n\t\t\t\tisLoading(_value)) &&\n\t\t\t\tPROGRESS_CHARACTER}\n\t\t\t{hasLoadError(_value) && (\n\t\t\t\t<span style={{ color: `#bf0000` }}>{_value}</span>\n\t\t\t)}\n\t\t</React.Fragment>\n\t)\n}\n","import { useEffect, useRef } from 'react'\n\nexport function usePrevious<T>(value: T): T | undefined {\n\tconst ref = useRef<T>()\n\tuseEffect(() => {\n\t\tref.current = value\n\t})\n\treturn ref.current\n}\n","import { createContext } from 'react'\n\nexport interface ShieldContextType {\n\tshowShield: (key: string) => void\n\thideShield: (key: string) => void\n}\n\nexport const ShieldContext = createContext<ShieldContextType>({\n\tshowShield: () => {},\n\thideShield: () => {},\n})\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport interface UnknownDictionaryCompProps {}\n\nexport function UnknownDictionaryComp(props: UnknownDictionaryCompProps) {\n\treturn (\n\t\t<>\n\t\t\t<h1>Ismeretlen szótár</h1>\n\t\t\t<p>\n\t\t\t\tEz a szótár nem létezik.{' '}\n\t\t\t\t<Link to='/'>Menj vissza a kezdőoldalra</Link>, és válassz egy\n\t\t\t\tmásikat!\n\t\t\t</p>\n\t\t</>\n\t)\n}\n","import React, { useContext, useRef } from 'react'\nimport { useHistory, useRouteMatch } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { useDictionary } from '../hook/useDictionary'\nimport { useNumberOfQuestions } from '../hook/useNumberOfQuestions'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { useWordCountByDictionaryId } from '../hook/useWordCountByDictionaryId'\nimport { ERROR_CHARACTER } from '../model/constants'\nimport { isLoaded } from '../model/TLoadable'\nimport { deleteDictionary } from '../storage/deleteDictionary'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryComp } from './DictionaryComp'\nimport { FocusRefComp } from './FocusRefComp'\nimport { IconComp } from './IconComp'\nimport { LoadableComp } from './LoadableComp'\nimport { ShieldContext } from './ShieldContext'\nimport { ShowMessageContext } from './ShowMessageContext'\nimport { UnknownDictionaryComp } from './UnknownDictionaryComp'\n\nexport interface DictionaryPageProps {}\n\nexport function DictionaryPage(props: DictionaryPageProps) {\n\tconst history = useHistory()\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string }>(\n\t\t'/dictionary/:dictionaryId/',\n\t)\n\tconst dictionaryId = routeMatch\n\t\t? parseInt(routeMatch.params.dictionaryId, 10)\n\t\t: null\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst { $numberOfQuestions, loadNumberOfQuestions } = useNumberOfQuestions(\n\t\tdictionaryId,\n\t)\n\tconst { $wordCount, loadWordCount } = useWordCountByDictionaryId({\n\t\tdictionaryId,\n\t})\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst askLinkRef = useRef<HTMLAnchorElement>(null)\n\tconst addAWordLinkRef = useRef<HTMLAnchorElement>(null)\n\tconst { showShield, hideShield } = useContext(ShieldContext)\n\tusePageTitle(\n\t\t!isLoaded($dictionary)\n\t\t\t? `Szótár`\n\t\t\t: $dictionary.current\n\t\t\t? dictionaryToString($dictionary.current)\n\t\t\t: `Ismeretlen szótár`,\n\t)\n\treturn (\n\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t{dictionary =>\n\t\t\t\tdictionary.current ? (\n\t\t\t\t\t<ContentRowComp>\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t<DictionaryComp _dictionary={dictionary.current} />\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<LoadableComp _value={$wordCount} _load={loadWordCount}>\n\t\t\t\t\t\t\t{wordCount =>\n\t\t\t\t\t\t\t\twordCount.current ? (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<LoadableComp\n\t\t\t\t\t\t\t\t\t\t\t_value={$numberOfQuestions}\n\t\t\t\t\t\t\t\t\t\t\t_load={loadNumberOfQuestions}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{numberOfQuestions =>\n\t\t\t\t\t\t\t\t\t\t\t\tnumberOfQuestions.current ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnumberOfQuestions.current\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkérdésem van.\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tGratulálok! Mindet\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmegtanultad!\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\tÍme az új szótárad! Először{' '}\n\t\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\t\tto='./word/'\n\t\t\t\t\t\t\t\t\t\t\tinnerRef={addAWordLinkRef}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tadj hozzá szavakat\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t<FocusRefComp\n\t\t\t\t\t\t\t\t\t\t\t_focusThis={addAWordLinkRef}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t, vagy{' '}\n\t\t\t\t\t\t\t\t\t\t<Link to='./import/'>\n\t\t\t\t\t\t\t\t\t\t\ttölts be szavakat!\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t\t\t{isLoaded($numberOfQuestions) &&\n\t\t\t\t\t\t\t\t$numberOfQuestions.current > 0 && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\t\tto='./learn/'\n\t\t\t\t\t\t\t\t\t\t\tinnerRef={askLinkRef}\n\t\t\t\t\t\t\t\t\t\t\trole='button'\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<IconComp _icon='❓' /> Kérdezz!\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t<FocusRefComp _focusThis={askLinkRef} />\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<Link to='./word/' role='button'>\n\t\t\t\t\t\t\t\t<IconComp _icon='➕' /> Adj hozzá egy szót\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<Link to='./words/' role='button'>\n\t\t\t\t\t\t\t\t<IconComp _icon='👀' /> Mutasd a szavakat\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<Link to='./export/' role='button'>\n\t\t\t\t\t\t\t\t<IconComp _icon='💾' /> Mentsd ki ezt a szótárat\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<Link to='./import/' role='button'>\n\t\t\t\t\t\t\t\t<IconComp _icon='📂' /> Tölts be szavakat\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<Link to='./edit/' role='button'>\n\t\t\t\t\t\t\t\t<IconComp _icon='✏️' /> Módosítsd ezt a szótárat\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tdictionaryId != null &&\n\t\t\t\t\t\t\t\t\t\twindow.confirm(\n\t\t\t\t\t\t\t\t\t\t\t`Biztosan törölni akarod ezt a szótárat?`,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\tshowShield('q0t19b')\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tawait deleteDictionary({\n\t\t\t\t\t\t\t\t\t\t\t\tdictionaryId,\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\thistory.goBack()\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\thideShield('q0t19b')\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<IconComp _icon={ERROR_CHARACTER} /> Töröld ezt\n\t\t\t\t\t\t\t\ta szótárat\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</ButtonRowComp>\n\t\t\t\t\t</ContentRowComp>\n\t\t\t\t) : (\n\t\t\t\t\t<UnknownDictionaryComp />\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { TLoadable } from '../model/TLoadable'\nimport { countNumberOfQuestions } from '../storage/countNumberOfQuestions'\n\nexport function useNumberOfQuestions(dictionaryId: number | null) {\n\tconst [$numberOfQuestions, set$numberOfQuestions] = useState<\n\t\tTLoadable<{ current: number }>\n\t>(null)\n\tconst loadNumberOfQuestions = useCallback(() => {\n\t\tif (dictionaryId == null) {\n\t\t\tset$numberOfQuestions(0)\n\t\t} else {\n\t\t\tlet aborted = false\n\t\t\tset$numberOfQuestions(Date.now())\n\t\t\tcountNumberOfQuestions({ dictionaryId })\n\t\t\t\t.then(count => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$numberOfQuestions({ current: count })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$numberOfQuestions(e + '')\n\t\t\t\t})\n\t\t\treturn () => {\n\t\t\t\taborted = true\n\t\t\t}\n\t\t}\n\t}, [dictionaryId])\n\treturn { $numberOfQuestions, set$numberOfQuestions, loadNumberOfQuestions }\n}\n","export function url(\n\tliterals: TemplateStringsArray,\n\t...placeholders: (string | number)[]\n) {\n\tlet result = ''\n\tfor (let i = 0; i < placeholders.length; i++) {\n\t\tresult += literals[i]\n\t\tresult += encodeURIComponent(placeholders[i])\n\t}\n\tresult += literals[literals.length - 1]\n\treturn result\n}\n","export function sanitizeString(s: string): string {\n\treturn s.trim().replace(/\\s+/g, ' ')\n}\n","import { Dictionary } from '../model/Dictionary'\nimport { sanitizeString } from './sanitizeString'\n\nexport function sanitizeDictionary(d: Dictionary): Dictionary {\n\treturn {\n\t\t...(d.id != null && { id: d.id }),\n\t\tname: sanitizeString(d.name),\n\t\tlanguage0: sanitizeString(d.language0),\n\t\tlanguage1: sanitizeString(d.language1),\n\t\tcount: d.count,\n\t}\n}\n","import { IDBPTransaction } from 'idb'\nimport { Dictionary, dictionaryToDb } from '../model/Dictionary'\nimport { Db, getDb, INDEX_DICTIONARIES_NAME, STORE_DICTIONARIES } from './Db'\n\nexport class DictionaryNameConflictError extends Error {\n\tconstructor(public dictionary: Dictionary) {\n\t\tsuper('[pyeant] Szótár név ütközés.')\n\t}\n}\n\nexport async function checkForConflictingDictionary({\n\tt = getDb().transaction([STORE_DICTIONARIES], 'readonly'),\n\tdictionary,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionary: Dictionary\n}) {\n\tconst dbDictionary = dictionaryToDb(dictionary)\n\tconst dictionariesStore = t.objectStore(STORE_DICTIONARIES)\n\tconst dictionaryWithSameName = await dictionariesStore\n\t\t.index(INDEX_DICTIONARIES_NAME)\n\t\t.get(dbDictionary.nameForSort)\n\tif (dictionaryWithSameName && dictionaryWithSameName.id !== dictionary.id) {\n\t\tthrow new DictionaryNameConflictError(dictionaryWithSameName)\n\t}\n}\n","import { useMemo } from 'use-memo-one'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded, TLoadable } from '../model/TLoadable'\nimport { useConflictingDictionary } from './useConflictingDictionary'\n\nexport function useDictionaryValidationErrors(\n\tdictionary: Dictionary | null,\n): TLoadable<Error[]> {\n\tconst conflictingDictionary = useConflictingDictionary(dictionary)\n\tconst result: TLoadable<Error[]> = useMemo(() => {\n\t\treturn !isLoaded(conflictingDictionary)\n\t\t\t? conflictingDictionary\n\t\t\t: ([\n\t\t\t\t\tconflictingDictionary.exists &&\n\t\t\t\t\t\tnew Error(`Ezzel a névvel már létezik egy szótár.`),\n\t\t\t\t\tdictionary &&\n\t\t\t\t\t\t!dictionary.name.trim() &&\n\t\t\t\t\t\tnew Error(`A név megadása kötelező.`),\n\t\t\t\t\tdictionary &&\n\t\t\t\t\t\t(!dictionary.language0.trim() ||\n\t\t\t\t\t\t\t!dictionary.language1.trim()) &&\n\t\t\t\t\t\tnew Error(`Mindkét nyelvet el kell nevezned.`),\n\t\t\t\t\tdictionary &&\n\t\t\t\t\t\tdictionary.language0 &&\n\t\t\t\t\t\tdictionary.language0 === dictionary.language1 &&\n\t\t\t\t\t\tnew Error(`A két nyelv neve nem lehet ugyanaz.`),\n\t\t\t  ].filter(Boolean) as Error[])\n\t}, [conflictingDictionary, dictionary])\n\treturn result\n}\n","import { useEffect, useState } from 'react'\nimport { Dictionary } from '../model/Dictionary'\nimport { TLoadable } from '../model/TLoadable'\nimport {\n\tcheckForConflictingDictionary,\n\tDictionaryNameConflictError,\n} from '../storage/checkForConflictingDictionary'\n\nexport function useConflictingDictionary(dictionary: Dictionary | null) {\n\tconst [$conflictingDictionary, set$conflictingDictionary] = useState<\n\t\tTLoadable<{ exists: boolean }>\n\t>(null)\n\tuseEffect(() => {\n\t\tlet isAborted = false\n\t\t;(async () => {\n\t\t\ttry {\n\t\t\t\tif (dictionary) {\n\t\t\t\t\tset$conflictingDictionary(Date.now())\n\t\t\t\t\tawait checkForConflictingDictionary({ dictionary })\n\t\t\t\t\tif (isAborted) return\n\t\t\t\t}\n\t\t\t\tset$conflictingDictionary({ exists: false })\n\t\t\t} catch (e) {\n\t\t\t\tif (isAborted) return\n\t\t\t\tif (e instanceof DictionaryNameConflictError) {\n\t\t\t\t\tset$conflictingDictionary({\n\t\t\t\t\t\texists: true,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tset$conflictingDictionary(e + '')\n\t\t\t\t}\n\t\t\t}\n\t\t})()\n\t\treturn () => {\n\t\t\tisAborted = true\n\t\t}\n\t}, [dictionary])\n\treturn $conflictingDictionary\n}\n","import React, { PropsWithChildren } from 'react'\nimport { RowComp } from './RowComp'\n\nexport interface FormRowCompProps {}\n\nexport function FormRowComp(props: PropsWithChildren<FormRowCompProps>) {\n\treturn (\n\t\t<RowComp _gap={5} _fill>\n\t\t\t{props.children}\n\t\t</RowComp>\n\t)\n}\n","import React, { PropsWithChildren } from 'react'\nimport styles from './LabelComp.module.css'\n\nexport interface LabelCompProps {\n\t_for?: string\n\t_required?: boolean\n}\n\nexport function LabelComp({\n\t_for,\n\t_required,\n\tchildren,\n}: PropsWithChildren<LabelCompProps>) {\n\treturn (\n\t\t<label htmlFor={_for} className={styles.label}>\n\t\t\t{children}\n\t\t\t{_required && (\n\t\t\t\t<span\n\t\t\t\t\tclassName={styles.required}\n\t\t\t\t\trole='img'\n\t\t\t\t\taria-label=' (kötelező kitölteni) '\n\t\t\t\t>\n\t\t\t\t\t•\n\t\t\t\t</span>\n\t\t\t)}\n\t\t\t:\n\t\t</label>\n\t)\n}\n","import React from 'react'\nimport { Dictionary } from '../model/Dictionary'\nimport { ContentRowComp } from './ContentRowComp'\nimport { FormRowComp } from './FormRowComp'\nimport { LabelComp } from './LabelComp'\n\nexport interface DictionaryPropsCompProps {\n\t_dictionary: Dictionary\n\t_setDictionary: (v: Dictionary) => void\n}\n\nexport function DictionaryPropsComp({\n\t_dictionary,\n\t_setDictionary,\n}: DictionaryPropsCompProps) {\n\treturn (\n\t\t<ContentRowComp>\n\t\t\t<FormRowComp>\n\t\t\t\t<LabelComp _required>Név</LabelComp>\n\t\t\t\t<input\n\t\t\t\t\tautoFocus\n\t\t\t\t\tvalue={_dictionary.name}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t_setDictionary({ ..._dictionary, name: e.target.value })\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormRowComp>\n\t\t\t<FormRowComp>\n\t\t\t\t<LabelComp _required>Első nyelv neve</LabelComp>\n\t\t\t\t<input\n\t\t\t\t\tvalue={_dictionary.language0}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t_setDictionary({\n\t\t\t\t\t\t\t..._dictionary,\n\t\t\t\t\t\t\tlanguage0: e.target.value,\n\t\t\t\t\t\t})\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormRowComp>\n\t\t\t<FormRowComp>\n\t\t\t\t<LabelComp _required>Második nyelv neve</LabelComp>\n\t\t\t\t<input\n\t\t\t\t\tvalue={_dictionary.language1}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t_setDictionary({\n\t\t\t\t\t\t\t..._dictionary,\n\t\t\t\t\t\t\tlanguage1: e.target.value,\n\t\t\t\t\t\t})\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormRowComp>\n\t\t</ContentRowComp>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { Translation } from '../model/Translation'\nimport { wordFromDb } from '../model/Word'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_TRANSLATION_0,\n\tINDEX_WORDS_TRANSLATION_1,\n\tSTORE_WORDS,\n} from './Db'\n\nexport async function readWordByTranslation({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tdictionaryId,\n\ttranslationIndex,\n\ttranslation,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n\ttranslationIndex: 0 | 1\n\ttranslation: Translation\n}) {\n\tconst wordsStore = t.objectStore(STORE_WORDS)\n\tconst word = await wordsStore\n\t\t.index(\n\t\t\ttranslationIndex === 0\n\t\t\t\t? INDEX_WORDS_TRANSLATION_0\n\t\t\t\t: INDEX_WORDS_TRANSLATION_1,\n\t\t)\n\t\t.get([dictionaryId, translation.text, translation.description])\n\treturn word && wordFromDb(word)\n}\n","import { IDBPTransaction } from 'idb'\nimport { Word } from '../model/Word'\nimport { Db, getDb, STORE_WORDS } from './Db'\nimport { readWordByTranslation } from './readWordByTranslation'\n\nexport class ExistingTranslationError extends Error {\n\tconstructor(public translations: [Word | undefined, Word | undefined]) {\n\t\tsuper('[pyeb4f] Már létező fordítás.')\n\t}\n}\n\nexport async function checkForConflictingWord({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tword,\n}: {\n\tt?: IDBPTransaction<Db>\n\tword: Word\n}) {\n\tconst existingTranslations = await Promise.all([\n\t\treadWordByTranslation({\n\t\t\tt,\n\t\t\tdictionaryId: word.dictionaryId,\n\t\t\ttranslationIndex: 0,\n\t\t\ttranslation: word.translation0,\n\t\t}),\n\t\treadWordByTranslation({\n\t\t\tt,\n\t\t\tdictionaryId: word.dictionaryId,\n\t\t\ttranslationIndex: 1,\n\t\t\ttranslation: word.translation1,\n\t\t}),\n\t])\n\tconst existingTranslationsWithDifferingId = existingTranslations.map(\n\t\tother => (other && other.id !== word.id ? other : undefined),\n\t) as [Word | undefined, Word | undefined]\n\tif (\n\t\texistingTranslationsWithDifferingId[0] ||\n\t\texistingTranslationsWithDifferingId[1]\n\t) {\n\t\tthrow new ExistingTranslationError(existingTranslationsWithDifferingId)\n\t}\n}\n","import React from 'react'\nimport { QUESTIONS_CHARACTER } from '../model/constants'\nimport { Translation } from '../model/Translation'\n\nexport interface TranslationCompProps {\n\t_translation: Translation\n}\n\nexport function TranslationComp({ _translation }: TranslationCompProps) {\n\treturn (\n\t\t<>\n\t\t\t{_translation.count > 0 && `${QUESTIONS_CHARACTER} `}\n\t\t\t{_translation.text}\n\t\t\t{_translation.description && (\n\t\t\t\t<>\n\t\t\t\t\t{' ('}\n\t\t\t\t\t{_translation.description}\n\t\t\t\t\t{')'}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</>\n\t)\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Word } from '../model/Word'\nimport { TranslationComp } from './TranslationComp'\n\nexport interface WordCompProps {\n\t_word: Word\n\t_swapTranslations?: boolean\n}\n\nexport function WordComp({ _word, _swapTranslations }: WordCompProps) {\n\treturn (\n\t\t<>\n\t\t\t<Link to={`/dictionary/${_word.dictionaryId}/word/${_word.id}/`}>\n\t\t\t\t<TranslationComp\n\t\t\t\t\t_translation={\n\t\t\t\t\t\t_swapTranslations\n\t\t\t\t\t\t\t? _word.translation1\n\t\t\t\t\t\t\t: _word.translation0\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t{` = `}\n\t\t\t\t<TranslationComp\n\t\t\t\t\t_translation={\n\t\t\t\t\t\t_swapTranslations\n\t\t\t\t\t\t\t? _word.translation0\n\t\t\t\t\t\t\t: _word.translation1\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</Link>\n\t\t</>\n\t)\n}\n","import React from 'react'\nimport { ERROR_CHARACTER } from '../model/constants'\nimport { TLoadable } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport { ExistingTranslationError } from '../storage/checkForConflictingWord'\nimport { LoadableComp } from './LoadableComp'\nimport { WordComp } from './WordComp'\n\nexport interface ErrorsCompProps {\n\t_errors: TLoadable<Error[]>\n}\n\nexport function ErrorsComp({ _errors }: ErrorsCompProps) {\n\treturn (\n\t\t<LoadableComp _value={_errors}>\n\t\t\t{errors =>\n\t\t\t\terrors.length > 0 && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Hibák:</p>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{errors.map((error, index) => (\n\t\t\t\t\t\t\t\t<li key={index}>\n\t\t\t\t\t\t\t\t\t{error instanceof\n\t\t\t\t\t\t\t\t\tExistingTranslationError ? (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t{ERROR_CHARACTER} Már létező\n\t\t\t\t\t\t\t\t\t\t\tfordítás:{' '}\n\t\t\t\t\t\t\t\t\t\t\t{(error.translations.filter(\n\t\t\t\t\t\t\t\t\t\t\t\tBoolean,\n\t\t\t\t\t\t\t\t\t\t\t) as Word[]).map(\n\t\t\t\t\t\t\t\t\t\t\t\t(translation, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<WordComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_word={translation}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t`${ERROR_CHARACTER} ${error.message}`\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","import React, { useState } from 'react'\nimport { useMemo } from 'use-memo-one'\nimport { sanitizeDictionary } from '../function/sanitizeDictionary'\nimport { useDictionaryValidationErrors } from '../hook/useDictionaryValidationErrors'\nimport { SUCCESS_CHARACTER } from '../model/constants'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded } from '../model/TLoadable'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryPropsComp } from './DictionaryPropsComp'\nimport { ErrorsComp } from './ErrorsComp'\nimport { IconComp } from './IconComp'\n\nexport interface EditDictionaryCompProps {\n\t_dictionary: Dictionary\n\t_storeDictionary: (d: Dictionary) => void\n}\n\nexport function EditDictionaryComp({\n\t_dictionary,\n\t_storeDictionary,\n}: EditDictionaryCompProps) {\n\tconst [$dictionary, set$dictionary] = useState(_dictionary)\n\tconst sanitizedDictionary = useMemo(() => sanitizeDictionary($dictionary), [\n\t\t$dictionary,\n\t])\n\tconst dictionaryValidationErrors = useDictionaryValidationErrors(\n\t\tsanitizedDictionary,\n\t)\n\tconst touched = !!(\n\t\tsanitizedDictionary.language0 ||\n\t\tsanitizedDictionary.language1 ||\n\t\tsanitizedDictionary.name\n\t)\n\treturn (\n\t\t<form\n\t\t\tonSubmit={async e => {\n\t\t\t\te.preventDefault()\n\t\t\t\t_storeDictionary(sanitizedDictionary)\n\t\t\t}}\n\t\t>\n\t\t\t<ContentRowComp>\n\t\t\t\t<DictionaryPropsComp\n\t\t\t\t\t_dictionary={$dictionary}\n\t\t\t\t\t_setDictionary={set$dictionary}\n\t\t\t\t/>\n\t\t\t\t{touched && <ErrorsComp _errors={dictionaryValidationErrors} />}\n\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t<button\n\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t!isLoaded(dictionaryValidationErrors) ||\n\t\t\t\t\t\t\tdictionaryValidationErrors.length > 0\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<IconComp _icon={SUCCESS_CHARACTER} /> Tárold el\n\t\t\t\t\t</button>\n\t\t\t\t</ButtonRowComp>\n\t\t\t</ContentRowComp>\n\t\t</form>\n\t)\n}\n","import React, { useContext } from 'react'\nimport { useHistory, useRouteMatch } from 'react-router-dom'\nimport { useCallback } from 'use-memo-one'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { url } from '../function/url'\nimport { useDictionary } from '../hook/useDictionary'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded } from '../model/TLoadable'\nimport { storeDictionary } from '../storage/storeDictionary'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryComp } from './DictionaryComp'\nimport { EditDictionaryComp } from './EditDictionaryComp'\nimport { LoadableComp } from './LoadableComp'\nimport { ShieldContext } from './ShieldContext'\n\nexport function EditDictionaryPage() {\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string | undefined }>(\n\t\t`/dictionary/:dictionaryId/edit/`,\n\t)\n\tconst dictionaryId =\n\t\trouteMatch && parseInt(routeMatch.params.dictionaryId + '', 10)\n\tconst history = useHistory()\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst { showShield, hideShield } = useContext(ShieldContext)\n\tconst finish = useCallback(\n\t\tasync (dictionary: Dictionary) => {\n\t\t\tshowShield('q0t143')\n\t\t\tconst storedDictionaryId = await storeDictionary({\n\t\t\t\tdictionary,\n\t\t\t})\n\t\t\thideShield('q0t143')\n\t\t\tif (dictionaryId === storedDictionaryId) {\n\t\t\t\thistory.goBack()\n\t\t\t} else {\n\t\t\t\thistory.replace(url`/dictionary/${storedDictionaryId}/`)\n\t\t\t}\n\t\t},\n\t\t[history, dictionaryId, showShield, hideShield],\n\t)\n\tusePageTitle(\n\t\tisLoaded($dictionary) && $dictionary.current\n\t\t\t? `${dictionaryToString($dictionary.current)} módosítása`\n\t\t\t: `Új szótár`,\n\t)\n\treturn (\n\t\t<>\n\t\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t\t{dictionary => (\n\t\t\t\t\t<ContentRowComp>\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t{dictionary.current ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<DictionaryComp\n\t\t\t\t\t\t\t\t\t\t_dictionary={dictionary.current}\n\t\t\t\t\t\t\t\t\t/>{' '}\n\t\t\t\t\t\t\t\t\tmódosítása\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t`Új szótár`\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<EditDictionaryComp\n\t\t\t\t\t\t\t_dictionary={\n\t\t\t\t\t\t\t\tdictionary.current || {\n\t\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\t\tlanguage0: '',\n\t\t\t\t\t\t\t\t\tlanguage1: '',\n\t\t\t\t\t\t\t\t\tcount: 0,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_storeDictionary={finish}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ContentRowComp>\n\t\t\t\t)}\n\t\t\t</LoadableComp>\n\t\t</>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { wordFromDb } from '../model/Word'\nimport { Db, getDb, STORE_WORDS } from './Db'\n\nexport async function readWord({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\twordId,\n}: {\n\tt?: IDBPTransaction<Db>\n\twordId: number\n}) {\n\tconst word = await t.objectStore(STORE_WORDS).get(wordId)\n\treturn word && wordFromDb(word)\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { TLoadable } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport { readWord } from '../storage/readWord'\n\nexport function useWord(wordId: number | null) {\n\tconst [$word, set$word] = useState<\n\t\tTLoadable<{ current: Word | undefined }>\n\t>(null)\n\tconst loadWord = useCallback(() => {\n\t\tif (wordId == null) {\n\t\t\tset$word({ current: undefined })\n\t\t} else {\n\t\t\tlet aborted = false\n\t\t\tset$word(Date.now())\n\t\t\treadWord({ wordId })\n\t\t\t\t.then(word => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$word({ current: word })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tset$word(e + '')\n\t\t\t\t})\n\t\t\treturn () => {\n\t\t\t\taborted = true\n\t\t\t}\n\t\t}\n\t}, [wordId])\n\treturn {\n\t\t$word,\n\t\tset$word,\n\t\tloadWord,\n\t}\n}\n","import { Translation } from '../model/Translation'\nimport { sanitizeString } from './sanitizeString'\n\nexport function sanitizeTranslation(t: Translation): Translation {\n\treturn {\n\t\tcount: t.count,\n\t\ttext: sanitizeString(t.text),\n\t\tdescription: sanitizeString(t.description),\n\t}\n}\n","import { Word } from '../model/Word'\nimport { sanitizeTranslation } from './sanitizeTranslation'\n\nexport function sanitizeWord(w: Word): Word {\n\treturn {\n\t\t...w,\n\t\ttranslation0: sanitizeTranslation(w.translation0),\n\t\ttranslation1: sanitizeTranslation(w.translation1),\n\t}\n}\n","import { useMemo } from 'use-memo-one'\nimport { isLoaded, TLoadable } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport { useExistingTranslationError } from './useExistingTranslationError'\n\nexport function useWordValidationErrors(word: Word | null) {\n\tconst existingTranslationError = useExistingTranslationError(word)\n\tconst result: TLoadable<Error[]> = useMemo(() => {\n\t\treturn !isLoaded(existingTranslationError)\n\t\t\t? existingTranslationError\n\t\t\t: ([\n\t\t\t\t\texistingTranslationError.current,\n\t\t\t\t\tword &&\n\t\t\t\t\t\t(!word.translation0.text.trim() ||\n\t\t\t\t\t\t\t!word.translation1.text.trim()) &&\n\t\t\t\t\t\tnew Error(`Mindkét fordítás megadása kötelező.`),\n\t\t\t  ].filter(Boolean) as Error[])\n\t}, [existingTranslationError, word])\n\treturn result\n}\n","import { useEffect, useState } from 'react'\nimport { TLoadable } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport {\n\tcheckForConflictingWord,\n\tExistingTranslationError,\n} from '../storage/checkForConflictingWord'\n\nexport function useExistingTranslationError(word: Word | null) {\n\tconst [$conflictingTranslations, set$conflictingTranslations] = useState<\n\t\tTLoadable<{ current: ExistingTranslationError | undefined }>\n\t>(null)\n\tuseEffect(() => {\n\t\tlet isAborted = false\n\t\t;(async () => {\n\t\t\ttry {\n\t\t\t\tif (word) {\n\t\t\t\t\tset$conflictingTranslations(Date.now())\n\t\t\t\t\tawait checkForConflictingWord({ word })\n\t\t\t\t\tif (isAborted) return\n\t\t\t\t}\n\t\t\t\tset$conflictingTranslations({ current: undefined })\n\t\t\t} catch (e) {\n\t\t\t\tif (isAborted) return\n\t\t\t\tif (e instanceof ExistingTranslationError) {\n\t\t\t\t\tset$conflictingTranslations({ current: e })\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tset$conflictingTranslations(e + '')\n\t\t\t\t}\n\t\t\t}\n\t\t})()\n\t\treturn () => {\n\t\t\tisAborted = true\n\t\t}\n\t}, [word])\n\treturn $conflictingTranslations\n}\n","import { IDBPTransaction } from 'idb'\nimport { Word, wordToDb } from '../model/Word'\nimport { Db, getDb, STORE_WORDS } from './Db'\n\nexport function storeWord({\n\tt = getDb().transaction([STORE_WORDS], 'readwrite'),\n\tword,\n}: {\n\tt?: IDBPTransaction<Db>\n\tword: Word\n}) {\n\tif (word.id == null) delete word.id\n\treturn t.objectStore(STORE_WORDS).put(wordToDb(word))\n}\n","import React, { FormEvent, useContext, useState } from 'react'\nimport { useCallback, useMemo } from 'use-memo-one'\nimport { dateToString } from '../function/dateToString'\nimport { sanitizeWord } from '../function/sanitizeWord'\nimport { useWordValidationErrors } from '../hook/useWordValidationErrors'\nimport {\n\tDEFAULT_COUNT,\n\tNO_QUESTIONS_CHARACTER,\n\tQUESTIONS_CHARACTER,\n\tSUCCESS_CHARACTER,\n} from '../model/constants'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport { checkForConflictingWord } from '../storage/checkForConflictingWord'\nimport { getDb, STORE_DICTIONARIES, STORE_WORDS } from '../storage/Db'\nimport { storeWord } from '../storage/storeWord'\nimport { updateDictionaryCount } from '../storage/updateDictionaryCount'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { ErrorsComp } from './ErrorsComp'\nimport { FormRowComp } from './FormRowComp'\nimport { IconComp } from './IconComp'\nimport { LabelComp } from './LabelComp'\nimport { ShieldContext } from './ShieldContext'\nimport { ShowMessageContext } from './ShowMessageContext'\n\nexport interface EditWordCompProps {\n\t_dictionary: Dictionary\n\t_word: Word\n\t_refresh: () => void\n\t_onSuccess: () => void\n}\n\nexport function EditWordComp({\n\t_dictionary,\n\t_word,\n\t_refresh,\n\t_onSuccess,\n}: EditWordCompProps) {\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst [$translation0Text, set$translation0Text] = useState(\n\t\t_word.translation0.text,\n\t)\n\tconst [$translation1Text, set$translation1Text] = useState(\n\t\t_word.translation1.text,\n\t)\n\tconst [$translation0Description, set$translation0Description] = useState(\n\t\t_word.translation0.description,\n\t)\n\tconst [$translation1Description, set$translation1Description] = useState(\n\t\t_word.translation1.description,\n\t)\n\tconst touched = !!(\n\t\t$translation0Text ||\n\t\t$translation1Text ||\n\t\t$translation0Description ||\n\t\t$translation1Description\n\t)\n\tconst sanitizedWord = useMemo(\n\t\t() =>\n\t\t\tsanitizeWord({\n\t\t\t\t...(_word.id && { id: _word.id }),\n\t\t\t\tdictionaryId: _dictionary.id!,\n\t\t\t\tmodifiedDate: dateToString(new Date()),\n\t\t\t\ttranslation0: {\n\t\t\t\t\ttext: $translation0Text,\n\t\t\t\t\tdescription: $translation0Description,\n\t\t\t\t\tcount: DEFAULT_COUNT,\n\t\t\t\t},\n\t\t\t\ttranslation1: {\n\t\t\t\t\ttext: $translation1Text,\n\t\t\t\t\tdescription: $translation1Description,\n\t\t\t\t\tcount: DEFAULT_COUNT,\n\t\t\t\t},\n\t\t\t}),\n\t\t[\n\t\t\t_dictionary,\n\t\t\t_word.id,\n\t\t\t$translation0Text,\n\t\t\t$translation0Description,\n\t\t\t$translation1Text,\n\t\t\t$translation1Description,\n\t\t],\n\t)\n\tconst validationErrors = useWordValidationErrors(sanitizedWord)\n\tconst { showShield, hideShield } = useContext(ShieldContext)\n\tconst onSubmit = useCallback(\n\t\tasync (e: FormEvent) => {\n\t\t\te.preventDefault()\n\t\t\tif (!sanitizedWord) return\n\t\t\tconst t = getDb().transaction(\n\t\t\t\t[STORE_DICTIONARIES, STORE_WORDS],\n\t\t\t\t'readwrite',\n\t\t\t)\n\t\t\tshowShield('q0t1ec')\n\t\t\ttry {\n\t\t\t\tawait checkForConflictingWord({\n\t\t\t\t\tt,\n\t\t\t\t\tword: sanitizedWord,\n\t\t\t\t})\n\t\t\t\tawait storeWord({\n\t\t\t\t\tt,\n\t\t\t\t\tword: sanitizedWord,\n\t\t\t\t})\n\t\t\t\tawait updateDictionaryCount({\n\t\t\t\t\tt,\n\t\t\t\t\tdictionaryId: sanitizedWord.dictionaryId,\n\t\t\t\t})\n\t\t\t\t_onSuccess()\n\t\t\t} catch (e) {\n\t\t\t\tshowMessage(e)\n\t\t\t}\n\t\t\thideShield('q0t1ec')\n\t\t},\n\t\t[sanitizedWord, _onSuccess, showMessage, showShield, hideShield],\n\t)\n\treturn (\n\t\t<form onSubmit={onSubmit}>\n\t\t\t<ContentRowComp>\n\t\t\t\t<h1>{_word.id ? `Módosítsd a szót` : `Adj hozzá egy szót`}</h1>\n\t\t\t\t<FormRowComp>\n\t\t\t\t\t<LabelComp _required>{_dictionary.language0}</LabelComp>\n\t\t\t\t\t<input\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tvalue={$translation0Text}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tset$translation0Text(e.target.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</FormRowComp>\n\t\t\t\t<FormRowComp>\n\t\t\t\t\t<LabelComp>Magyarázat</LabelComp>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={$translation0Description}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tset$translation0Description(e.target.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</FormRowComp>\n\t\t\t\t<FormRowComp>\n\t\t\t\t\t<LabelComp _required>{_dictionary.language1}</LabelComp>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={$translation1Text}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tset$translation1Text(e.target.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</FormRowComp>\n\t\t\t\t<FormRowComp>\n\t\t\t\t\t<LabelComp>Magyarázat</LabelComp>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={$translation1Description}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tset$translation1Description(e.target.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</FormRowComp>\n\t\t\t\t{_word.id && (\n\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\tKérdések:{' '}\n\t\t\t\t\t\t\t{_word.translation0.count > 0 &&\n\t\t\t\t\t\t\t\tQUESTIONS_CHARACTER}{' '}\n\t\t\t\t\t\t\t{_word.translation0.count} /{' '}\n\t\t\t\t\t\t\t{_word.translation1.count > 0 &&\n\t\t\t\t\t\t\t\tQUESTIONS_CHARACTER}{' '}\n\t\t\t\t\t\t\t{_word.translation1.count}\n\t\t\t\t\t\t</small>\n\t\t\t\t\t</FormRowComp>\n\t\t\t\t)}\n\t\t\t\t{touched && <ErrorsComp _errors={validationErrors} />}\n\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t<button\n\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t!isLoaded(validationErrors) ||\n\t\t\t\t\t\t\tvalidationErrors.length > 0\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\t<IconComp _icon={SUCCESS_CHARACTER} /> Tárold el\n\t\t\t\t\t</button>\n\t\t\t\t\t{_word.id &&\n\t\t\t\t\t\t(_word.translation0.count === 0 ||\n\t\t\t\t\t\t\t_word.translation1.count === 0) && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tconst t = getDb().transaction(\n\t\t\t\t\t\t\t\t\t\t\t[STORE_DICTIONARIES, STORE_WORDS],\n\t\t\t\t\t\t\t\t\t\t\t'readwrite',\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tawait storeWord({\n\t\t\t\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\t\t\t\tword: {\n\t\t\t\t\t\t\t\t\t\t\t\t..._word,\n\t\t\t\t\t\t\t\t\t\t\t\ttranslation0: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t..._word.translation0,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcount:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_word.translation0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.count ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDEFAULT_COUNT,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\ttranslation1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t..._word.translation1,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcount:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_word.translation1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.count ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDEFAULT_COUNT,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\tawait updateDictionaryCount({\n\t\t\t\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\t\t\t\tdictionaryId: _word.dictionaryId,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t_refresh()\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<IconComp _icon={QUESTIONS_CHARACTER} />{' '}\n\t\t\t\t\t\t\t\tKapcsold be a szót\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t{_word.id &&\n\t\t\t\t\t\t(_word.translation0.count > 0 ||\n\t\t\t\t\t\t\t_word.translation1.count > 0) && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tconst t = getDb().transaction(\n\t\t\t\t\t\t\t\t\t\t\t[STORE_DICTIONARIES, STORE_WORDS],\n\t\t\t\t\t\t\t\t\t\t\t'readwrite',\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\tawait storeWord({\n\t\t\t\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\t\t\t\tword: {\n\t\t\t\t\t\t\t\t\t\t\t\t..._word,\n\t\t\t\t\t\t\t\t\t\t\t\ttranslation0: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t..._word.translation0,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcount: 0,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\ttranslation1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t..._word.translation1,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcount: 0,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\tawait updateDictionaryCount({\n\t\t\t\t\t\t\t\t\t\t\tt,\n\t\t\t\t\t\t\t\t\t\t\tdictionaryId: _word.dictionaryId,\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t_refresh()\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<IconComp _icon={NO_QUESTIONS_CHARACTER} />{' '}\n\t\t\t\t\t\t\t\tKapcsold ki a szót\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t</ButtonRowComp>\n\t\t\t</ContentRowComp>\n\t\t</form>\n\t)\n}\n","import React from 'react'\nimport { useHistory, useRouteMatch } from 'react-router'\nimport { useCallback } from 'use-memo-one'\nimport { dateToString } from '../function/dateToString'\nimport { useDictionary } from '../hook/useDictionary'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { useWord } from '../hook/useWord'\nimport { DEFAULT_COUNT } from '../model/constants'\nimport { isLoaded } from '../model/TLoadable'\nimport { EditWordComp } from './EditWordComp'\nimport { LoadableComp } from './LoadableComp'\nimport { UnknownDictionaryComp } from './UnknownDictionaryComp'\n\nexport interface EditWordPageProps {}\n\nexport function EditWordPage(props: EditWordPageProps) {\n\tconst history = useHistory()\n\tconst routeMatch = useRouteMatch<{\n\t\tdictionaryId: string\n\t\twordId: string | undefined\n\t}>(`/dictionary/:dictionaryId/word/:wordId?/`)\n\tconst dictionaryId =\n\t\trouteMatch && parseInt(routeMatch.params.dictionaryId, 10)\n\tconst wordId =\n\t\trouteMatch && routeMatch.params.wordId != null\n\t\t\t? parseInt(routeMatch.params.wordId, 10)\n\t\t\t: null\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst { $word, loadWord } = useWord(wordId)\n\tconst onSuccess = useCallback(() => {\n\t\tif (isLoaded($word) && $word.current) {\n\t\t\thistory.goBack()\n\t\t} else {\n\t\t\tloadDictionary()\n\t\t}\n\t}, [$word, history, loadDictionary])\n\tusePageTitle(\n\t\t!isLoaded($word)\n\t\t\t? `Szó`\n\t\t\t: $word.current\n\t\t\t? `Módosítsd a szót`\n\t\t\t: `Adj hozzá egy szót`,\n\t)\n\treturn (\n\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t{dictionary =>\n\t\t\t\tdictionary.current == null ? (\n\t\t\t\t\t<UnknownDictionaryComp />\n\t\t\t\t) : (\n\t\t\t\t\t<LoadableComp _value={$word} _load={loadWord}>\n\t\t\t\t\t\t{word => (\n\t\t\t\t\t\t\t<EditWordComp\n\t\t\t\t\t\t\t\t_dictionary={dictionary.current!}\n\t\t\t\t\t\t\t\t_word={\n\t\t\t\t\t\t\t\t\tword.current || {\n\t\t\t\t\t\t\t\t\t\tdictionaryId: dictionary.current!.id!,\n\t\t\t\t\t\t\t\t\t\tmodifiedDate: dateToString(new Date()),\n\t\t\t\t\t\t\t\t\t\ttranslation0: {\n\t\t\t\t\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\t\t\t\t\t\tcount: DEFAULT_COUNT,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\ttranslation1: {\n\t\t\t\t\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\t\t\t\t\t\tcount: DEFAULT_COUNT,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t_onSuccess={onSuccess}\n\t\t\t\t\t\t\t\t_refresh={loadDictionary}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</LoadableComp>\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { DbWord, Word, wordFromDb } from '../model/Word'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_COUNT_TRANSLATION_0,\n\tINDEX_WORDS_COUNT_TRANSLATION_1,\n\tINDEX_WORDS_MODIFIED_DATE_0,\n\tINDEX_WORDS_MODIFIED_DATE_1,\n\tSTORE_WORDS,\n} from './Db'\nimport { makeKeyRangeWordsCountTranslation } from './makeKeyRangeWordsCountTranslation'\nimport { makeKeyRangeWordsModifiedDate } from './makeKeyRangeWordsModifiedDate'\nimport { readItems, ReadItemsPagingParams } from './readItems'\n\nexport enum WordsByDictionaryIdSort {\n\tModifiedDate0,\n\tModifiedDate1,\n\tCountTranslation0,\n\tCountTranslation1,\n}\n\nexport async function readWordsByDictionaryId({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tdictionaryId,\n\tsort = WordsByDictionaryIdSort.ModifiedDate0,\n\t...rest\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n\tsort?: WordsByDictionaryIdSort\n} & Omit<ReadItemsPagingParams<DbWord>, 'range'>): Promise<Word[]> {\n\tconst dictionaryIdIndex = t\n\t\t.objectStore(STORE_WORDS)\n\t\t.index(getIndexName(sort))\n\tconst words = await readItems({\n\t\tsource: dictionaryIdIndex,\n\t\trange: makeKeyRange(dictionaryId, sort),\n\t\t...rest,\n\t})\n\treturn words.map(wordFromDb)\n}\n\nfunction getIndexName(sort: WordsByDictionaryIdSort) {\n\tswitch (sort) {\n\t\tcase WordsByDictionaryIdSort.CountTranslation0:\n\t\t\treturn INDEX_WORDS_COUNT_TRANSLATION_0\n\t\tcase WordsByDictionaryIdSort.CountTranslation1:\n\t\t\treturn INDEX_WORDS_COUNT_TRANSLATION_1\n\t\tcase WordsByDictionaryIdSort.ModifiedDate0:\n\t\t\treturn INDEX_WORDS_MODIFIED_DATE_0\n\t\tcase WordsByDictionaryIdSort.ModifiedDate1:\n\t\t\treturn INDEX_WORDS_MODIFIED_DATE_1\n\t}\n\tthrow new Error(`[q0733u]`)\n}\n\nfunction makeKeyRange(dictionaryId: number, sort: WordsByDictionaryIdSort) {\n\tswitch (sort) {\n\t\tcase WordsByDictionaryIdSort.CountTranslation0:\n\t\tcase WordsByDictionaryIdSort.CountTranslation1:\n\t\t\treturn makeKeyRangeWordsCountTranslation({ dictionaryId })\n\t\tcase WordsByDictionaryIdSort.ModifiedDate0:\n\t\tcase WordsByDictionaryIdSort.ModifiedDate1:\n\t\t\treturn makeKeyRangeWordsModifiedDate({ dictionaryId })\n\t}\n\tthrow new Error(`[q0736h]`)\n}\n","export interface ReadItemsSource<T> {\n\tgetAll(key?: IDBKeyRange): Promise<T[]>\n\topenCursor(\n\t\trange?: IDBKeyRange,\n\t\tdirection?: IDBCursorDirection,\n\t): Promise<ReadItemsCursor<T> | null>\n}\n\nexport interface ReadItemsCursor<T> {\n\tvalue: T\n\tcontinue(): Promise<ReadItemsCursor<T> | null>\n\tadvance(n: number): Promise<ReadItemsCursor<T> | null>\n}\n\nexport interface ReadItemsParams<T> extends ReadItemsPagingParams<T> {\n\tsource: ReadItemsSource<T>\n}\n\nexport interface ReadItemsPagingParams<T> {\n\tpageSize?: number\n\tpage?: number\n\tfilter?: (item: T) => boolean\n\trange?: IDBKeyRange\n\tdirection?: IDBCursorDirection\n}\n\nexport async function readItems<T>({\n\tsource,\n\tpageSize = Infinity,\n\tpage = 0,\n\tfilter,\n\trange,\n\tdirection,\n}: ReadItemsParams<T>): Promise<T[]> {\n\tif (!filter && !isFinite(pageSize) && !direction) {\n\t\treturn source.getAll(range)\n\t}\n\tconst result: T[] = []\n\tlet cursor = await source.openCursor(range, direction)\n\tconst firstItemIndex = page * pageSize\n\tif (cursor) {\n\t\tif (firstItemIndex) {\n\t\t\tif (filter) {\n\t\t\t\tlet index = -1\n\t\t\t\twhile (cursor) {\n\t\t\t\t\tif (filter(cursor.value) && ++index === firstItemIndex) {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tcursor = await cursor.continue()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcursor = await cursor.advance(firstItemIndex)\n\t\t\t}\n\t\t}\n\t\twhile (cursor && result.length < pageSize) {\n\t\t\tif (!filter || filter(cursor.value)) {\n\t\t\t\tresult.push(cursor.value)\n\t\t\t}\n\t\t\tcursor = await cursor.continue()\n\t\t}\n\t}\n\treturn result\n}\n","import { MIN_MAX_RANGE } from '../model/constants'\nimport { TKeyLimits } from '../model/TKeyLimits'\n\nexport function makeKeyRangeWordsCountTranslation({\n\tdictionaryId,\n\tcountForSort = MIN_MAX_RANGE,\n\ttextForSort = MIN_MAX_RANGE,\n\tdescriptionForSort = MIN_MAX_RANGE,\n}: {\n\tdictionaryId: number\n\tcountForSort?: TKeyLimits<number>\n\ttextForSort?: TKeyLimits<string>\n\tdescriptionForSort?: TKeyLimits<string>\n}) {\n\treturn IDBKeyRange.bound(\n\t\t[dictionaryId, countForSort[0], textForSort[0], descriptionForSort[0]],\n\t\t[dictionaryId, countForSort[1], textForSort[1], descriptionForSort[1]],\n\t)\n}\n","import { useContext, useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { ShowMessageContext } from '../comp/ShowMessageContext'\nimport { TLoadable } from '../model/TLoadable'\nimport { DbWord, Word } from '../model/Word'\nimport {\n\treadWordsByDictionaryId,\n\tWordsByDictionaryIdSort,\n} from '../storage/readWordsByDictionaryId'\n\nexport function useWordsByDictionaryId({\n\tdictionaryId,\n\tpage,\n\tpageSize,\n\tsort,\n\tfilter,\n}: {\n\tdictionaryId: number | null\n\tpage?: number\n\tpageSize?: number\n\tsort?: WordsByDictionaryIdSort\n\tfilter?: (word: DbWord) => boolean\n}) {\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst [$words, set$words] = useState<\n\t\tTLoadable<{ current: readonly Word[] | undefined }>\n\t>(null)\n\tconst loadWords = useCallback(() => {\n\t\tif (dictionaryId == null) {\n\t\t\tset$words({ current: undefined })\n\t\t} else {\n\t\t\tlet aborted = false\n\t\t\tset$words(Date.now())\n\t\t\treadWordsByDictionaryId({\n\t\t\t\tdictionaryId,\n\t\t\t\tpage,\n\t\t\t\tpageSize,\n\t\t\t\tsort,\n\t\t\t\tfilter,\n\t\t\t})\n\t\t\t\t.then(words => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$words({ current: words })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tshowMessage(e)\n\t\t\t\t\tset$words(e + '')\n\t\t\t\t})\n\t\t\treturn () => {\n\t\t\t\taborted = true\n\t\t\t}\n\t\t}\n\t}, [dictionaryId, showMessage, page, pageSize, sort, filter])\n\treturn { $words, set$words, loadWords }\n}\n","import React from 'react'\nimport { ButtonRowComp } from './ButtonRowComp'\n\nexport interface PagingCompProps {\n\t_page: number\n\t_setPage: (n: number) => void\n\t_pageCount: number\n}\n\nexport function PagingComp({ _page, _pageCount, _setPage }: PagingCompProps) {\n\treturn (\n\t\t<ButtonRowComp>\n\t\t\t<button\n\t\t\t\ttype='button'\n\t\t\t\tclassName='does-not-expand'\n\t\t\t\tdisabled={_page === 0}\n\t\t\t\tonClick={() => {\n\t\t\t\t\t_setPage(_page - 1)\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t«\n\t\t\t</button>\n\t\t\t<div className='button-padding-y'>\n\t\t\t\t{_page + 1} / {_pageCount}\n\t\t\t</div>\n\t\t\t<button\n\t\t\t\ttype='button'\n\t\t\t\tclassName='does-not-expand'\n\t\t\t\tdisabled={_page === _pageCount - 1}\n\t\t\t\tonClick={() => {\n\t\t\t\t\t_setPage(_page + 1)\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t»\n\t\t\t</button>\n\t\t</ButtonRowComp>\n\t)\n}\n","import React, { useRef, useState } from 'react'\nimport { useRouteMatch } from 'react-router-dom'\nimport { useMemo } from 'use-memo-one'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { url } from '../function/url'\nimport { useDictionary } from '../hook/useDictionary'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { useWordCountByDictionaryId } from '../hook/useWordCountByDictionaryId'\nimport { useWordsByDictionaryId } from '../hook/useWordsByDictionaryId'\nimport { ExportedDictionary } from '../model/Dictionary'\nimport { isLoaded } from '../model/TLoadable'\nimport { ExportedWord } from '../model/Word'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryComp } from './DictionaryComp'\nimport { FocusRefComp } from './FocusRefComp'\nimport { FormRowComp } from './FormRowComp'\nimport { IconComp } from './IconComp'\nimport { LoadableComp } from './LoadableComp'\nimport { PagingComp } from './PagingComp'\nimport { UnknownDictionaryComp } from './UnknownDictionaryComp'\n\nexport interface ExportDictionaryPageProps {}\n\nexport function ExportDictionaryPage(props: ExportDictionaryPageProps) {\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string }>(\n\t\t'/dictionary/:dictionaryId/export/',\n\t)\n\tconst dictionaryId = routeMatch\n\t\t? parseInt(routeMatch.params.dictionaryId, 10)\n\t\t: null\n\tconst textAreaRef = useRef<HTMLTextAreaElement>(null)\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst { $wordCount, loadWordCount } = useWordCountByDictionaryId({\n\t\tdictionaryId,\n\t})\n\tconst [$page, set$page] = useState(0)\n\tconst pageSize = 100000\n\tconst { $words, loadWords } = useWordsByDictionaryId({\n\t\tdictionaryId,\n\t\tpage: $page,\n\t\tpageSize: pageSize,\n\t})\n\tconst pageCount = isLoaded($wordCount)\n\t\t? Math.max(1, Math.ceil($wordCount.current / pageSize))\n\t\t: 1\n\tconst $json = useMemo(() => {\n\t\tif (\n\t\t\t!isLoaded($dictionary) ||\n\t\t\t!isLoaded($words) ||\n\t\t\t$dictionary.current == null ||\n\t\t\t$words.current == null\n\t\t) {\n\t\t\treturn ''\n\t\t}\n\t\tconst d: ExportedDictionary = {\n\t\t\tversion: 1,\n\t\t\tname: $dictionary.current.name,\n\t\t\tlanguage0: $dictionary.current.language0,\n\t\t\tlanguage1: $dictionary.current.language1,\n\t\t\twords: $words.current.map(\n\t\t\t\t(w): ExportedWord => ({\n\t\t\t\t\tmodifiedDate: w.modifiedDate,\n\t\t\t\t\ttranslation0: w.translation0,\n\t\t\t\t\ttranslation1: w.translation1,\n\t\t\t\t}),\n\t\t\t),\n\t\t}\n\t\treturn JSON.stringify(d, undefined, '\\t')\n\t}, [$words, $dictionary])\n\tusePageTitle(\n\t\t!isLoaded($dictionary)\n\t\t\t? `Szótár kimentése`\n\t\t\t: `${\n\t\t\t\t\t$dictionary.current\n\t\t\t\t\t\t? dictionaryToString($dictionary.current)\n\t\t\t\t\t\t: `Ismeretlen`\n\t\t\t  } szótár kimentése`,\n\t)\n\tconst downloadLinkRef = useRef<HTMLAnchorElement>(null)\n\treturn (\n\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t{dictionary =>\n\t\t\t\tdictionary.current ? (\n\t\t\t\t\t<ContentRowComp>\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t<DictionaryComp _dictionary={dictionary.current} />{' '}\n\t\t\t\t\t\t\tszótár kimentése\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<LoadableComp _value={$wordCount} _load={loadWordCount}>\n\t\t\t\t\t\t\t{wordCount => (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<LoadableComp\n\t\t\t\t\t\t\t\t\t\t_value={$words}\n\t\t\t\t\t\t\t\t\t\t_load={loadWords}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{words => (\n\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tref={textAreaRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={$json}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treadOnly\n\t\t\t\t\t\t\t\t\t\t\t\t\t></textarea>\n\t\t\t\t\t\t\t\t\t\t\t\t</FormRowComp>\n\t\t\t\t\t\t\t\t\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextAreaRef.current\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextAreaRef.current.focus()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextAreaRef.current.setSelectionRange(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$json.length,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdocument.execCommand(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'copy',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconComp _icon='📋' />{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMásold\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trole='button'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tref={downloadLinkRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdownload={`${dictionaryToString(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdictionary.current!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpageCount > 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? `-${$page +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}.json`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thref={url`data:text/json;charset=utf-8,${$json}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconComp _icon='💾' />{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTárold el\n\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FocusRefComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_focusThis={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdownloadLinkRef\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</ButtonRowComp>\n\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t\t\t\t{pageCount > 1 && (\n\t\t\t\t\t\t\t\t\t\t<PagingComp\n\t\t\t\t\t\t\t\t\t\t\t_page={$page}\n\t\t\t\t\t\t\t\t\t\t\t_setPage={set$page}\n\t\t\t\t\t\t\t\t\t\t\t_pageCount={pageCount}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t</ContentRowComp>\n\t\t\t\t) : (\n\t\t\t\t\t<UnknownDictionaryComp />\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","export async function asyncFilter<T>(\n\tarr: T[],\n\tfn: (item: T, index: number, arr: T[]) => Promise<boolean>,\n): Promise<T[]> {\n\tconst flags = await Promise.all(\n\t\tarr.map((item, index, arr) => fn(item, index, arr)),\n\t)\n\treturn arr.filter((item, index) => flags[index])\n}\n","import { Dictionary } from '../model/Dictionary'\nimport { Word } from '../model/Word'\nimport { checkForConflictingDictionary } from '../storage/checkForConflictingDictionary'\nimport { checkForConflictingWord } from '../storage/checkForConflictingWord'\nimport { getDb, STORE_DICTIONARIES, STORE_WORDS } from '../storage/Db'\nimport { storeDictionary } from '../storage/storeDictionary'\nimport { storeWord } from '../storage/storeWord'\nimport { updateDictionaryCount } from '../storage/updateDictionaryCount'\nimport { asyncFilter } from './asyncFilter'\nimport { withInterface } from './withInterface'\n\nexport async function handleDictionaryImport({\n\tdictionary,\n\twords,\n}: {\n\tdictionary: Dictionary\n\twords: readonly Word[]\n}) {\n\tconst t = getDb().transaction(\n\t\t[STORE_DICTIONARIES, STORE_WORDS],\n\t\t'readwrite',\n\t)\n\tlet dictionaryId: number\n\tawait checkForConflictingDictionary({\n\t\tt,\n\t\tdictionary,\n\t})\n\tdictionaryId = await storeDictionary({\n\t\tt,\n\t\tdictionary,\n\t})\n\tconst wordsWithDictionaryId = words.map(word =>\n\t\twithInterface<Word>({\n\t\t\t...word,\n\t\t\tdictionaryId,\n\t\t}),\n\t)\n\tconst wordsNotConflicting = await asyncFilter(wordsWithDictionaryId, word =>\n\t\tcheckForConflictingWord({\n\t\t\tt,\n\t\t\tword,\n\t\t}).then(() => true, () => false),\n\t)\n\tfor (const word of wordsNotConflicting) {\n\t\tawait storeWord({\n\t\t\tt,\n\t\t\tword,\n\t\t})\n\t}\n\tawait updateDictionaryCount({ t, dictionaryId })\n\tawait t.done\n\treturn dictionaryId\n}\n","import { Dictionary, DictionaryFromAndroid } from '../model/Dictionary'\n\nexport function dictionaryFromAndroid(\n\tdictionaryFromAndroid: DictionaryFromAndroid,\n): Dictionary {\n\treturn {\n\t\tname: dictionaryFromAndroid.name,\n\t\tlanguage0: dictionaryFromAndroid.firstLanguageName,\n\t\tlanguage1: dictionaryFromAndroid.secondLanguageName,\n\t\tcount: 0,\n\t}\n}\n","import { Dictionary, ExportedDictionary } from '../model/Dictionary'\n\nexport function dictionaryFromExport(d: ExportedDictionary): Dictionary {\n\treturn {\n\t\tname: d.name,\n\t\tlanguage0: d.language0,\n\t\tlanguage1: d.language1,\n\t\tcount: 0,\n\t}\n}\n","import { isString } from 'util'\n\nexport function readJsonFromFile<T extends any>(file: File) {\n\treturn new Promise<T>((resolve, reject) => {\n\t\tconst reader = new FileReader()\n\t\treader.addEventListener('load', () => {\n\t\t\ttry {\n\t\t\t\tif (!isString(reader.result)) {\n\t\t\t\t\tthrow new Error(`[pydwop] ${reader.result}`)\n\t\t\t\t}\n\t\t\t\tresolve(JSON.parse(reader.result))\n\t\t\t} catch (e) {\n\t\t\t\treject(e)\n\t\t\t}\n\t\t})\n\t\treader.addEventListener('error', () => {\n\t\t\treject(reader.error)\n\t\t})\n\t\treader.readAsText(file)\n\t})\n}\n","import { DEFAULT_COUNT } from '../model/constants'\nimport { Word, WordFromAndroid } from '../model/Word'\nimport { dateToString } from './dateToString'\n\nexport function wordFromAndroid(wordFromAndroid: WordFromAndroid): Word {\n\treturn {\n\t\tdictionaryId: -1,\n\t\tmodifiedDate: dateToString(new Date()),\n\t\ttranslation0: {\n\t\t\ttext: wordFromAndroid.inFirstLanguage,\n\t\t\tdescription: wordFromAndroid.firstLanguageComment,\n\t\t\tcount: DEFAULT_COUNT,\n\t\t},\n\t\ttranslation1: {\n\t\t\ttext: wordFromAndroid.inSecondLanguage,\n\t\t\tdescription: wordFromAndroid.secondLanguageComment,\n\t\t\tcount: DEFAULT_COUNT,\n\t\t},\n\t}\n}\n","import { ExportedWord, Word } from '../model/Word'\n\nexport function wordFromExport(w: ExportedWord): Word {\n\treturn {\n\t\tdictionaryId: -1,\n\t\tmodifiedDate: w.modifiedDate,\n\t\ttranslation0: w.translation0,\n\t\ttranslation1: w.translation1,\n\t}\n}\n","import React, { useContext, useState } from 'react'\nimport { dictionaryFromAndroid } from '../function/dictionaryFromAndroid'\nimport { dictionaryFromExport } from '../function/dictionaryFromExport'\nimport { readJsonFromFile } from '../function/readJsonFromFile'\nimport { wordFromAndroid } from '../function/wordFromAndroid'\nimport { wordFromExport } from '../function/wordFromExport'\nimport { DictionaryFromAndroid, ExportedDictionary } from '../model/Dictionary'\nimport { ContentRowComp } from './ContentRowComp'\nimport { FormRowComp } from './FormRowComp'\nimport { ImportableDictionary } from './ImportFromFilePage'\nimport { LabelComp } from './LabelComp'\nimport { ShowMessageContext } from './ShowMessageContext'\n\nexport interface GetWordsCompProps {\n\t_setImportableDictionary: (v: ImportableDictionary) => void\n}\n\nexport function GetWordsComp({ _setImportableDictionary }: GetWordsCompProps) {\n\tconst [$json, set$json] = useState('')\n\tconst showMessage = useContext(ShowMessageContext)\n\treturn (\n\t\t<ContentRowComp>\n\t\t\t<FormRowComp>\n\t\t\t\t<LabelComp>Fájlból</LabelComp>\n\t\t\t\t<input\n\t\t\t\t\tautoFocus\n\t\t\t\t\ttype='file'\n\t\t\t\t\tonChange={async e => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst files = e.target.files\n\t\t\t\t\t\t\tif (!files) return\n\t\t\t\t\t\t\tconst file = files[0]\n\t\t\t\t\t\t\tif (!file) return\n\t\t\t\t\t\t\tconst dictionary = await readJsonFromFile<\n\t\t\t\t\t\t\t\tDictionaryFromAndroid | ExportedDictionary\n\t\t\t\t\t\t\t>(file)\n\t\t\t\t\t\t\tif ('version' in dictionary) {\n\t\t\t\t\t\t\t\t_setImportableDictionary({\n\t\t\t\t\t\t\t\t\tdictionary: dictionaryFromExport(\n\t\t\t\t\t\t\t\t\t\tdictionary,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\twords: dictionary.words.map(wordFromExport),\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t_setImportableDictionary({\n\t\t\t\t\t\t\t\t\tdictionary: dictionaryFromAndroid(\n\t\t\t\t\t\t\t\t\t\tdictionary,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\twords: dictionary.words.map(\n\t\t\t\t\t\t\t\t\t\twordFromAndroid,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormRowComp>\n\t\t\t<FormRowComp>\n\t\t\t\t<LabelComp>Vágólapról</LabelComp>\n\t\t\t\t<textarea\n\t\t\t\t\tplaceholder={`Illeszd be ide...`}\n\t\t\t\t\trows={1}\n\t\t\t\t\tcols={`Illeszd be ide...`.length}\n\t\t\t\t\tvalue={$json}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst json = e.currentTarget.value\n\t\t\t\t\t\t\tset$json(json)\n\t\t\t\t\t\t\tif (!json) return\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tvar dictionary:\n\t\t\t\t\t\t\t\t\t| DictionaryFromAndroid\n\t\t\t\t\t\t\t\t\t| ExportedDictionary = JSON.parse(json)\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tconsole.error(e)\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`[pyfjn5] Nem tudtam elolvasni amit beillesztettél: JSON hibát észleltem.`,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tif ('version' in dictionary) {\n\t\t\t\t\t\t\t\t\t_setImportableDictionary({\n\t\t\t\t\t\t\t\t\t\tdictionary: dictionaryFromExport(\n\t\t\t\t\t\t\t\t\t\t\tdictionary,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\twords: dictionary.words.map(\n\t\t\t\t\t\t\t\t\t\t\twordFromExport,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t_setImportableDictionary({\n\t\t\t\t\t\t\t\t\t\tdictionary: dictionaryFromAndroid(\n\t\t\t\t\t\t\t\t\t\t\tdictionary,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\twords: dictionary.words.map(\n\t\t\t\t\t\t\t\t\t\t\twordFromAndroid,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tconsole.error(e)\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`[pyfjt9] Nem tudtam elolvasni amit beillesztettél: hibás volt a formátuma.`,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tset$json('')\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t></textarea>\n\t\t\t</FormRowComp>\n\t\t</ContentRowComp>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { Dictionary, dictionaryFromDb } from '../model/Dictionary'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_DICTIONARIES_COUNT_NAME,\n\tSTORE_DICTIONARIES,\n} from './Db'\nimport { readItems, ReadItemsPagingParams } from './readItems'\n\nexport async function readDictionaries({\n\tt = getDb().transaction([STORE_DICTIONARIES], 'readonly'),\n\t...rest\n}: {\n\tt?: IDBPTransaction<Db>\n} & ReadItemsPagingParams<Dictionary>): Promise<Dictionary[]> {\n\tconst nameIndex = t\n\t\t.objectStore(STORE_DICTIONARIES)\n\t\t.index(INDEX_DICTIONARIES_COUNT_NAME)\n\tconst dictionaries = await readItems({\n\t\tsource: nameIndex,\n\t\t...rest,\n\t})\n\treturn dictionaries.map(dictionaryFromDb)\n}\n","import React from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded, TLoadable } from '../model/TLoadable'\nimport { readDictionaries } from '../storage/readDictionaries'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryPropsComp } from './DictionaryPropsComp'\nimport { FormRowComp } from './FormRowComp'\nimport { ImportableDictionary, ImportParams } from './ImportFromFilePage'\nimport { LabelComp } from './LabelComp'\nimport { LoadableComp } from './LoadableComp'\n\nexport interface SetImportParamsCompProps {\n\t_importableDictionary: ImportableDictionary\n\t_importParams: ImportParams\n\t_setImportParams: (\n\t\tcb: (v: ImportParams | null) => ImportParams | null,\n\t) => void\n\t_dictionaryId: number | null\n}\n\nexport function SetImportParamsComp({\n\t_importableDictionary,\n\t_importParams,\n\t_setImportParams,\n\t_dictionaryId,\n}: SetImportParamsCompProps) {\n\tconst [$dictionaries, set$dictionaries] = React.useState<\n\t\tTLoadable<Dictionary[]>\n\t>(null)\n\tconst loadDictionaries = useCallback(() => {\n\t\tlet isAborted = false\n\t\t;(async () => {\n\t\t\tset$dictionaries(Date.now())\n\t\t\tconst dictionaries = await readDictionaries({})\n\t\t\tif (isAborted) return\n\t\t\tset$dictionaries(dictionaries)\n\t\t\tif (_dictionaryId) {\n\t\t\t\tconst dictionaryById = dictionaries.find(\n\t\t\t\t\tdictionary => dictionary.id === _dictionaryId,\n\t\t\t\t)\n\t\t\t\tif (dictionaryById) {\n\t\t\t\t\t_setImportParams(importParams => ({\n\t\t\t\t\t\tdictionary: dictionaryById,\n\t\t\t\t\t\tswapLanguages: false,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t} else if (!_importableDictionary.dictionary.id) {\n\t\t\t\tconst dictionaryWithSameName = dictionaries.find(\n\t\t\t\t\tdictionary =>\n\t\t\t\t\t\tdictionary.name ===\n\t\t\t\t\t\t_importableDictionary.dictionary.name,\n\t\t\t\t)\n\t\t\t\tif (dictionaryWithSameName) {\n\t\t\t\t\t_setImportParams(importParams => ({\n\t\t\t\t\t\tdictionary: dictionaryWithSameName,\n\t\t\t\t\t\tswapLanguages: false,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}\n\t\t})()\n\t\treturn () => {\n\t\t\tisAborted = true\n\t\t}\n\t}, [_importableDictionary, _setImportParams, _dictionaryId])\n\tconst setDictionary = useCallback(\n\t\t(dictionary: Dictionary) => {\n\t\t\t_setImportParams(importParams => ({\n\t\t\t\t...importParams!,\n\t\t\t\tdictionary,\n\t\t\t}))\n\t\t},\n\t\t[_setImportParams],\n\t)\n\treturn (\n\t\t<LoadableComp _value={$dictionaries} _load={loadDictionaries}>\n\t\t\t{dictionaries => (\n\t\t\t\t<ContentRowComp>\n\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t<LabelComp>Egyesítsd ezzel a szótárral</LabelComp>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tvalue={_importParams.dictionary.id}\n\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\tconst id = e.currentTarget.value\n\t\t\t\t\t\t\t\t\t? parseInt(e.currentTarget.value, 10)\n\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\tconst dictionary = isLoaded($dictionaries)\n\t\t\t\t\t\t\t\t\t? $dictionaries.find(\n\t\t\t\t\t\t\t\t\t\t\tdictionary => dictionary.id === id,\n\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t\t_setImportParams(importParams => ({\n\t\t\t\t\t\t\t\t\t...importParams!,\n\t\t\t\t\t\t\t\t\tdictionary:\n\t\t\t\t\t\t\t\t\t\tdictionary ||\n\t\t\t\t\t\t\t\t\t\t_importableDictionary.dictionary,\n\t\t\t\t\t\t\t\t\tswapLanguages: false,\n\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value={''}>Új szótár</option>\n\t\t\t\t\t\t\t{dictionaries.map(dictionary => (\n\t\t\t\t\t\t\t\t<option\n\t\t\t\t\t\t\t\t\tkey={dictionary.id}\n\t\t\t\t\t\t\t\t\tvalue={dictionary.id}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{dictionaryToString(dictionary)}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</FormRowComp>\n\t\t\t\t\t<DictionaryPropsComp\n\t\t\t\t\t\t_dictionary={_importParams.dictionary}\n\t\t\t\t\t\t_setDictionary={setDictionary}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t<LabelComp>Nyelvsorrend</LabelComp>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tvalue={_importParams.swapLanguages + ''}\n\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\tconst swapLanguages = JSON.parse(e.target.value)\n\t\t\t\t\t\t\t\t_setImportParams(importParams => ({\n\t\t\t\t\t\t\t\t\t...importParams!,\n\t\t\t\t\t\t\t\t\tswapLanguages,\n\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value='false'>\n\t\t\t\t\t\t\t\t{_importableDictionary.dictionary.language0} →{' '}\n\t\t\t\t\t\t\t\t{_importParams.dictionary.language0} és{' '}\n\t\t\t\t\t\t\t\t{_importableDictionary.dictionary.language1} →{' '}\n\t\t\t\t\t\t\t\t{_importParams.dictionary.language1}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t<option value='true'>\n\t\t\t\t\t\t\t\t{_importableDictionary.dictionary.language0} →{' '}\n\t\t\t\t\t\t\t\t{_importParams.dictionary.language1} és{' '}\n\t\t\t\t\t\t\t\t{_importableDictionary.dictionary.language1} →{' '}\n\t\t\t\t\t\t\t\t{_importParams.dictionary.language0}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</FormRowComp>\n\t\t\t\t</ContentRowComp>\n\t\t\t)}\n\t\t</LoadableComp>\n\t)\n}\n","import React, { useContext, useState } from 'react'\nimport { useHistory, useRouteMatch } from 'react-router'\nimport { useCallback } from 'use-memo-one'\nimport { handleDictionaryImport } from '../function/handleDictionaryImport'\nimport { url } from '../function/url'\nimport { useDictionaryValidationErrors } from '../hook/useDictionaryValidationErrors'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { SUCCESS_CHARACTER } from '../model/constants'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { ErrorsComp } from './ErrorsComp'\nimport { GetWordsComp } from './GetWordsComp'\nimport { IconComp } from './IconComp'\nimport { SetImportParamsComp } from './SetImportParamsComp'\nimport { ShieldContext } from './ShieldContext'\nimport { ShowMessageContext } from './ShowMessageContext'\n\nexport interface ImportableDictionary {\n\tdictionary: Dictionary\n\twords: readonly Word[]\n}\n\nexport interface ImportParams {\n\tdictionary: Dictionary\n\tswapLanguages: boolean\n}\n\nexport function ImportFromFilePage() {\n\tusePageTitle(`Tölts be szavakat`)\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string | undefined }>(\n\t\t`/dictionary/:dictionaryId/import/`,\n\t)\n\tconst dictionaryId =\n\t\trouteMatch && parseInt(routeMatch.params.dictionaryId + '', 10)\n\tconst history = useHistory()\n\tconst [\n\t\t$importableDictionary,\n\t\tset$importableDictionary,\n\t] = useState<ImportableDictionary | null>(null)\n\tconst [$importParams, set$importParams] = useState<ImportParams | null>(\n\t\tnull,\n\t)\n\tconst dictionaryValidationErrors = useDictionaryValidationErrors(\n\t\t$importParams && $importParams.dictionary,\n\t)\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst setImportableDictionary = useCallback((v: ImportableDictionary) => {\n\t\tset$importableDictionary(v)\n\t\tset$importParams({\n\t\t\tdictionary: v.dictionary,\n\t\t\tswapLanguages: false,\n\t\t})\n\t}, [])\n\tconst { showShield, hideShield } = useContext(ShieldContext)\n\treturn (\n\t\t<ContentRowComp>\n\t\t\t<h1>Tölts be szavakat</h1>\n\t\t\t<form\n\t\t\t\tonSubmit={async e => {\n\t\t\t\t\te.preventDefault()\n\t\t\t\t\tshowShield('q0t0z5')\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!$importableDictionary || !$importParams) {\n\t\t\t\t\t\t\tthrow new Error(`[pydz1i]`)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst words = $importParams.swapLanguages\n\t\t\t\t\t\t\t? $importableDictionary.words.map(word => ({\n\t\t\t\t\t\t\t\t\t...word,\n\t\t\t\t\t\t\t\t\ttranslation0: word.translation1,\n\t\t\t\t\t\t\t\t\ttranslation1: word.translation0,\n\t\t\t\t\t\t\t  }))\n\t\t\t\t\t\t\t: $importableDictionary.words\n\t\t\t\t\t\tconst storedDictionaryId = await handleDictionaryImport(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdictionary: $importParams.dictionary,\n\t\t\t\t\t\t\t\twords,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t)\n\t\t\t\t\t\tif (storedDictionaryId === dictionaryId) {\n\t\t\t\t\t\t\thistory.goBack()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thistory.replace(\n\t\t\t\t\t\t\t\turl`/dictionary/${storedDictionaryId}/`,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t}\n\t\t\t\t\thideShield('q0t0z5')\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<ContentRowComp>\n\t\t\t\t\t{!$importableDictionary && (\n\t\t\t\t\t\t<GetWordsComp\n\t\t\t\t\t\t\t_setImportableDictionary={setImportableDictionary}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t{$importableDictionary && $importParams && (\n\t\t\t\t\t\t<SetImportParamsComp\n\t\t\t\t\t\t\t_importableDictionary={$importableDictionary}\n\t\t\t\t\t\t\t_importParams={$importParams}\n\t\t\t\t\t\t\t_setImportParams={set$importParams}\n\t\t\t\t\t\t\t_dictionaryId={dictionaryId}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t<ErrorsComp _errors={dictionaryValidationErrors} />\n\t\t\t\t\t{$importableDictionary && (\n\t\t\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t\t!isLoaded(dictionaryValidationErrors) ||\n\t\t\t\t\t\t\t\t\tdictionaryValidationErrors.length > 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<IconComp _icon={SUCCESS_CHARACTER} /> Tárold el\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</ButtonRowComp>\n\t\t\t\t\t)}\n\t\t\t\t</ContentRowComp>\n\t\t\t</form>\n\t\t</ContentRowComp>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { withInterface } from '../function/withInterface'\nimport { Question } from '../model/Question'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_COUNT_0,\n\tINDEX_WORDS_COUNT_1,\n\tSTORE_WORDS,\n} from './Db'\nimport { makeKeyRangeWordsCount } from './makeKeyRangeWordsCount'\n\nexport async function readQuestions({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tdictionaryId,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n}): Promise<Question[]> {\n\tconst wordsStore = t.objectStore(STORE_WORDS)\n\tconst translation0Index = wordsStore.index(INDEX_WORDS_COUNT_0)\n\tconst translation1Index = wordsStore.index(INDEX_WORDS_COUNT_1)\n\treturn [\n\t\t...(await translation0Index.getAllKeys(\n\t\t\tmakeKeyRangeWordsCount({\n\t\t\t\tdictionaryId,\n\t\t\t\tcountForSort: [0, 0],\n\t\t\t}),\n\t\t)).map(wordId =>\n\t\t\twithInterface<Question>({\n\t\t\t\twordId,\n\t\t\t\ttranslationId: 0,\n\t\t\t}),\n\t\t),\n\t\t...(await translation1Index.getAllKeys(\n\t\t\tmakeKeyRangeWordsCount({\n\t\t\t\tdictionaryId,\n\t\t\t\tcountForSort: [0, 0],\n\t\t\t}),\n\t\t)).map(wordId =>\n\t\t\twithInterface<Question>({\n\t\t\t\twordId,\n\t\t\t\ttranslationId: 1,\n\t\t\t}),\n\t\t),\n\t]\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { avoidDuplicates } from '../function/avoidDuplicates'\nimport { shuffle } from '../function/shuffle'\nimport { Question } from '../model/Question'\nimport { TLoadable } from '../model/TLoadable'\nimport { readQuestions } from '../storage/readQuestions'\n\nexport function useQuestions({\n\tdictionaryId,\n\twordIdNotFirst,\n}: {\n\tdictionaryId: number | null\n\twordIdNotFirst: React.MutableRefObject<number | null>\n}) {\n\tconst [$questions, set$questions] = useState<\n\t\tTLoadable<{ current: readonly Question[] | undefined }>\n\t>(null)\n\tconst loadQuestions = useCallback(() => {\n\t\tlet aborted = false\n\t\tif (dictionaryId == null) {\n\t\t\tset$questions({ current: undefined })\n\t\t} else {\n\t\t\tset$questions(Date.now())\n\t\t\treadQuestions({\n\t\t\t\tdictionaryId,\n\t\t\t})\n\t\t\t\t.then(questions => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tquestions = shuffle(questions)\n\t\t\t\t\tquestions = avoidDuplicates(\n\t\t\t\t\t\tquestions,\n\t\t\t\t\t\t(a, b) => a.wordId === b.wordId,\n\t\t\t\t\t)\n\t\t\t\t\tif (\n\t\t\t\t\t\twordIdNotFirst.current != null &&\n\t\t\t\t\t\tquestions[0] &&\n\t\t\t\t\t\tquestions[0].wordId === wordIdNotFirst.current\n\t\t\t\t\t) {\n\t\t\t\t\t\tquestions.push(questions.shift()!)\n\t\t\t\t\t}\n\t\t\t\t\tset$questions({ current: questions })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tset$questions(e + '')\n\t\t\t\t})\n\t\t}\n\t\treturn () => {\n\t\t\taborted = true\n\t\t}\n\t}, [dictionaryId, wordIdNotFirst])\n\treturn { $questions, set$questions, loadQuestions }\n}\n","export function avoidDuplicates<T>(\n\ta: readonly T[],\n\tequals: (a: T, b: T) => boolean,\n): T[] {\n\tconst result = a.slice()\n\tlet count = result.length\n\tlet lastItem: T | undefined = undefined\n\tfor (let i = count - 1; i >= 0; i--) {\n\t\tconst item = result[i]\n\t\tif (lastItem != null) {\n\t\t\tif (equals(lastItem, item)) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tresult.splice(i - 1, 0, ...result.splice(i, 1))\n\t\t\t\t\ti--\n\t\t\t\t} else {\n\t\t\t\t\tresult.splice(i + 2, 0, ...result.splice(i, 1))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlastItem = item\n\t}\n\tif (result.length > 3 && equals(result[0], result[count - 1])) {\n\t\tresult.splice(1, 0, ...result.splice(0, 1))\n\t}\n\treturn result\n}\n","export function shuffle<T>(a: readonly T[]): T[] {\n\tconst result: T[] = []\n\tfor (const item of a) {\n\t\tconst newIndex = Math.floor(Math.random() * (result.length + 1))\n\t\tresult.splice(newIndex, 0, item)\n\t}\n\treturn result\n}\n","import React, { FormEvent, useContext, useRef, useState } from 'react'\nimport { sanitizeString } from '../function/sanitizeString'\nimport { Dictionary } from '../model/Dictionary'\nimport { Word } from '../model/Word'\nimport { getDb, STORE_DICTIONARIES, STORE_WORDS } from '../storage/Db'\nimport { storeWord } from '../storage/storeWord'\nimport { updateDictionaryCount } from '../storage/updateDictionaryCount'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { FormRowComp } from './FormRowComp'\nimport { LabelComp } from './LabelComp'\nimport { ShieldContext } from './ShieldContext'\n\nexport interface LearnCompProps {\n\t_dictionary: Dictionary\n\t_word: Word\n\t_translationId: 0 | 1\n\t_next: (p: { success: boolean }) => void\n}\n\nexport function LearnComp({\n\t_dictionary,\n\t_word,\n\t_translationId,\n\t_next,\n}: LearnCompProps) {\n\tconst inputRef = useRef<HTMLInputElement>(null)\n\tconst questionLanguage =\n\t\t_translationId === 0 ? _dictionary.language0 : _dictionary.language1\n\tconst answerLanguage =\n\t\t_translationId === 0 ? _dictionary.language1 : _dictionary.language0\n\tconst question =\n\t\t_translationId === 0 ? _word.translation0 : _word.translation1\n\tconst correctAnswer = (_translationId === 0\n\t\t? _word.translation1\n\t\t: _word.translation0\n\t).text\n\tconst [$answer, set$answer] = useState('')\n\tconst isAnswerCorrect = sanitizeString($answer) === correctAnswer\n\tconst [$answerShown, set$answerShown] = useState(false)\n\tconst { showShield, hideShield } = useContext(ShieldContext)\n\n\tasync function onSubmit(e: FormEvent) {\n\t\te.preventDefault()\n\t\tconst newCount = Math.min(3, question.count + ($answerShown ? 1 : -1))\n\t\tshowShield('q0t1q5')\n\t\tconst t = getDb().transaction(\n\t\t\t[STORE_DICTIONARIES, STORE_WORDS],\n\t\t\t'readwrite',\n\t\t)\n\t\tawait storeWord({\n\t\t\tt,\n\t\t\tword: {\n\t\t\t\t..._word,\n\t\t\t\t...(_translationId === 0\n\t\t\t\t\t? {\n\t\t\t\t\t\t\ttranslation0: {\n\t\t\t\t\t\t\t\t..._word.translation0,\n\t\t\t\t\t\t\t\tcount: newCount,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  }\n\t\t\t\t\t: {\n\t\t\t\t\t\t\ttranslation1: {\n\t\t\t\t\t\t\t\t..._word.translation1,\n\t\t\t\t\t\t\t\tcount: newCount,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  }),\n\t\t\t},\n\t\t})\n\t\tawait updateDictionaryCount({ t, dictionaryId: _word.dictionaryId })\n\t\thideShield('q0t1q5')\n\t\tset$answerShown(false)\n\t\tset$answer('')\n\t\t_next({ success: newCount === 0 })\n\t}\n\n\tfunction onShowAnswer() {\n\t\tif (correctAnswer == null) return\n\t\tset$answerShown(true)\n\t\tset$answer(correctAnswer)\n\t\tinputRef.current!.focus()\n\t}\n\n\treturn (\n\t\t<form onSubmit={onSubmit}>\n\t\t\t<ContentRowComp>\n\t\t\t\t<div>\n\t\t\t\t\t{questionLanguage}: {question.text}\n\t\t\t\t</div>\n\t\t\t\t{question.description && (\n\t\t\t\t\t<div>Megjegyzés: {question.description}</div>\n\t\t\t\t)}\n\t\t\t\t<FormRowComp>\n\t\t\t\t\t<LabelComp _required>{answerLanguage}</LabelComp>\n\t\t\t\t\t<input\n\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tvalue={$answer}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tset$answer(e.target.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</FormRowComp>\n\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t<button disabled={!isAnswerCorrect}>Rendben</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\tonClick={onShowAnswer}\n\t\t\t\t\t\tdisabled={$answerShown}\n\t\t\t\t\t>\n\t\t\t\t\t\tMutasd a választ\n\t\t\t\t\t</button>\n\t\t\t\t</ButtonRowComp>\n\t\t\t</ContentRowComp>\n\t\t</form>\n\t)\n}\n","import React from 'react'\nimport styles from './ProgressComp.module.css'\n\nexport interface ProgressCompProps {\n\t_progress: number\n}\n\nexport function ProgressComp({ _progress }: ProgressCompProps) {\n\treturn (\n\t\t<div className={styles.outer}>\n\t\t\t<div\n\t\t\t\tclassName={styles.inner}\n\t\t\t\tstyle={{ flexBasis: `${_progress * 100}%` }}\n\t\t\t/>\n\t\t</div>\n\t)\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Redirect, useRouteMatch } from 'react-router-dom'\nimport { useCallback } from 'use-memo-one'\nimport { useDictionary } from '../hook/useDictionary'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { useQuestions } from '../hook/useQuestions'\nimport { useWord } from '../hook/useWord'\nimport { isLoaded } from '../model/TLoadable'\nimport { ContentRowComp } from './ContentRowComp'\nimport { FormRowComp } from './FormRowComp'\nimport { LearnComp } from './LearnComp'\nimport { LoadableComp } from './LoadableComp'\nimport { ProgressComp } from './ProgressComp'\nimport { UnknownDictionaryComp } from './UnknownDictionaryComp'\n\nexport interface LearnPageProps {}\n\nexport function LearnPage(props: LearnPageProps) {\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string }>(\n\t\t'/dictionary/:dictionaryId/learn/',\n\t)\n\tconst dictionaryId =\n\t\trouteMatch && parseInt(routeMatch.params.dictionaryId, 10)\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst lastWordId = useRef<number | null>(null)\n\tconst { $questions, set$questions, loadQuestions } = useQuestions({\n\t\tdictionaryId,\n\t\twordIdNotFirst: lastWordId,\n\t})\n\tconst [$questionsCount, set$questionsCount] = useState(0)\n\tconst [$questionsLearnedCount, set$questionsLearnedCount] = useState(0)\n\tconst progress =\n\t\t$questionsCount > 0\n\t\t\t? $questionsLearnedCount / Math.max(1, $questionsCount - 1)\n\t\t\t: 0\n\tuseEffect(() => {\n\t\tif (\n\t\t\tisLoaded($questions) &&\n\t\t\t$questions.current &&\n\t\t\t$questions.current.length > $questionsCount\n\t\t) {\n\t\t\tset$questionsCount($questions.current.length)\n\t\t}\n\t}, [$questions, $questionsCount])\n\tconst [$questionIndex, set$questionIndex] = useState(0)\n\tconst { $word, set$word, loadWord } = useWord(\n\t\tisLoaded($questions) &&\n\t\t\t$questions.current &&\n\t\t\t$questions.current[$questionIndex]\n\t\t\t? $questions.current[$questionIndex].wordId\n\t\t\t: null,\n\t)\n\tconst translationId =\n\t\tisLoaded($questions) &&\n\t\t$questions.current &&\n\t\t$questions.current[$questionIndex]\n\t\t\t? $questions.current[$questionIndex].translationId\n\t\t\t: 0\n\n\tconst word = isLoaded($word) && $word.current ? $word.current : undefined\n\tif (word) {\n\t\tlastWordId.current = word.id!\n\t}\n\n\tconst next = useCallback(\n\t\t({ success }: { success: boolean }) => {\n\t\t\tif (!isLoaded($questions) || $questions.current == null)\n\t\t\t\tthrow new Error(`[q0lv6a]`)\n\t\t\tif (success) {\n\t\t\t\tset$questionsLearnedCount($questionsLearnedCount + 1)\n\t\t\t}\n\t\t\tif ($questionIndex + 1 === $questions.current.length) {\n\t\t\t\tset$questionIndex(0)\n\t\t\t\tset$questions(null)\n\t\t\t} else {\n\t\t\t\tset$questionIndex($questionIndex + 1)\n\t\t\t\tset$word(null) // Force refresh word even if it has the same ID\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\t$questions,\n\t\t\t$questionIndex,\n\t\t\tset$questionIndex,\n\t\t\tset$word,\n\t\t\t$questionsLearnedCount,\n\t\t\tset$questions,\n\t\t],\n\t)\n\n\tusePageTitle(`Tanulás`)\n\treturn (\n\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t{dictionary =>\n\t\t\t\tdictionary.current == null ? (\n\t\t\t\t\t<UnknownDictionaryComp />\n\t\t\t\t) : (\n\t\t\t\t\t<ContentRowComp>\n\t\t\t\t\t\t<h1>Tanulás</h1>\n\t\t\t\t\t\t<LoadableComp _value={$questions} _load={loadQuestions}>\n\t\t\t\t\t\t\t{questions =>\n\t\t\t\t\t\t\t\tquestions.current == null ||\n\t\t\t\t\t\t\t\tquestions.current.length === 0 ? (\n\t\t\t\t\t\t\t\t\t<Redirect to={`../`} />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t\t\t\t\t\t<ProgressComp\n\t\t\t\t\t\t\t\t\t\t\t\t_progress={progress}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</FormRowComp>\n\t\t\t\t\t\t\t\t\t\t<LoadableComp\n\t\t\t\t\t\t\t\t\t\t\t_value={$word}\n\t\t\t\t\t\t\t\t\t\t\t_load={loadWord}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{word =>\n\t\t\t\t\t\t\t\t\t\t\t\tword.current == null ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<LearnComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_dictionary={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdictionary.current!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_word={word.current}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_translationId={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttranslationId\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_next={next}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t</ContentRowComp>\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","import React from 'react'\nimport { CLOSE_CHARACTER } from '../model/constants'\nimport styles from './MessagesComp.module.css'\n\nexport interface MessagesCompProps {\n\t_messages: readonly string[]\n\t_removeMessageByIndex: (index: number) => void\n}\n\nexport function MessagesComp({\n\t_messages,\n\t_removeMessageByIndex,\n}: MessagesCompProps) {\n\treturn (\n\t\t<>\n\t\t\t{_messages.map((message, index) => (\n\t\t\t\t<div key={index} className={styles.message}>\n\t\t\t\t\t<div className={styles.content}>{message}</div>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\tclassName={styles.button}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t_removeMessageByIndex(index)\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{CLOSE_CHARACTER}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</>\n\t)\n}\n","import React from 'react'\nimport { usePageTitle } from '../hook/usePageTitle'\n\nexport function NotFoundPage() {\n\tusePageTitle(`Ez meg hol van?`)\n\treturn (\n\t\t<>\n\t\t\t<h1>Ez meg hol van?</h1>\n\t\t\t<p>Há’ nem t’om hová menté’, mer’ ez nem az.</p>\n\t\t</>\n\t)\n}\n","import React, { PropsWithChildren } from 'react'\nimport ReactFocusLock from 'react-focus-lock'\nimport { PROGRESS_CHARACTER } from '../model/constants'\nimport styles from './ShieldComp.module.css'\n\nexport interface ShieldCompProps {}\n\nexport function ShieldComp(props: PropsWithChildren<ShieldCompProps>) {\n\treturn (\n\t\t<ReactFocusLock returnFocus>\n\t\t\t<div className={styles.shield} tabIndex={0}>\n\t\t\t\t{PROGRESS_CHARACTER}\n\t\t\t</div>\n\t\t</ReactFocusLock>\n\t)\n}\n","import React from 'react'\nimport styles from './SpacerComp.module.css'\n\nexport interface SpacerCompProps {}\n\nexport function SpacerComp(props: SpacerCompProps) {\n\treturn <div className={styles.spacer} />\n}\n","import escapeStringRegexp from 'escape-string-regexp'\n\nexport function queryToRegExp(q: string) {\n\treturn new RegExp(escapeStringRegexp(q.trim()).replace(/\\s+/g, `.*`), `i`)\n}\n","import { isLoaded, TLoadable } from '../model/TLoadable'\n\nexport function selectPageCount(o: {\n\tpageSize: number\n\titemCount: TLoadable<{\n\t\tcount: number\n\t}>\n}) {\n\treturn isLoaded(o.itemCount)\n\t\t? Math.max(1, Math.ceil(o.itemCount.count / o.pageSize))\n\t\t: 1\n}\n","import { IDBPTransaction } from 'idb'\nimport { DbDictionary } from '../model/Dictionary'\nimport { countItems } from './countItems'\nimport { Db, getDb, STORE_DICTIONARIES } from './Db'\n\nexport async function countDictionaries({\n\tt = getDb().transaction([STORE_DICTIONARIES], 'readonly'),\n\tfilter,\n}: {\n\tt?: IDBPTransaction<Db>\n\tfilter?: (v: DbDictionary) => boolean\n}) {\n\tconst dictionariesStore = t.objectStore(STORE_DICTIONARIES)\n\treturn countItems({\n\t\tsource: dictionariesStore,\n\t\tfilter,\n\t})\n}\n","import React, { useContext, useRef, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useCallback } from 'use-memo-one'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { queryToRegExp } from '../function/queryToRegExp'\nimport { url } from '../function/url'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { CLOSE_CHARACTER } from '../model/constants'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded, TLoadable } from '../model/TLoadable'\nimport { selectPageCount } from '../selector/selectPageCount'\nimport { countDictionaries } from '../storage/countDictionaries'\nimport { getDb, STORE_DICTIONARIES } from '../storage/Db'\nimport { readDictionaries } from '../storage/readDictionaries'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryComp } from './DictionaryComp'\nimport { FocusRefComp } from './FocusRefComp'\nimport { FormRowComp } from './FormRowComp'\nimport { IconComp } from './IconComp'\nimport { LoadableComp } from './LoadableComp'\nimport { PagingComp } from './PagingComp'\nimport { ShowMessageContext } from './ShowMessageContext'\n\nexport interface StartPageProps {}\n\nexport function StartPage(props: StartPageProps) {\n\tusePageTitle(`Szia!`)\n\tconst [$pageSize] = useState(10)\n\tconst [$query, set$query] = useState('')\n\tconst [$totalDictionaryCount, set$totalDictionaryCount] = useState<\n\t\tTLoadable<{ count: number }>\n\t>(null)\n\tconst [$dictionaryCount, set$dictionaryCount] = useState<\n\t\tTLoadable<{ count: number }>\n\t>(null)\n\tconst [$page, set$page] = useState(0)\n\tconst [$dictionariesOnPage, set$dictionariesOnPage] = useState<\n\t\tTLoadable<Dictionary[]>\n\t>(null)\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst loadDictionariesOnPage = useCallback(() => {\n\t\tlet isAborted = false\n\t\t// set$dictionaryCount(Date.now())\n\t\t// set$totalDictionaryCount(Date.now())\n\t\tset$dictionariesOnPage(Date.now())\n\t\t;(async () => {\n\t\t\ttry {\n\t\t\t\tconst t = getDb().transaction([STORE_DICTIONARIES], 'readonly')\n\t\t\t\tconst filter = $query\n\t\t\t\t\t? (() => {\n\t\t\t\t\t\t\tconst queryRe = queryToRegExp($query)\n\t\t\t\t\t\t\treturn (d: Dictionary) =>\n\t\t\t\t\t\t\t\tqueryRe.test(dictionaryToString(d))\n\t\t\t\t\t  })()\n\t\t\t\t\t: undefined\n\t\t\t\tconst [totalCount, count, dictionaries] = await Promise.all([\n\t\t\t\t\tcountDictionaries({ t }),\n\t\t\t\t\tcountDictionaries({ t, filter }),\n\t\t\t\t\treadDictionaries({\n\t\t\t\t\t\tt,\n\t\t\t\t\t\tpageSize: $pageSize,\n\t\t\t\t\t\tpage: $page,\n\t\t\t\t\t\tfilter,\n\t\t\t\t\t}),\n\t\t\t\t])\n\t\t\t\tif (isAborted) return\n\t\t\t\tset$page(\n\t\t\t\t\tMath.min(\n\t\t\t\t\t\t$page,\n\t\t\t\t\t\tselectPageCount({\n\t\t\t\t\t\t\tpageSize: $pageSize,\n\t\t\t\t\t\t\titemCount: count,\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\tset$dictionaryCount({ count })\n\t\t\t\tset$totalDictionaryCount({ count: totalCount })\n\t\t\t\tset$dictionariesOnPage(dictionaries)\n\t\t\t} catch (e) {\n\t\t\t\tif (isAborted) return\n\t\t\t\tshowMessage(e)\n\t\t\t\tset$dictionaryCount(e + '')\n\t\t\t\tset$totalDictionaryCount(e + '')\n\t\t\t\tset$dictionariesOnPage(e + '')\n\t\t\t}\n\t\t})()\n\t\treturn () => {\n\t\t\tisAborted = true\n\t\t}\n\t}, [$query, $page, $pageSize, showMessage])\n\tconst pageCount = selectPageCount({\n\t\tpageSize: $pageSize,\n\t\titemCount: $dictionaryCount,\n\t})\n\tconst makeADictionaryLinkRef = useRef<HTMLAnchorElement>(null)\n\treturn (\n\t\t<ContentRowComp>\n\t\t\t<h1>Szia!</h1>\n\t\t\t<p>Mag vagyok, egy szógyakorló program. Magolj velem!</p>\n\t\t\t{isLoaded($totalDictionaryCount) &&\n\t\t\t\t$totalDictionaryCount.count > 0 && (\n\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\tplaceholder='Szűrd a szótárakat'\n\t\t\t\t\t\t\tvalue={$query}\n\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\tset$query(e.target.value)\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{$query && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tclassName='does-not-expand'\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tset$query('')\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{CLOSE_CHARACTER}\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</FormRowComp>\n\t\t\t\t)}\n\t\t\t<LoadableComp\n\t\t\t\t_value={$dictionariesOnPage}\n\t\t\t\t_load={loadDictionariesOnPage}\n\t\t\t>\n\t\t\t\t{dictionaries => (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{dictionaries.length > 0 ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>Válassz egy szótárat:</p>\n\t\t\t\t\t\t\t\t<ol start={$page * $pageSize + 1}>\n\t\t\t\t\t\t\t\t\t{dictionaries.map(dictionary => (\n\t\t\t\t\t\t\t\t\t\t<li key={dictionary.id}>\n\t\t\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\t\t\tto={url`/dictionary/${dictionary.id!}/`}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<DictionaryComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t_dictionary={dictionary}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ol>\n\t\t\t\t\t\t\t\t{pageCount > 1 && (\n\t\t\t\t\t\t\t\t\t<PagingComp\n\t\t\t\t\t\t\t\t\t\t_page={$page}\n\t\t\t\t\t\t\t\t\t\t_setPage={set$page}\n\t\t\t\t\t\t\t\t\t\t_pageCount={pageCount}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\tisLoaded($totalDictionaryCount) &&\n\t\t\t\t\t\t\t$totalDictionaryCount.count > 0 && (\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t<em>\n\t\t\t\t\t\t\t\t\t\t<IconComp _icon='🙈' /> Nem találtam egy\n\t\t\t\t\t\t\t\t\t\tszótárat sem.\n\t\t\t\t\t\t\t\t\t</em>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{isLoaded($totalDictionaryCount) &&\n\t\t\t\t\t\t$totalDictionaryCount.count === 0 ? (\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tElőször{' '}\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto='/dictionary/'\n\t\t\t\t\t\t\t\t\tinnerRef={makeADictionaryLinkRef}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<IconComp _icon='✨' /> készíts egy új\n\t\t\t\t\t\t\t\t\tszótárat\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t<FocusRefComp\n\t\t\t\t\t\t\t\t\t_focusThis={makeADictionaryLinkRef}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t, vagy{' '}\n\t\t\t\t\t\t\t\t<Link to='/import/'>\n\t\t\t\t\t\t\t\t\t<IconComp _icon='📂' /> tölts be egy\n\t\t\t\t\t\t\t\t\tszótárat!\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t\t\t\t<Link to='/dictionary/' role='button'>\n\t\t\t\t\t\t\t\t\t<IconComp _icon='✨' /> Készíts új szótárat\n\t\t\t\t\t\t\t\t</Link>{' '}\n\t\t\t\t\t\t\t\t<Link to='/import/' role='button'>\n\t\t\t\t\t\t\t\t\t<IconComp _icon='📂' /> Tölts be egy\n\t\t\t\t\t\t\t\t\tszótárat\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</ButtonRowComp>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</LoadableComp>\n\t\t</ContentRowComp>\n\t)\n}\n","import React, { useContext } from 'react'\nimport { useMemo } from 'use-memo-one'\nimport {\n\tCHECKBOX_CHARACTER,\n\tERROR_CHARACTER,\n\tNO_QUESTIONS_CHARACTER,\n\tQUESTIONS_CHARACTER,\n} from '../model/constants'\nimport { TSelection } from '../model/TSelection'\nimport { deleteWords } from '../storage/deleteWords'\nimport { toggleWords } from '../storage/toggleWords'\nimport { ShieldContext } from './ShieldContext'\n\nenum BulkActions {\n\tEnable = 'Enable',\n\tDisable = 'Disable',\n\tDeselect = 'Deselect',\n\tDelete = 'Delete',\n}\n\nexport interface WordsMenuCompProps {\n\t_dictionaryId: number\n\t_selectedWordIds: TSelection\n\t_setSelectedWordIds: (v: TSelection) => void\n\t_onDone: () => void\n}\n\nexport function WordsMenuComp({\n\t_selectedWordIds,\n\t_setSelectedWordIds,\n\t_dictionaryId,\n\t_onDone,\n}: WordsMenuCompProps) {\n\tconst selectedWordsCount = useMemo(\n\t\t() => Object.keys(_selectedWordIds).length,\n\t\t[_selectedWordIds],\n\t)\n\tconst { showShield, hideShield } = useContext(ShieldContext)\n\treturn (\n\t\t<select\n\t\t\tvalue=''\n\t\t\tonChange={async e => {\n\t\t\t\tswitch (e.target.value) {\n\t\t\t\t\tcase BulkActions.Deselect:\n\t\t\t\t\t\t_setSelectedWordIds({})\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase BulkActions.Disable:\n\t\t\t\t\t\tshowShield('q0t1hz')\n\t\t\t\t\t\tawait toggleWords({\n\t\t\t\t\t\t\tdictionaryId: _dictionaryId,\n\t\t\t\t\t\t\twordIds: Object.keys(_selectedWordIds).map(_ => +_),\n\t\t\t\t\t\t\tenable: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t\thideShield('q0t1hz')\n\t\t\t\t\t\t_setSelectedWordIds({})\n\t\t\t\t\t\t_onDone()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase BulkActions.Enable:\n\t\t\t\t\t\tshowShield('q0t1iw')\n\t\t\t\t\t\tawait toggleWords({\n\t\t\t\t\t\t\tdictionaryId: _dictionaryId,\n\t\t\t\t\t\t\twordIds: Object.keys(_selectedWordIds).map(_ => +_),\n\t\t\t\t\t\t\tenable: true,\n\t\t\t\t\t\t})\n\t\t\t\t\t\thideShield('q0t1iw')\n\t\t\t\t\t\t_setSelectedWordIds({})\n\t\t\t\t\t\t_onDone()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase BulkActions.Delete:\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\twindow.confirm(\n\t\t\t\t\t\t\t\t`Biztosan törölni akarod a kiválasztott szavakat?`,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tshowShield('q0t1je')\n\t\t\t\t\t\t\tawait deleteWords({\n\t\t\t\t\t\t\t\tdictionaryId: _dictionaryId,\n\t\t\t\t\t\t\t\twordIds: Object.keys(_selectedWordIds).map(\n\t\t\t\t\t\t\t\t\t_ => +_,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\thideShield('q0t1je')\n\t\t\t\t\t\t\t_setSelectedWordIds({})\n\t\t\t\t\t\t\t_onDone()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}}\n\t\t>\n\t\t\t<option value=''>\n\t\t\t\t{selectedWordsCount\n\t\t\t\t\t? `A kiválasztott szavakat...`\n\t\t\t\t\t: `Az összes szót...`}\n\t\t\t</option>\n\t\t\t{selectedWordsCount > 0 && (\n\t\t\t\t<option value={BulkActions.Deselect}>\n\t\t\t\t\t{CHECKBOX_CHARACTER} ne válaszd ki\n\t\t\t\t</option>\n\t\t\t)}\n\t\t\t<option value={BulkActions.Enable}>\n\t\t\t\t{QUESTIONS_CHARACTER} kapcsold be\n\t\t\t</option>\n\t\t\t<option value={BulkActions.Disable}>\n\t\t\t\t{NO_QUESTIONS_CHARACTER} kapcsold ki\n\t\t\t</option>\n\t\t\t{selectedWordsCount > 0 && (\n\t\t\t\t<option value={BulkActions.Delete}>\n\t\t\t\t\t{ERROR_CHARACTER} töröld\n\t\t\t\t</option>\n\t\t\t)}\n\t\t</select>\n\t)\n}\n","import { Translation } from '../model/Translation'\n\nexport function translationToString(t: Translation): string {\n\treturn t.description ? `${t.text} (${t.description})` : t.text\n}\n","import { omit } from './omit'\n\nexport function toggle<T extends { [k: string]: boolean }, K extends keyof T>(\n\to: T,\n\tkey: K,\n\tflag: boolean,\n): T {\n\treturn flag ? { ...o, [key]: true } : (omit(o, key) as T)\n}\n","import React from 'react'\nimport { toggle } from '../function/toggle'\nimport { TSelection } from '../model/TSelection'\nimport { Word } from '../model/Word'\nimport { WordComp } from './WordComp'\n\nexport interface WordListCompProps {\n\t_firstIndex: number\n\t_words: readonly Word[]\n\t_selectedWordIds: TSelection\n\t_setSelectedWordIds: (v: TSelection) => void\n\t_swapTranslations: boolean\n}\n\nexport function WordListComp({\n\t_firstIndex,\n\t_words,\n\t_selectedWordIds,\n\t_setSelectedWordIds,\n\t_swapTranslations,\n}: WordListCompProps) {\n\treturn (\n\t\t<ol start={_firstIndex + 1}>\n\t\t\t{_words.map(word => (\n\t\t\t\t<li key={word.id}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\tchecked={!!_selectedWordIds[word.id + '']}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t_setSelectedWordIds(\n\t\t\t\t\t\t\t\ttoggle(\n\t\t\t\t\t\t\t\t\t_selectedWordIds,\n\t\t\t\t\t\t\t\t\tword.id + '',\n\t\t\t\t\t\t\t\t\te.target.checked,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>{' '}\n\t\t\t\t\t<WordComp\n\t\t\t\t\t\t_word={word}\n\t\t\t\t\t\t_swapTranslations={_swapTranslations}\n\t\t\t\t\t/>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ol>\n\t)\n}\n","import React, { Fragment } from 'react'\nimport { useMemo } from 'use-memo-one'\nimport { TSelection } from '../model/TSelection'\nimport { Word } from '../model/Word'\nimport { WordListComp } from './WordListComp'\n\ninterface WordListByDate {\n\tdate: string\n\tfirstIndex: number\n\twords: Word[]\n}\n\nexport interface WordListByDateCompProps {\n\t_words: readonly Word[]\n\t_firstIndex: number\n\t_selectedWordIds: TSelection\n\t_setSelectedWordIds: (v: TSelection) => void\n\t_swapTranslations: boolean\n}\n\nexport function WordListByDateComp({\n\t_words,\n\t_firstIndex,\n\t_selectedWordIds,\n\t_setSelectedWordIds,\n\t_swapTranslations,\n}: WordListByDateCompProps) {\n\tconst wordsByDate = useMemo(\n\t\t() =>\n\t\t\t_words.reduce<WordListByDate[]>((all, word) => {\n\t\t\t\tconst lastList = all[all.length - 1]\n\t\t\t\tif (!lastList || lastList.date !== word.modifiedDate) {\n\t\t\t\t\tall.push({\n\t\t\t\t\t\tdate: word.modifiedDate,\n\t\t\t\t\t\tfirstIndex: lastList\n\t\t\t\t\t\t\t? lastList.firstIndex + lastList.words.length\n\t\t\t\t\t\t\t: _firstIndex,\n\t\t\t\t\t\twords: [word],\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tlastList.words.push(word)\n\t\t\t\t}\n\t\t\t\treturn all\n\t\t\t}, []),\n\t\t[_words, _firstIndex],\n\t)\n\treturn (\n\t\t<>\n\t\t\t{wordsByDate.map((list, i) => (\n\t\t\t\t<Fragment key={list.date}>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<small>{list.date}</small>\n\t\t\t\t\t</p>\n\t\t\t\t\t<WordListComp\n\t\t\t\t\t\t_firstIndex={list.firstIndex}\n\t\t\t\t\t\t_words={list.words}\n\t\t\t\t\t\t_selectedWordIds={_selectedWordIds}\n\t\t\t\t\t\t_setSelectedWordIds={_setSelectedWordIds}\n\t\t\t\t\t\t_swapTranslations={_swapTranslations}\n\t\t\t\t\t/>\n\t\t\t\t</Fragment>\n\t\t\t))}\n\t\t</>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_MODIFIED_DATE_0,\n\tSTORE_DICTIONARIES,\n\tSTORE_WORDS,\n} from './Db'\nimport { makeKeyRangeWordsModifiedDate } from './makeKeyRangeWordsModifiedDate'\nimport { updateDictionaryCount } from './updateDictionaryCount'\n\nexport async function deleteWords({\n\tt = getDb().transaction([STORE_DICTIONARIES, STORE_WORDS], 'readwrite'),\n\tdictionaryId,\n\twordIds,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n\twordIds: readonly number[]\n}) {\n\tconst wordsStore = t.objectStore(STORE_WORDS)\n\tif (wordIds.length === 0) {\n\t\tconst wordsIndex = t\n\t\t\t.objectStore(STORE_WORDS)\n\t\t\t.index(INDEX_WORDS_MODIFIED_DATE_0)\n\t\tlet cursor = await wordsIndex.openKeyCursor(\n\t\t\tmakeKeyRangeWordsModifiedDate({ dictionaryId }),\n\t\t)\n\t\twhile (cursor) {\n\t\t\tawait cursor.delete()\n\t\t\tcursor = await cursor.continue()\n\t\t}\n\t} else {\n\t\tfor (const wordId of wordIds) {\n\t\t\tawait wordsStore.delete(wordId)\n\t\t}\n\t}\n\tawait updateDictionaryCount({ t, dictionaryId })\n}\n","import { IDBPTransaction } from 'idb'\nimport { DEFAULT_COUNT } from '../model/constants'\nimport { Word, wordFromDb, wordToDb } from '../model/Word'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_MODIFIED_DATE_0,\n\tSTORE_DICTIONARIES,\n\tSTORE_WORDS,\n} from './Db'\nimport { makeKeyRangeWordsModifiedDate } from './makeKeyRangeWordsModifiedDate'\nimport { readWord } from './readWord'\nimport { storeWord } from './storeWord'\nimport { updateDictionaryCount } from './updateDictionaryCount'\n\nexport async function toggleWords({\n\tt = getDb().transaction([STORE_DICTIONARIES, STORE_WORDS], 'readwrite'),\n\tdictionaryId,\n\twordIds,\n\tenable,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n\twordIds: readonly number[]\n\tenable: boolean\n}) {\n\tif (wordIds.length === 0) {\n\t\tconst wordsIndex = t\n\t\t\t.objectStore(STORE_WORDS)\n\t\t\t.index(INDEX_WORDS_MODIFIED_DATE_0)\n\t\tlet cursor = await wordsIndex.openCursor(\n\t\t\tmakeKeyRangeWordsModifiedDate({ dictionaryId }),\n\t\t)\n\t\twhile (cursor) {\n\t\t\tconst word = wordFromDb(cursor.value)\n\t\t\tupdateWord(word, enable)\n\t\t\tcursor.update(wordToDb(word))\n\t\t\tcursor = await cursor.continue()\n\t\t}\n\t} else {\n\t\tfor (const wordId of wordIds) {\n\t\t\tconst word = await readWord({ t, wordId })\n\t\t\tif (!word) throw new Error(`[q06uwo] Ismeretlen szó: ${wordId}`)\n\t\t\tupdateWord(word, enable)\n\t\t\tawait storeWord({ t, word })\n\t\t}\n\t}\n\tawait updateDictionaryCount({\n\t\tt,\n\t\tdictionaryId,\n\t})\n}\n\nexport function updateWord(word: Word, enable: boolean) {\n\tword.translation0.count = enable ? DEFAULT_COUNT : 0\n\tword.translation1.count = enable ? DEFAULT_COUNT : 0\n}\n","import React from 'react'\nimport { WordsByDictionaryIdSort } from '../storage/readWordsByDictionaryId'\nimport { LabelComp } from './LabelComp'\nimport { RowComp } from './RowComp'\n\nexport interface WordsSortCompProps {\n\t_sort: WordsByDictionaryIdSort\n\t_setSort: (v: WordsByDictionaryIdSort) => void\n\t_language0Name: string\n\t_language1Name: string\n}\n\nexport function WordsSortComp({\n\t_sort,\n\t_setSort,\n\t_language0Name,\n\t_language1Name,\n}: WordsSortCompProps) {\n\tconst sortByDate = [\n\t\tWordsByDictionaryIdSort.ModifiedDate0,\n\t\tWordsByDictionaryIdSort.ModifiedDate1,\n\t].includes(_sort)\n\tconst sortByLanguage0 = [\n\t\tWordsByDictionaryIdSort.CountTranslation0,\n\t\tWordsByDictionaryIdSort.ModifiedDate0,\n\t].includes(_sort)\n\treturn (\n\t\t<RowComp _gap={5}>\n\t\t\t<button\n\t\t\t\ttype='button'\n\t\t\t\tonClick={() => {\n\t\t\t\t\t_setSort(\n\t\t\t\t\t\tgetSort({\n\t\t\t\t\t\t\tsortByDate,\n\t\t\t\t\t\t\tsortByLanguage0: !sortByLanguage0,\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{sortByLanguage0 ? _language0Name : _language1Name} A-Z\n\t\t\t</button>\n\t\t\t<LabelComp>\n\t\t\t\t<input\n\t\t\t\t\ttype='checkbox'\n\t\t\t\t\tchecked={sortByDate}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t_setSort(\n\t\t\t\t\t\t\tgetSort({\n\t\t\t\t\t\t\t\tsortByDate: e.target.checked,\n\t\t\t\t\t\t\t\tsortByLanguage0,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t/>{' '}\n\t\t\t\tDátum szerint\n\t\t\t</LabelComp>\n\t\t</RowComp>\n\t)\n}\n\nfunction getSort({\n\tsortByDate,\n\tsortByLanguage0,\n}: {\n\tsortByDate: boolean\n\tsortByLanguage0: boolean\n}) {\n\treturn sortByDate\n\t\t? sortByLanguage0\n\t\t\t? WordsByDictionaryIdSort.ModifiedDate0\n\t\t\t: WordsByDictionaryIdSort.ModifiedDate1\n\t\t: sortByLanguage0\n\t\t? WordsByDictionaryIdSort.CountTranslation0\n\t\t: WordsByDictionaryIdSort.CountTranslation1\n}\n","import qs from 'qs'\nimport React, { useState } from 'react'\nimport { useHistory, useLocation, useRouteMatch } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { useCallback, useMemo } from 'use-memo-one'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { queryToRegExp } from '../function/queryToRegExp'\nimport { sanitizeEnumValue } from '../function/sanitizeEnumValue'\nimport { sanitizePageIndex } from '../function/sanitizePageIndex'\nimport { wordToString } from '../function/wordToString'\nimport { useDictionary } from '../hook/useDictionary'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { useWordCountByDictionaryId } from '../hook/useWordCountByDictionaryId'\nimport { useWordsByDictionaryId } from '../hook/useWordsByDictionaryId'\nimport { CLOSE_CHARACTER } from '../model/constants'\nimport { isLoaded } from '../model/TLoadable'\nimport { TSelection } from '../model/TSelection'\nimport { DbWord } from '../model/Word'\nimport { WordsByDictionaryIdSort } from '../storage/readWordsByDictionaryId'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryComp } from './DictionaryComp'\nimport { FormRowComp } from './FormRowComp'\nimport { IconComp } from './IconComp'\nimport { LoadableComp } from './LoadableComp'\nimport { PagingComp } from './PagingComp'\nimport { UnknownDictionaryComp } from './UnknownDictionaryComp'\nimport { WordListByDateComp } from './WordListByDateComp'\nimport { WordListComp } from './WordListComp'\nimport { WordsMenuComp } from './WordsMenuComp'\nimport { WordsSortComp } from './WordsSortComp'\n\nexport interface WordsPageProps {}\n\nexport function WordsPage(props: WordsPageProps) {\n\tconst history = useHistory()\n\tconst location = useLocation()\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string }>(\n\t\t`/dictionary/:dictionaryId/words/`,\n\t)\n\tconst dictionaryId =\n\t\trouteMatch && parseInt(routeMatch.params.dictionaryId, 10)\n\tconst query = useMemo(\n\t\t() =>\n\t\t\tqs.parse(location.search.slice(1)) as {\n\t\t\t\tq: string | undefined\n\t\t\t\tpage: string | undefined\n\t\t\t\tsort: string | undefined\n\t\t\t},\n\t\t[location.search],\n\t)\n\tconst q = query.q || ''\n\tconst filter = useMemo(() => {\n\t\tconst qRe = queryToRegExp(q)\n\t\treturn qRe\n\t\t\t? (word: DbWord) => {\n\t\t\t\t\treturn qRe.test(wordToString(word))\n\t\t\t  }\n\t\t\t: undefined\n\t}, [q])\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst pageSize = 10\n\tconst { $wordCount, loadWordCount } = useWordCountByDictionaryId({\n\t\tdictionaryId,\n\t\tfilter,\n\t})\n\tconst pageCount = isLoaded($wordCount)\n\t\t? Math.max(1, Math.ceil($wordCount.current / pageSize))\n\t\t: 1\n\tconst page =\n\t\tquery && query.page\n\t\t\t? sanitizePageIndex({ page: parseInt(query.page, 10), pageCount })\n\t\t\t: 0\n\tconst sort =\n\t\tquery && query.sort != null\n\t\t\t? sanitizeEnumValue<WordsByDictionaryIdSort>(\n\t\t\t\t\tWordsByDictionaryIdSort,\n\t\t\t\t\tparseInt(query.sort, 10),\n\t\t\t  )\n\t\t\t: WordsByDictionaryIdSort.ModifiedDate0\n\tconst setQ = useCallback(\n\t\t(q: string) => {\n\t\t\thistory.replace(`?${qs.stringify({ q, sort, page })}`)\n\t\t},\n\t\t[history, page, sort],\n\t)\n\tconst setPage = useCallback(\n\t\t(newPage: number) => {\n\t\t\thistory.replace(`?${qs.stringify({ q, sort, page: newPage })}`)\n\t\t},\n\t\t[history, q, sort],\n\t)\n\tconst setSort = useCallback(\n\t\t(newSort: WordsByDictionaryIdSort) => {\n\t\t\thistory.replace(`?${qs.stringify({ q, sort: newSort, page })}`)\n\t\t},\n\t\t[history, q, page],\n\t)\n\tconst { $words, loadWords } = useWordsByDictionaryId({\n\t\tdictionaryId,\n\t\tpage,\n\t\tpageSize,\n\t\tsort,\n\t\tfilter,\n\t})\n\tconst [$selectedWordIds, set$selectedWordIds] = useState<TSelection>({})\n\tusePageTitle(\n\t\tisLoaded($dictionary) && $dictionary.current\n\t\t\t? `${dictionaryToString($dictionary.current)} szavai`\n\t\t\t: `Szavak`,\n\t)\n\treturn (\n\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t{dictionary =>\n\t\t\t\tdictionary.current == null ? (\n\t\t\t\t\t<UnknownDictionaryComp />\n\t\t\t\t) : (\n\t\t\t\t\t<ContentRowComp>\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t<DictionaryComp _dictionary={dictionary.current!} />{' '}\n\t\t\t\t\t\t\tszavai\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\tplaceholder='Szűrd a szavakat'\n\t\t\t\t\t\t\t\tvalue={q}\n\t\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\t\tsetQ(e.target.value)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{filter && (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\t\tclassName='does-not-expand'\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetQ('')\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{CLOSE_CHARACTER}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormRowComp>\n\t\t\t\t\t\t<WordsSortComp\n\t\t\t\t\t\t\t_sort={sort}\n\t\t\t\t\t\t\t_setSort={setSort}\n\t\t\t\t\t\t\t_language0Name={dictionary.current!.language0}\n\t\t\t\t\t\t\t_language1Name={dictionary.current!.language1}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<LoadableComp _value={$wordCount} _load={loadWordCount}>\n\t\t\t\t\t\t\t{wordCount => (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<LoadableComp\n\t\t\t\t\t\t\t\t\t\t_value={$words}\n\t\t\t\t\t\t\t\t\t\t_load={loadWords}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{words =>\n\t\t\t\t\t\t\t\t\t\t\twords.current == null ||\n\t\t\t\t\t\t\t\t\t\t\twords.current.length === 0 ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<em>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<IconComp _icon='🙈' />{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNem találtam egy szót\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsem.\n\t\t\t\t\t\t\t\t\t\t\t\t\t</em>\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t) : sort == null ||\n\t\t\t\t\t\t\t\t\t\t\t  [\n\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.ModifiedDate0,\n\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.ModifiedDate1,\n\t\t\t\t\t\t\t\t\t\t\t  ].includes(sort) ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<WordListByDateComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t_words={words.current}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_firstIndex={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpageSize * page\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_selectedWordIds={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$selectedWordIds\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_setSelectedWordIds={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tset$selectedWordIds\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_swapTranslations={[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.CountTranslation1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.ModifiedDate1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t].includes(sort)}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<WordListComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t_words={words.current}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_firstIndex={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpageSize * page\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_selectedWordIds={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$selectedWordIds\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_setSelectedWordIds={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tset$selectedWordIds\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_swapTranslations={[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.CountTranslation1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.ModifiedDate1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t].includes(sort)}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t\t\t\t{pageCount > 1 && (\n\t\t\t\t\t\t\t\t\t\t<PagingComp\n\t\t\t\t\t\t\t\t\t\t\t_page={page}\n\t\t\t\t\t\t\t\t\t\t\t_pageCount={pageCount}\n\t\t\t\t\t\t\t\t\t\t\t_setPage={setPage}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t\t\t<Link to={`../word/`} role='button'>\n\t\t\t\t\t\t\t\t<IconComp _icon='➕' /> Adj hozzá egy szót\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<WordsMenuComp\n\t\t\t\t\t\t\t\t_dictionaryId={dictionary.current.id!}\n\t\t\t\t\t\t\t\t_selectedWordIds={$selectedWordIds}\n\t\t\t\t\t\t\t\t_setSelectedWordIds={set$selectedWordIds}\n\t\t\t\t\t\t\t\t_onDone={loadDictionary}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ButtonRowComp>\n\t\t\t\t\t</ContentRowComp>\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","export function sanitizeEnumValue<T>(\n\te: { [k: number]: string },\n\tvalue: number,\n): T {\n\treturn ((value in e ? value : 0) as unknown) as T\n}\n","import { Word } from '../model/Word'\nimport { translationToString } from './translationToString'\n\nexport function wordToString(word: Word): string {\n\treturn `${translationToString(word.translation0)} = ${translationToString(\n\t\tword.translation1,\n\t)}`\n}\n","import { isNumber } from 'util'\n\nexport function sanitizePageIndex({\n\tpage = 0,\n\tpageCount = 1,\n}: {\n\tpage: number\n\tpageCount?: number\n}): number {\n\tif (!isNumber(page) || isNaN(page) || !isFinite(page)) {\n\t\tpage = 0\n\t} else {\n\t\tpage = Math.max(0, Math.min(pageCount - 1, page))\n\t}\n\treturn page\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\nimport { AppComp } from './comp/AppComp'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n\t<HashRouter>\n\t\t<AppComp />\n\t</HashRouter>,\n\tdocument.getElementById('root'),\n)\n\nserviceWorker.register({\n\tonSuccess: () => {\n\t\tif (globalThis.setIsCached) {\n\t\t\tglobalThis.setIsCached(true)\n\t\t}\n\t},\n\tonUpdate: () => {\n\t\tif (globalThis.setHasUpdate) {\n\t\t\tglobalThis.setHasUpdate(true)\n\t\t}\n\t},\n})\n","import preval from 'preval.macro'\nimport React, { useEffect, useState } from 'react'\nimport { Route, Switch } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { hasKeys } from '../function/hasKeys'\nimport { setStringToIdbSortableMap } from '../function/stringToIdbSortable'\nimport { useMessages } from '../hook/useMessages'\nimport { usePersistentStorage } from '../hook/usePersistentStorage'\nimport { useShield } from '../hook/useShield'\nimport {\n\tERROR_CHARACTER,\n\tSUCCESS_CHARACTER,\n\tWARNING_CHARACTER,\n} from '../model/constants'\nimport {\n\tinitDb,\n\tKEY_SETTINGS_STRING_TO_IDB_SORTABLE_MAP,\n\tSTORE_SETTINGS,\n} from '../storage/Db'\nimport styles from './AppComp.module.css'\nimport { DictionaryPage } from './DictionaryPage'\nimport { EditDictionaryPage } from './EditDictionaryPage'\nimport { EditWordPage } from './EditWordPage'\nimport { ExportDictionaryPage } from './ExportDictionaryPage'\nimport { ImportFromFilePage } from './ImportFromFilePage'\nimport { LearnPage } from './LearnPage'\nimport { LoadableComp } from './LoadableComp'\nimport { MessagesComp } from './MessagesComp'\nimport { NotFoundPage } from './NotFoundPage'\nimport { RowComp } from './RowComp'\nimport { ShieldComp } from './ShieldComp'\nimport { ShieldContext } from './ShieldContext'\nimport { ShowMessageContext } from './ShowMessageContext'\nimport { SpacerComp } from './SpacerComp'\nimport { StartPage } from './StartPage'\nimport { WordsPage } from './WordsPage'\n\nexport function AppComp() {\n\tconst [$hasDb, set$hasDb] = useState(false)\n\tconst {\n\t\t$isPersistentStorage,\n\t\tset$isPersistentStorage,\n\t\tloadPersistentStorage,\n\t} = usePersistentStorage()\n\n\tconst { messages, showMessage, removeMessageByIndex } = useMessages()\n\n\tconst { $shieldKeys, shieldContextValue } = useShield()\n\tconst { showShield, hideShield } = shieldContextValue\n\n\tuseEffect(() => {\n\t\tglobalThis.setIsCached = flag => {\n\t\t\tif (flag) {\n\t\t\t\tshowMessage(`${SUCCESS_CHARACTER} Internet nélkül is működöm!`)\n\t\t\t}\n\t\t}\n\t\tglobalThis.setHasUpdate = flag => {\n\t\t\tif (flag) {\n\t\t\t\tshowMessage(`⬆️ Kész az új verzióm! Indíts újra, és telepítem.`)\n\t\t\t}\n\t\t}\n\t}, [showMessage])\n\n\tuseEffect(() => {\n\t\tshowShield('q0t0sl')\n\t\t;(async () => {\n\t\t\ttry {\n\t\t\t\tconst db = await initDb(showMessage)\n\t\t\t\tconst t = db.transaction(STORE_SETTINGS, 'readonly')\n\t\t\t\tconst settingsStore = t.objectStore(STORE_SETTINGS)\n\t\t\t\tsetStringToIdbSortableMap(\n\t\t\t\t\tawait settingsStore.get(\n\t\t\t\t\t\tKEY_SETTINGS_STRING_TO_IDB_SORTABLE_MAP,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\tset$hasDb(true)\n\t\t\t} catch (e) {\n\t\t\t\tshowMessage(e)\n\t\t\t}\n\t\t\thideShield('q0t0sl')\n\t\t})()\n\t}, [showMessage, showShield, hideShield])\n\n\treturn (\n\t\t<ShowMessageContext.Provider value={showMessage}>\n\t\t\t<ShieldContext.Provider value={shieldContextValue}>\n\t\t\t\t<RowComp _isVertical _gap={20} _padding={20} _fill>\n\t\t\t\t\t<div className={styles.header}>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\twindow.history.back()\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t←\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<Link to='/' className='button-padding-y'>\n\t\t\t\t\t\t\tMag\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\twindow.history.forward()\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t→\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<RowComp _isVertical>\n\t\t\t\t\t\t<MessagesComp\n\t\t\t\t\t\t\t_messages={messages}\n\t\t\t\t\t\t\t_removeMessageByIndex={removeMessageByIndex}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{!$hasDb && (\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<em>Adatbázis nélkül nem megy...</em>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{$hasDb && (\n\t\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t\t<Route exact path='/'>\n\t\t\t\t\t\t\t\t\t<StartPage />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route path='/import/'>\n\t\t\t\t\t\t\t\t\t<ImportFromFilePage />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route exact path='/dictionary/'>\n\t\t\t\t\t\t\t\t\t<EditDictionaryPage />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route exact path='/dictionary/:dictionaryId/'>\n\t\t\t\t\t\t\t\t\t<DictionaryPage />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route path='/dictionary/:dictionaryId/export/'>\n\t\t\t\t\t\t\t\t\t<ExportDictionaryPage />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route path='/dictionary/:dictionaryId/word/'>\n\t\t\t\t\t\t\t\t\t<EditWordPage />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route path='/dictionary/:dictionaryId/words/'>\n\t\t\t\t\t\t\t\t\t<WordsPage />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route path='/dictionary/:dictionaryId/import/'>\n\t\t\t\t\t\t\t\t\t<ImportFromFilePage />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route path='/dictionary/:dictionaryId/learn/'>\n\t\t\t\t\t\t\t\t\t<LearnPage />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route path='/dictionary/:dictionaryId/edit/'>\n\t\t\t\t\t\t\t\t\t<EditDictionaryPage />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t\t<Route path='/'>\n\t\t\t\t\t\t\t\t\t<NotFoundPage />\n\t\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</RowComp>\n\t\t\t\t\t<SpacerComp />\n\t\t\t\t\t<div className={styles.footer}>\n\t\t\t\t\t\tVerzió:{' '}\n\t\t\t\t\t\t{preval`module.exports = new Date().toLocaleString()`}\n\t\t\t\t\t\t{' • '}\n\t\t\t\t\t\t<strong>\n\t\t\t\t\t\t\t<LoadableComp\n\t\t\t\t\t\t\t\t_value={$isPersistentStorage}\n\t\t\t\t\t\t\t\t_load={loadPersistentStorage}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{isPersistentStorage =>\n\t\t\t\t\t\t\t\t\tisPersistentStorage.current ? (\n\t\t\t\t\t\t\t\t\t\t<>Maradandó tárhelyem van.</>\n\t\t\t\t\t\t\t\t\t) : navigator.storage ? (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t{WARNING_CHARACTER} Nincs maradandó\n\t\t\t\t\t\t\t\t\t\t\ttárhelyem!{' '}\n\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tshowShield('q0t0uo')\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst isPersistent = await navigator.storage.persist()\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (isPersistent) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tset$isPersistentStorage(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tshowMessage(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t`${ERROR_CHARACTER} Nem kaptam maradandó tárhelyet. Próbáld meg később!`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\thideShield('q0t0uo')\n\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tJavítsd meg\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\tEz a böngésző nem támogatja a\n\t\t\t\t\t\t\t\t\t\t\tmaradandó tárhelyet.\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t</strong>\n\t\t\t\t\t</div>\n\t\t\t\t</RowComp>\n\t\t\t\t{hasKeys($shieldKeys) && <ShieldComp />}\n\t\t\t</ShieldContext.Provider>\n\t\t</ShowMessageContext.Provider>\n\t)\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { TLoadable } from '../model/TLoadable'\n\nexport function usePersistentStorage() {\n\tconst [$isPersistentStorage, set$isPersistentStorage] = useState<\n\t\tTLoadable<{ current: boolean }>\n\t>(null)\n\tconst loadPersistentStorage = useCallback(() => {\n\t\tlet aborted = false\n\t\t;(async () => {\n\t\t\ttry {\n\t\t\t\tif (!navigator.storage) {\n\t\t\t\t\tset$isPersistentStorage({ current: false })\n\t\t\t\t} else {\n\t\t\t\t\tset$isPersistentStorage(Date.now())\n\t\t\t\t\tconst current = await navigator.storage.persisted()\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$isPersistentStorage({\n\t\t\t\t\t\tcurrent,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (aborted) return\n\t\t\t\tconsole.error(e)\n\t\t\t\tset$isPersistentStorage(e + '')\n\t\t\t}\n\t\t})()\n\t\treturn () => {\n\t\t\taborted = true\n\t\t}\n\t}, [])\n\treturn {\n\t\t$isPersistentStorage,\n\t\tset$isPersistentStorage,\n\t\tloadPersistentStorage,\n\t}\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { ERROR_CHARACTER } from '../model/constants'\n\nexport function useMessages() {\n\tconst [$messages, set$messages] = useState<readonly string[]>([])\n\tconst showMessage = useCallback((message: any) => {\n\t\tif (message instanceof Error) {\n\t\t\tconsole.error(message)\n\t\t} else {\n\t\t\tconsole.info(message)\n\t\t}\n\t\tconst messageString = (message + '').replace(\n\t\t\t/^Error:\\s*/,\n\t\t\tERROR_CHARACTER + ' ',\n\t\t)\n\t\tset$messages(messages => {\n\t\t\tconst lastMessage = messages[messages.length - 1]\n\t\t\tlet lastMessageCount = 1\n\t\t\tconst lastMessageStart = lastMessage\n\t\t\t\t? lastMessage.replace(/ \\((\\d+)\\)$/, (match, count) => {\n\t\t\t\t\t\tlastMessageCount = parseInt(count, 10)\n\t\t\t\t\t\treturn ''\n\t\t\t\t  })\n\t\t\t\t: undefined\n\t\t\tif (messageString === lastMessageStart) {\n\t\t\t\treturn [\n\t\t\t\t\t...messages.slice(0, messages.length - 1),\n\t\t\t\t\tmessageString + ` (${lastMessageCount + 1})`,\n\t\t\t\t]\n\t\t\t} else {\n\t\t\t\treturn [...messages, messageString]\n\t\t\t}\n\t\t})\n\t}, [])\n\tconst removeMessageByIndex = useCallback((index: number) => {\n\t\tset$messages(messages => [\n\t\t\t...messages.slice(0, index),\n\t\t\t...messages.slice(index + 1),\n\t\t])\n\t}, [])\n\treturn { messages: $messages, showMessage, removeMessageByIndex }\n}\n","import { useState } from 'react'\nimport { useMemo } from 'use-memo-one'\nimport { ShieldContextType } from '../comp/ShieldContext'\nimport { omit } from '../function/omit'\nimport { withInterface } from '../function/withInterface'\n\nexport function useShield() {\n\tconst [$shieldKeys, set$shieldKeys] = useState<{ [k: string]: number }>({})\n\tconst shieldContextValue = useMemo(\n\t\t() =>\n\t\t\twithInterface<ShieldContextType>({\n\t\t\t\tshowShield: key => {\n\t\t\t\t\tset$shieldKeys(shieldKeys => {\n\t\t\t\t\t\tconst result = {\n\t\t\t\t\t\t\t...shieldKeys,\n\t\t\t\t\t\t\t[key]: (shieldKeys[key] || 0) + 1,\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// console.log(\n\t\t\t\t\t\t// \t`[q0t15i] Showing shield: ${key} → [${Object.keys(\n\t\t\t\t\t\t// \t\tshieldKeys,\n\t\t\t\t\t\t// \t).join(', ')}]`,\n\t\t\t\t\t\t// )\n\t\t\t\t\t\treturn result\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t\thideShield: key => {\n\t\t\t\t\tset$shieldKeys(shieldKeys => {\n\t\t\t\t\t\tlet result: typeof shieldKeys\n\t\t\t\t\t\tif (shieldKeys[key] > 1) {\n\t\t\t\t\t\t\tresult = {\n\t\t\t\t\t\t\t\t...shieldKeys,\n\t\t\t\t\t\t\t\t[key]: shieldKeys[key] - 1,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult = omit(shieldKeys, key)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// console.log(\n\t\t\t\t\t\t// \t`[q0t161] Hiding shield: ${key} → [${Object.keys(\n\t\t\t\t\t\t// \t\tshieldKeys,\n\t\t\t\t\t\t// \t).join(', ')}]`,\n\t\t\t\t\t\t// )\n\t\t\t\t\t\treturn result\n\t\t\t\t\t})\n\t\t\t\t},\n\t\t\t}),\n\t\t[],\n\t)\n\treturn { $shieldKeys, shieldContextValue }\n}\n","export function hasKeys(o: { [k: string]: any }) {\n\tfor (let i in o) {\n\t\tif (Object.prototype.hasOwnProperty.call(o, i)) {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n"],"sourceRoot":""}