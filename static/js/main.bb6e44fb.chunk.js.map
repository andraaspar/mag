{"version":3,"sources":["comp/AppComp.module.css","comp/LabelComp.module.css","comp/SpacerComp.module.css","function/stringToIdbSortable.tsx","model/constants.tsx","function/dateToString.tsx","model/Dictionary.tsx","storage/storeDictionary.tsx","model/Translation.tsx","model/Word.tsx","storage/storeWord.tsx","storage/Db.tsx","function/dictionaryToString.tsx","storage/readDictionaryById.tsx","hook/useDictionary.tsx","storage/makeKeyRangeWordsCount.tsx","storage/countNumberOfQuestions.tsx","hook/useNumberOfQuestions.tsx","hook/usePageTitle.tsx","comp/ShowMessageContext.tsx","storage/countItems.tsx","storage/makeKeyRangeWordsModifiedDate.tsx","storage/countWordsByDictionaryId.tsx","hook/useWordCountByDictionaryId.tsx","model/TLoadable.tsx","storage/deleteDictionary.tsx","comp/RowComp.tsx","comp/ButtonRowComp.tsx","comp/ContentRowComp.tsx","comp/DictionaryComp.tsx","comp/FocusRefComp.tsx","comp/LoadableComp.tsx","hook/usePrevious.tsx","comp/UnknownDictionaryComp.tsx","comp/DictionaryPage.tsx","function/url.tsx","function/sanitizeString.tsx","function/sanitizeDictionary.tsx","storage/checkForConflictingDictionary.tsx","hook/useDictionaryValidationErrors.tsx","hook/useConflictingDictionary.tsx","comp/FormRowComp.tsx","comp/LabelComp.tsx","comp/DictionaryPropsComp.tsx","storage/readWordByTranslation.tsx","storage/checkForConflictingWord.tsx","comp/TranslationComp.tsx","comp/WordComp.tsx","comp/ErrorsComp.tsx","comp/EditDictionaryComp.tsx","comp/EditDictionaryPage.tsx","storage/readWord.tsx","hook/useWord.tsx","function/sanitizeTranslation.tsx","function/sanitizeWord.tsx","hook/useWordValidationErrors.tsx","hook/useExistingTranslationError.tsx","comp/EditWordComp.tsx","comp/EditWordPage.tsx","storage/readWordsByDictionaryId.tsx","storage/readItems.tsx","storage/makeKeyRangeWordsCountTranslation.tsx","hook/useWordsByDictionaryId.tsx","comp/PagingComp.tsx","comp/ExportDictionaryPage.tsx","function/asyncFilter.tsx","function/withInterface.tsx","function/handleDictionaryImport.tsx","function/dictionaryFromAndroid.tsx","function/dictionaryFromExport.tsx","function/readJsonFromFile.tsx","function/wordFromAndroid.tsx","function/wordFromExport.tsx","comp/GetWordsComp.tsx","storage/readDictionaries.tsx","comp/SetImportParamsComp.tsx","comp/ImportFromFilePage.tsx","storage/readQuestions.tsx","hook/useQuestions.tsx","function/avoidDuplicates.tsx","function/shuffle.tsx","comp/LearnComp.tsx","comp/LearnPage.tsx","comp/MessagesComp.tsx","comp/NotFoundPage.tsx","comp/SpacerComp.tsx","function/queryToRegExp.tsx","selector/selectPageCount.tsx","storage/countDictionaries.tsx","comp/StartPage.tsx","comp/WordsMenuComp.tsx","function/translationToString.tsx","function/omit.tsx","function/toggle.tsx","comp/WordListComp.tsx","comp/WordListByDateComp.tsx","storage/deleteWords.tsx","storage/toggleWords.tsx","comp/WordsSortComp.tsx","comp/WordsPage.tsx","function/sanitizeEnumValue.tsx","function/wordToString.tsx","function/sanitizePageIndex.tsx","serviceWorker.ts","index.tsx","comp/AppComp.tsx","hook/usePersistentStorage.tsx","hook/useMessages.tsx","comp/RowComp.module.css"],"names":["module","exports","_map","firstNonLetterIndex","getStringToIdbSortableMap","start","performance","now","arr","i","push","String","fromCharCode","sort","a","b","localeCompare","map","Map","n","length","set","size","console","log","createMap","setStringToIdbSortableMap","stringToIdbSortable","s","reverse","toLocaleLowerCase","replace","match","index","get","isNumber","charCodeAt","DEFAULT_COUNT","PROGRESS_CHARACTER","QUESTIONS_CHARACTER","WARNING_CHARACTER","ERROR_CHARACTER","MIN_MAX_RANGE","dateToString","d","year","getFullYear","month","getMonth","padStart","date","getDate","dictionaryToDb","o","id","language0","language1","name","nameForSort","language0ForSort","language1ForSort","dictionaryFromDb","storeDictionary","t","getDb","transaction","STORE_DICTIONARIES","dictionary","dictionariesStore","objectStore","put","translationToDb","text","count","description","textForSort","descriptionForSort","countForSort","translationFromDb","wordToDb","w","translation0","translation1","dictionaryId","modifiedDate","modifiedDateForSort","wordFromDb","storeWord","STORE_WORDS","word","DB_NAME","DEPRECATED_STORE_WORDLISTS","INDEX_DICTIONARIES_NAME","INDEX_DICTIONARIES_LANGUAGE_0","INDEX_DICTIONARIES_LANGUAGE_1","INDEX_WORDS_COUNT_0","INDEX_WORDS_COUNT_1","INDEX_WORDS_TRANSLATION_0","INDEX_WORDS_TRANSLATION_1","INDEX_WORDS_MODIFIED_DATE_0","INDEX_WORDS_MODIFIED_DATE_1","INDEX_WORDS_COUNT_TRANSLATION_0","INDEX_WORDS_COUNT_TRANSLATION_1","STORE_SETTINGS","KEY_SETTINGS_STRING_TO_IDB_SORTABLE_MAP","db","Error","initDb","showMessage","openDB","upgrade","oldVersion","newVersion","createDb2","upgradeDb1To2","blocked","blocking","createObjectStore","keyPath","autoIncrement","createIndex","unique","wordsStore","wordlistsStore","openCursor","cursor","dictionary1","value","lang1Name","lang2Name","words","word1","Date","lang1","lang1Count","lang2","lang2Count","continue","deleteObjectStore","dictionaryToString","useDictionary","useState","$dictionary","set$dictionary","loadDictionary","useCallback","aborted","readDictionaryById","then","current","catch","e","error","undefined","makeKeyRangeWordsCount","IDBKeyRange","bound","index0","index1","count0","count1","useNumberOfQuestions","$numberOfQuestions","set$numberOfQuestions","loadNumberOfQuestions","countNumberOfQuestions","usePageTitle","title","useEffect","document","ShowMessageContext","createContext","message","countItems","source","filter","range","result","makeKeyRangeWordsModifiedDate","dictionaryIdIndex","useWordCountByDictionaryId","$wordCount","set$wordCount","useContext","loadWordCount","countWordsByDictionaryId","isLoaded","isString","hasNotStartedLoading","deleteDictionary","wordsIndex","wordCursor","delete","RowComp","children","_isVertical","_gap","_padding","_fill","_wrap","className","styles","wrapper","columnWrapper","rowWrapper","wrapperFill","padding0","Boolean","join","column","row","fill","wrap","gap0","ButtonRowComp","props","ContentRowComp","DictionaryComp","_dictionary","FocusRefComp","_focusThis","focus","LoadableComp","_value","_load","_debugName","previousLoad","ref","useRef","usePrevious","loadChanged","valueIsLoadingAt","hadNotStartedLoading","valueNeedsLoadingAt","warn","Fragment","hasLoadError","style","color","UnknownDictionaryComp","to","DictionaryPage","history","useHistory","routeMatch","useRouteMatch","parseInt","params","askLinkRef","addAWordLinkRef","wordCount","numberOfQuestions","innerRef","role","type","onClick","window","confirm","goBack","url","literals","encodeURIComponent","sanitizeString","trim","sanitizeDictionary","DictionaryNameConflictError","checkForConflictingDictionary","dbDictionary","dictionaryWithSameName","useDictionaryValidationErrors","conflictingDictionary","$conflictingDictionary","set$conflictingDictionary","isAborted","exists","useConflictingDictionary","useMemo","FormRowComp","LabelComp","_for","_required","htmlFor","label","required","DictionaryPropsComp","_setDictionary","autoFocus","onChange","target","readWordByTranslation","translationIndex","translation","ExistingTranslationError","translations","checkForConflictingWord","Promise","all","existingTranslations","existingTranslationsWithDifferingId","other","TranslationComp","_translation","WordComp","_word","_swapTranslations","ErrorsComp","_errors","errors","key","EditDictionaryComp","_storeDictionary","sanitizedDictionary","dictionaryValidationErrors","touched","onSubmit","preventDefault","disabled","EditDictionaryPage","finish","storedDictionaryId","readWord","wordId","useWord","$word","set$word","loadWord","sanitizeTranslation","sanitizeWord","useWordValidationErrors","existingTranslationError","$conflictingTranslations","set$conflictingTranslations","useExistingTranslationError","EditWordComp","_refresh","_onSuccess","$translation0Text","set$translation0Text","$translation1Text","set$translation1Text","$translation0Description","set$translation0Description","$translation1Description","set$translation1Description","sanitizedWord","validationErrors","EditWordPage","onSuccess","WordsByDictionaryIdSort","readItems","pageSize","Infinity","page","direction","isFinite","getAll","firstItemIndex","advance","ModifiedDate0","rest","getIndexName","makeKeyRange","CountTranslation0","CountTranslation1","ModifiedDate1","makeKeyRangeWordsCountTranslation","useWordsByDictionaryId","$words","set$words","loadWords","readWordsByDictionaryId","PagingComp","_page","_pageCount","_setPage","ExportDictionaryPage","textAreaRef","$page","set$page","pageCount","Math","max","ceil","$json","version","JSON","stringify","downloadLinkRef","readOnly","setSelectionRange","execCommand","download","href","asyncFilter","fn","item","flags","withInterface","handleDictionaryImport","wordsWithDictionaryId","wordsNotConflicting","done","dictionaryFromAndroid","firstLanguageName","secondLanguageName","dictionaryFromExport","readJsonFromFile","file","resolve","reject","reader","FileReader","addEventListener","parse","readAsText","wordFromAndroid","inFirstLanguage","firstLanguageComment","inSecondLanguage","secondLanguageComment","wordFromExport","GetWordsComp","_setImportableDictionary","set$json","files","placeholder","rows","cols","json","currentTarget","readDictionaries","nameIndex","dictionaries","SetImportParamsComp","_importableDictionary","_importParams","_setImportParams","_dictionaryId","React","$dictionaries","set$dictionaries","loadDictionaries","dictionaryById","find","importParams","swapLanguages","setDictionary","ImportFromFilePage","$importableDictionary","set$importableDictionary","$importParams","set$importParams","setImportableDictionary","v","translation0Index","translation1Index","getAllKeys","translationId","useQuestions","wordIdNotFirst","$questions","set$questions","loadQuestions","readQuestions","questions","equals","slice","lastItem","splice","avoidDuplicates","newIndex","floor","random","shuffle","shift","LearnComp","_translationId","_next","inputRef","questionLanguage","answerLanguage","question","correctAnswer","$answer","set$answer","isAnswerCorrect","$answerShown","set$answerShown","newCount","min","success","LearnPage","lastWordId","$questionsCount","set$questionsCount","$questionsLearnedCount","set$questionsLearnedCount","progress","$questionIndex","set$questionIndex","next","round","MessagesComp","_messages","_removeMessageByIndex","whiteSpace","NotFoundPage","SpacerComp","spacer","queryToRegExp","q","RegExp","escapeStringRegexp","selectPageCount","itemCount","countDictionaries","StartPage","$pageSize","$query","set$query","$totalDictionaryCount","set$totalDictionaryCount","$dictionaryCount","set$dictionaryCount","$dictionariesOnPage","set$dictionariesOnPage","loadDictionariesOnPage","queryRe","test","totalCount","makeADictionaryLinkRef","BulkActions","translationToString","omit","keyToOmit","toggle","flag","WordListComp","_firstIndex","_words","_selectedWordIds","_setSelectedWordIds","checked","WordListByDateComp","wordsByDate","reduce","lastList","firstIndex","list","deleteWords","wordIds","openKeyCursor","toggleWords","enable","updateWord","update","WordsMenuComp","_onDone","selectedWordsCount","Object","keys","Deselect","Disable","Enable","Delete","_","WordsSortComp","_sort","_setSort","_language0Name","_language1Name","sortByDate","includes","sortByLanguage0","getSort","WordsPage","location","useLocation","query","qs","search","qRe","wordToString","isNaN","sanitizePageIndex","setQ","setPage","newPage","setSort","newSort","$selectedWordIds","set$selectedWordIds","isLocalhost","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","ReactDOM","render","$hasDb","set$hasDb","$isPersistentStorage","set$isPersistentStorage","loadPersistentStorage","storage","persisted","usePersistentStorage","$messages","set$messages","messages","info","messageString","lastMessage","lastMessageCount","lastMessageStart","removeMessageByIndex","useMessages","settingsStore","Provider","header","exact","path","component","footer","isPersistentStorage","persist","getElementById","URL","process","origin","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bb6e44fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppComp_header__OGJ-E\",\"footer\":\"AppComp_footer__1JXH0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"LabelComp_label__wDGbU\",\"required\":\"LabelComp_required__AnfXQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spacer\":\"SpacerComp_spacer__-a9f5\",\"__NEVER__\":\"SpacerComp___NEVER____c243L\"};","import { isNumber } from 'util'\n\nlet _map: Map<string, number> | null = null\nlet firstNonLetterIndex = 0\n\nfunction createMap() {\n\tconst start = performance.now()\n\tlet arr: string[] = []\n\tfor (let i = 0; i <= 0xffff; i++) {\n\t\tarr.push(String.fromCharCode(i))\n\t}\n\tarr = arr.sort((a, b) => a.localeCompare(b))\n\tconst map = new Map()\n\tfor (let i = 0, n = arr.length; i < n; i++) {\n\t\tmap.set(arr[i], i)\n\t}\n\tfirstNonLetterIndex = map.size\n\tconsole.log(`[pyhjvs] createMap took ${performance.now() - start} ms`)\n\treturn map\n}\n\nexport function getStringToIdbSortableMap() {\n\tif (!_map) _map = createMap()\n\treturn _map!\n}\n\nexport function setStringToIdbSortableMap(map: Map<string, number>) {\n\t_map = map\n}\n\nexport function stringToIdbSortable(\n\ts: string,\n\t{ reverse }: { reverse?: boolean } = {},\n) {\n\tconst map = getStringToIdbSortableMap()\n\ts = s.toLocaleLowerCase()\n\treturn s.replace(/./g, match => {\n\t\tlet index = map.get(match)\n\t\tif (!isNumber(index)) {\n\t\t\tindex = firstNonLetterIndex + match.charCodeAt(0)\n\t\t}\n\t\tif (reverse) {\n\t\t\tindex = 0xffff - index\n\t\t}\n\t\treturn String.fromCharCode(index)\n\t})\n}\n","export const DEFAULT_COUNT = 1\nexport const PROGRESS_CHARACTER = '⌚'\nexport const QUESTIONS_CHARACTER = '▶️'\nexport const WARNING_CHARACTER = '⚠️'\nexport const ERROR_CHARACTER = '❌'\nexport const MIN_KEY = -Infinity\nexport const MAX_KEY = [[]]\nexport const MIN_MAX_RANGE: readonly [typeof MIN_KEY, typeof MAX_KEY] = [\n\tMIN_KEY,\n\tMAX_KEY,\n]\n","export function dateToString(d: Date): string {\n\tconst year = d.getFullYear()\n\tconst month = (d.getMonth() + 1 + '').padStart(2, '0')\n\tconst date = (d.getDate() + '').padStart(2, '0')\n\treturn `${year}-${month}-${date}`\n}\n","import { stringToIdbSortable } from '../function/stringToIdbSortable'\nimport { ExportedWord, Word1, WordFromAndroid } from './Word'\n\nexport interface Dictionary {\n\tid?: number\n\tname: string\n\tlanguage0: string\n\tlanguage1: string\n}\n\nexport interface ExportedDictionary {\n\tversion: 1\n\tname: string\n\tlanguage0: string\n\tlanguage1: string\n\twords: readonly ExportedWord[]\n}\n\nexport interface DbDictionary extends Dictionary {\n\tnameForSort: string\n\tlanguage0ForSort: string\n\tlanguage1ForSort: string\n}\n\nexport interface Dictionary1 {\n\tid?: number\n\tname: string\n\tlang1Name: string\n\tlang2Name: string\n\twords: Word1[]\n}\n\nexport interface DictionaryFromAndroid {\n\tname: string\n\tfirstLanguageName: string\n\tsecondLanguageName: string\n\twords: WordFromAndroid[]\n}\n\nexport function dictionaryToDb(o: Dictionary): DbDictionary {\n\treturn {\n\t\t...(o.id && { id: o.id }),\n\t\tlanguage0: o.language0,\n\t\tlanguage1: o.language1,\n\t\tname: o.name,\n\t\tnameForSort: stringToIdbSortable(o.name),\n\t\tlanguage0ForSort: stringToIdbSortable(o.language0),\n\t\tlanguage1ForSort: stringToIdbSortable(o.language1),\n\t}\n}\n\nexport function dictionaryFromDb(o: DbDictionary): Dictionary {\n\treturn {\n\t\tid: o.id,\n\t\tlanguage0: o.language0,\n\t\tlanguage1: o.language1,\n\t\tname: o.name,\n\t}\n}\n","import { IDBPTransaction } from 'idb'\nimport { Dictionary, dictionaryToDb } from '../model/Dictionary'\nimport { Db, getDb, STORE_DICTIONARIES } from './Db'\n\nexport async function storeDictionary({\n\tt = getDb().transaction([STORE_DICTIONARIES], 'readwrite'),\n\tdictionary,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionary: Dictionary\n}) {\n\tif (dictionary.id == null) delete dictionary.id\n\tconst dictionariesStore = t.objectStore(STORE_DICTIONARIES)\n\treturn dictionariesStore.put(dictionaryToDb(dictionary))\n}\n","import { stringToIdbSortable } from '../function/stringToIdbSortable'\n\nexport interface Translation {\n\ttext: string\n\tdescription: string\n\tcount: number\n}\n\nexport interface DbTranslation extends Translation {\n\ttextForSort: string\n\tdescriptionForSort: string\n\tcountForSort: number\n}\n\nexport function translationToDb(t: Translation): DbTranslation {\n\treturn {\n\t\ttext: t.text,\n\t\tcount: t.count,\n\t\tdescription: t.description,\n\t\ttextForSort: stringToIdbSortable(t.text),\n\t\tdescriptionForSort: stringToIdbSortable(t.description),\n\t\tcountForSort: t.count > 0 ? 0 : 1,\n\t}\n}\n\nexport function translationFromDb(t: DbTranslation): Translation {\n\treturn {\n\t\ttext: t.text,\n\t\tcount: t.count,\n\t\tdescription: t.description,\n\t}\n}\n","import { stringToIdbSortable } from '../function/stringToIdbSortable'\nimport {\n\tDbTranslation,\n\tTranslation,\n\ttranslationFromDb,\n\ttranslationToDb,\n} from './Translation'\n\nexport interface Word {\n\tid?: number\n\tdictionaryId: number\n\ttranslation0: Translation\n\ttranslation1: Translation\n\tmodifiedDate: string\n}\n\nexport interface DbWord {\n\tid?: number\n\tdictionaryId: number\n\ttranslation0: DbTranslation\n\ttranslation1: DbTranslation\n\tmodifiedDate: string\n\tmodifiedDateForSort: string\n\tcountForSort: number\n}\n\nexport interface ExportedWord {\n\ttranslation0: Translation\n\ttranslation1: Translation\n\tmodifiedDate: string\n}\n\nexport interface Word1 {\n\tlang1: string\n\tlang2: string\n\tlang1Count: number\n\tlang2Count: number\n}\n\nexport interface WordFromAndroid {\n\tinFirstLanguage: string\n\tfirstLanguageComment: string\n\tinSecondLanguage: string\n\tsecondLanguageComment: string\n}\n\nexport function wordToDb(w: Word): DbWord {\n\tconst translation0 = translationToDb(w.translation0)\n\tconst translation1 = translationToDb(w.translation1)\n\treturn {\n\t\t...(w.id && { id: w.id }),\n\t\tdictionaryId: w.dictionaryId,\n\t\ttranslation0,\n\t\ttranslation1,\n\t\tmodifiedDate: w.modifiedDate,\n\t\tmodifiedDateForSort: stringToIdbSortable(w.modifiedDate, {\n\t\t\treverse: true,\n\t\t}),\n\t\tcountForSort:\n\t\t\ttranslation0.countForSort === 0 || translation1.countForSort === 0\n\t\t\t\t? 0\n\t\t\t\t: 1,\n\t}\n}\n\nexport function wordFromDb(w: DbWord): Word {\n\treturn {\n\t\tid: w.id,\n\t\tdictionaryId: w.dictionaryId,\n\t\ttranslation0: translationFromDb(w.translation0),\n\t\ttranslation1: translationFromDb(w.translation1),\n\t\tmodifiedDate: w.modifiedDate,\n\t}\n}\n","import { IDBPTransaction } from 'idb'\nimport { Word, wordToDb } from '../model/Word'\nimport { Db, getDb, STORE_WORDS } from './Db'\n\nexport function storeWord({\n\tt = getDb().transaction([STORE_WORDS], 'readwrite'),\n\tword,\n}: {\n\tt?: IDBPTransaction<Db>\n\tword: Word\n}) {\n\tif (word.id == null) delete word.id\n\treturn t.objectStore(STORE_WORDS).put(wordToDb(word))\n}\n","import { DBSchema, IDBPDatabase, IDBPTransaction, openDB } from 'idb'\nimport { dateToString } from '../function/dateToString'\nimport { getStringToIdbSortableMap } from '../function/stringToIdbSortable'\nimport { DbDictionary, Dictionary1 } from '../model/Dictionary'\nimport { DbWord } from '../model/Word'\nimport { storeDictionary } from './storeDictionary'\nimport { storeWord } from './storeWord'\n\nexport const DB_NAME = 'mag'\n\nexport const DEPRECATED_STORE_WORDLISTS = 'wordlists'\n\nexport const STORE_DICTIONARIES = 'dictionaries'\nexport const INDEX_DICTIONARIES_NAME = 'name'\nexport const INDEX_DICTIONARIES_LANGUAGE_0 = 'language0'\nexport const INDEX_DICTIONARIES_LANGUAGE_1 = 'language1'\n\nexport const STORE_WORDS = 'words'\nexport const INDEX_WORDS_COUNT_0 = 'count0'\nexport const INDEX_WORDS_COUNT_1 = 'count1'\nexport const INDEX_WORDS_TRANSLATION_0 = 'translation0'\nexport const INDEX_WORDS_TRANSLATION_1 = 'translation1'\nexport const INDEX_WORDS_MODIFIED_DATE_0 = 'modifiedDateForSort0'\nexport const INDEX_WORDS_MODIFIED_DATE_1 = 'modifiedDateForSort1'\nexport const INDEX_WORDS_COUNT_TRANSLATION_0 = 'countTranslation0'\nexport const INDEX_WORDS_COUNT_TRANSLATION_1 = 'countTranslation1'\n\nexport const STORE_SETTINGS = 'settings'\nexport const KEY_SETTINGS_STRING_TO_IDB_SORTABLE_MAP = 'stringToIdbSortableMap'\n\nexport interface Db extends DBSchema {\n\tdictionaries: {\n\t\tkey: number\n\t\tvalue: DbDictionary\n\t\tindexes: {\n\t\t\t[INDEX_DICTIONARIES_NAME]: string\n\t\t\t[INDEX_DICTIONARIES_LANGUAGE_0]: string\n\t\t\t[INDEX_DICTIONARIES_LANGUAGE_1]: string\n\t\t}\n\t}\n\twords: {\n\t\tkey: number\n\t\tvalue: DbWord\n\t\tindexes: {\n\t\t\t[INDEX_WORDS_COUNT_0]: [number, number]\n\t\t\t[INDEX_WORDS_COUNT_1]: [number, number]\n\t\t\t[INDEX_WORDS_TRANSLATION_0]: [number, string, string]\n\t\t\t[INDEX_WORDS_TRANSLATION_1]: [number, string, string]\n\t\t\t[INDEX_WORDS_MODIFIED_DATE_0]: [\n\t\t\t\tnumber,\n\t\t\t\tstring,\n\t\t\t\tnumber,\n\t\t\t\tstring,\n\t\t\t\tstring,\n\t\t\t]\n\t\t\t[INDEX_WORDS_MODIFIED_DATE_1]: [\n\t\t\t\tnumber,\n\t\t\t\tstring,\n\t\t\t\tnumber,\n\t\t\t\tstring,\n\t\t\t\tstring,\n\t\t\t]\n\t\t\t[INDEX_WORDS_COUNT_TRANSLATION_0]: [number, number, string, string]\n\t\t\t[INDEX_WORDS_COUNT_TRANSLATION_1]: [number, number, string, string]\n\t\t}\n\t}\n\tsettings: {\n\t\tkey: string\n\t\tvalue: any\n\t}\n}\n\nexport interface Db1 extends DBSchema {\n\twordlists: {\n\t\tkey: number\n\t\tvalue: Dictionary1\n\t\tindexes: {\n\t\t\tname: string\n\t\t}\n\t}\n}\n\nlet db: IDBPDatabase<Db> | null = null\n\nexport function getDb() {\n\tif (!db) throw new Error(`[pye4b8]`)\n\treturn db\n}\n\nexport async function initDb(showMessage: (message: any) => void) {\n\tdb = await openDB<Db>(DB_NAME, 2, {\n\t\tasync upgrade(db, oldVersion, newVersion, t) {\n\t\t\ttry {\n\t\t\t\tif (oldVersion < 2) {\n\t\t\t\t\tawait createDb2(t)\n\t\t\t\t}\n\t\t\t\tswitch (oldVersion) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tawait upgradeDb1To2((t as unknown) as IDBPTransaction<\n\t\t\t\t\t\t\tDb1 | Db\n\t\t\t\t\t\t>)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tshowMessage(e)\n\t\t\t}\n\t\t},\n\t\tblocked() {\n\t\t\tshowMessage(\n\t\t\t\t`[pycho4] Az adatbázist nem tudom a szükséges szintre fejleszteni, mert egy másik fülön nyitva van.`,\n\t\t\t)\n\t\t},\n\t\tblocking() {\n\t\t\tshowMessage(\n\t\t\t\t`[pychpy] Egy másik fül szeretné az adatbázist fejleszteni, de nem képes rá, mert ez a fül nyitva van.`,\n\t\t\t)\n\t\t},\n\t})\n\treturn db\n}\n\nasync function createDb2(t: IDBPTransaction<Db>) {\n\tconst dictionariesStore = t.db.createObjectStore(STORE_DICTIONARIES, {\n\t\tkeyPath: 'id',\n\t\tautoIncrement: true,\n\t})\n\tdictionariesStore.createIndex(INDEX_DICTIONARIES_NAME, 'nameForSort', {\n\t\tunique: true,\n\t})\n\tdictionariesStore.createIndex(\n\t\tINDEX_DICTIONARIES_LANGUAGE_0,\n\t\t'language0ForSort',\n\t)\n\tdictionariesStore.createIndex(\n\t\tINDEX_DICTIONARIES_LANGUAGE_1,\n\t\t'language1ForSort',\n\t)\n\n\tconst wordsStore = t.db.createObjectStore(STORE_WORDS, {\n\t\tkeyPath: 'id',\n\t\tautoIncrement: true,\n\t})\n\twordsStore.createIndex(INDEX_WORDS_COUNT_0, [\n\t\t'dictionaryId',\n\t\t'translation0.countForSort',\n\t])\n\twordsStore.createIndex(INDEX_WORDS_COUNT_1, [\n\t\t'dictionaryId',\n\t\t'translation1.countForSort',\n\t])\n\twordsStore.createIndex(INDEX_WORDS_MODIFIED_DATE_0, [\n\t\t'dictionaryId',\n\t\t'modifiedDateForSort',\n\t\t'countForSort',\n\t\t'translation0.textForSort',\n\t\t'translation0.descriptionForSort',\n\t])\n\twordsStore.createIndex(INDEX_WORDS_MODIFIED_DATE_1, [\n\t\t'dictionaryId',\n\t\t'modifiedDateForSort',\n\t\t'countForSort',\n\t\t'translation1.textForSort',\n\t\t'translation1.descriptionForSort',\n\t])\n\twordsStore.createIndex(INDEX_WORDS_COUNT_TRANSLATION_0, [\n\t\t'dictionaryId',\n\t\t'countForSort',\n\t\t'translation0.textForSort',\n\t\t'translation0.descriptionForSort',\n\t])\n\twordsStore.createIndex(INDEX_WORDS_COUNT_TRANSLATION_1, [\n\t\t'dictionaryId',\n\t\t'countForSort',\n\t\t'translation1.textForSort',\n\t\t'translation1.descriptionForSort',\n\t])\n\twordsStore.createIndex(\n\t\tINDEX_WORDS_TRANSLATION_0,\n\t\t['dictionaryId', 'translation0.text', 'translation0.description'],\n\t\t{\n\t\t\tunique: true,\n\t\t},\n\t)\n\twordsStore.createIndex(\n\t\tINDEX_WORDS_TRANSLATION_1,\n\t\t['dictionaryId', 'translation1.text', 'translation1.description'],\n\t\t{\n\t\t\tunique: true,\n\t\t},\n\t)\n\n\tconst settingsStore = t.db.createObjectStore(STORE_SETTINGS)\n\tsettingsStore.put(\n\t\tgetStringToIdbSortableMap(),\n\t\tKEY_SETTINGS_STRING_TO_IDB_SORTABLE_MAP,\n\t)\n}\n\nasync function upgradeDb1To2(t: IDBPTransaction<Db1 | Db>) {\n\tconst wordlistsStore = t.objectStore(DEPRECATED_STORE_WORDLISTS)\n\tlet cursor = await wordlistsStore.openCursor()\n\twhile (cursor) {\n\t\tconst dictionary1 = cursor.value\n\t\tconst dictionaryId = await storeDictionary({\n\t\t\tt: t as IDBPTransaction<Db>,\n\t\t\tdictionary: {\n\t\t\t\tname: dictionary1.name,\n\t\t\t\tlanguage0: dictionary1.lang1Name,\n\t\t\t\tlanguage1: dictionary1.lang2Name,\n\t\t\t},\n\t\t})\n\t\tfor (const word1 of dictionary1.words) {\n\t\t\tawait storeWord({\n\t\t\t\tt: t as IDBPTransaction<Db>,\n\t\t\t\tword: {\n\t\t\t\t\tdictionaryId,\n\t\t\t\t\tmodifiedDate: dateToString(new Date()),\n\t\t\t\t\ttranslation0: {\n\t\t\t\t\t\ttext: word1.lang1,\n\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\tcount: word1.lang1Count,\n\t\t\t\t\t},\n\t\t\t\t\ttranslation1: {\n\t\t\t\t\t\ttext: word1.lang2,\n\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\tcount: word1.lang2Count,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t})\n\t\t}\n\t\tcursor = await cursor.continue()\n\t}\n\tt.db.deleteObjectStore(DEPRECATED_STORE_WORDLISTS)\n}\n","import { Dictionary } from '../model/Dictionary'\n\nexport function dictionaryToString(dictionary: Dictionary): string {\n\treturn `${dictionary.name} (${dictionary.language0}, ${dictionary.language1})`\n}\n","import { IDBPTransaction } from 'idb'\nimport { dictionaryFromDb } from '../model/Dictionary'\nimport { Db, getDb, STORE_DICTIONARIES } from './Db'\n\nexport async function readDictionaryById({\n\tt = getDb().transaction([STORE_DICTIONARIES], 'readonly'),\n\tid,\n}: {\n\tt?: IDBPTransaction<Db>\n\tid: number\n}) {\n\tconst dictionary = await t.objectStore(STORE_DICTIONARIES).get(id)\n\treturn dictionary && dictionaryFromDb(dictionary)\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { Dictionary } from '../model/Dictionary'\nimport { TLoadable } from '../model/TLoadable'\nimport { readDictionaryById } from '../storage/readDictionaryById'\n\nexport function useDictionary(dictionaryId: number | null) {\n\tconst [$dictionary, set$dictionary] = useState<\n\t\tTLoadable<{ current: Dictionary | undefined }>\n\t>(null)\n\tconst loadDictionary = useCallback(() => {\n\t\tif (dictionaryId == null) {\n\t\t\tset$dictionary({ current: undefined })\n\t\t} else {\n\t\t\tlet aborted = false\n\t\t\tset$dictionary(Date.now())\n\t\t\treadDictionaryById({ id: dictionaryId })\n\t\t\t\t.then(dictionary => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$dictionary({ current: dictionary })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tset$dictionary(e + '')\n\t\t\t\t})\n\t\t\treturn () => {\n\t\t\t\taborted = true\n\t\t\t}\n\t\t}\n\t}, [dictionaryId])\n\treturn {\n\t\t$dictionary,\n\t\tset$dictionary,\n\t\tloadDictionary,\n\t}\n}\n","import { MIN_MAX_RANGE } from '../model/constants'\nimport { TKeyLimits } from '../model/TKeyLimits'\n\nexport function makeKeyRangeWordsCount({\n\tdictionaryId,\n\tcountForSort = MIN_MAX_RANGE,\n}: {\n\tdictionaryId: number\n\tcountForSort?: TKeyLimits<number>\n}) {\n\treturn IDBKeyRange.bound(\n\t\t[dictionaryId, countForSort[0]],\n\t\t[dictionaryId, countForSort[1]],\n\t)\n}\n","import { IDBPTransaction } from 'idb/build/esm/entry'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_COUNT_0,\n\tINDEX_WORDS_COUNT_1,\n\tSTORE_WORDS,\n} from './Db'\nimport { makeKeyRangeWordsCount } from './makeKeyRangeWordsCount'\n\nexport async function countNumberOfQuestions({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tdictionaryId,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n}): Promise<number> {\n\tconst wordsStore = t.objectStore(STORE_WORDS)\n\tconst index0 = wordsStore.index(INDEX_WORDS_COUNT_0)\n\tconst index1 = wordsStore.index(INDEX_WORDS_COUNT_1)\n\tconst count0 = await index0.count(\n\t\tmakeKeyRangeWordsCount({ dictionaryId, countForSort: [0, 0] }),\n\t)\n\tconst count1 = await index1.count(\n\t\tmakeKeyRangeWordsCount({ dictionaryId, countForSort: [0, 0] }),\n\t)\n\treturn count0 + count1\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { TLoadable } from '../model/TLoadable'\nimport { countNumberOfQuestions } from '../storage/countNumberOfQuestions'\n\nexport function useNumberOfQuestions(dictionaryId: number | null) {\n\tconst [$numberOfQuestions, set$numberOfQuestions] = useState<\n\t\tTLoadable<{ current: number }>\n\t>(null)\n\tconst loadNumberOfQuestions = useCallback(() => {\n\t\tif (dictionaryId == null) {\n\t\t\tset$numberOfQuestions(0)\n\t\t} else {\n\t\t\tlet aborted = false\n\t\t\tset$numberOfQuestions(Date.now())\n\t\t\tcountNumberOfQuestions({ dictionaryId })\n\t\t\t\t.then(count => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$numberOfQuestions({ current: count })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$numberOfQuestions(e + '')\n\t\t\t\t})\n\t\t\treturn () => {\n\t\t\t\taborted = true\n\t\t\t}\n\t\t}\n\t}, [dictionaryId])\n\treturn { $numberOfQuestions, set$numberOfQuestions, loadNumberOfQuestions }\n}\n","import { useEffect } from 'react'\n\nexport function usePageTitle(title: string) {\n\tuseEffect(() => {\n\t\tdocument.title = `${title} :: Mag`\n\t}, [title])\n}\n","import { createContext } from 'react'\n\nexport const ShowMessageContext = createContext((message: any) => {})\n","export interface ReadItemsSource<T> {\n\tcount(key?: IDBKeyRange): Promise<number>\n\topenCursor(range?: IDBKeyRange): Promise<ReadItemsCursor<T> | null>\n}\n\nexport interface ReadItemsCursor<T> {\n\tvalue: T\n\tcontinue(): Promise<ReadItemsCursor<T> | null>\n}\n\nexport interface CountItemsParams<T> extends CountItemsPagingParams<T> {\n\tsource: ReadItemsSource<T>\n}\n\nexport interface CountItemsPagingParams<T> {\n\tfilter?: (item: T) => boolean\n\trange?: IDBKeyRange\n}\n\nexport async function countItems<T>({\n\tsource,\n\tfilter,\n\trange,\n}: CountItemsParams<T>): Promise<number> {\n\tif (!filter) {\n\t\treturn source.count(range)\n\t}\n\tlet result: number = 0\n\tlet cursor = await source.openCursor(range)\n\tif (cursor) {\n\t\twhile (cursor) {\n\t\t\tif (filter(cursor.value)) {\n\t\t\t\tresult++\n\t\t\t}\n\t\t\tcursor = await cursor.continue()\n\t\t}\n\t}\n\treturn result\n}\n","import { MIN_MAX_RANGE } from '../model/constants'\nimport { TKeyLimits } from '../model/TKeyLimits'\n\nexport function makeKeyRangeWordsModifiedDate({\n\tdictionaryId,\n\tmodifiedDateForSort = MIN_MAX_RANGE,\n\tcountForSort = MIN_MAX_RANGE,\n\ttextForSort = MIN_MAX_RANGE,\n\tdescriptionForSort = MIN_MAX_RANGE,\n}: {\n\tdictionaryId: number\n\tmodifiedDateForSort?: TKeyLimits<string>\n\tcountForSort?: TKeyLimits<number>\n\ttextForSort?: TKeyLimits<string>\n\tdescriptionForSort?: TKeyLimits<string>\n}) {\n\treturn IDBKeyRange.bound(\n\t\t[\n\t\t\tdictionaryId,\n\t\t\tmodifiedDateForSort[0],\n\t\t\tcountForSort[0],\n\t\t\ttextForSort[0],\n\t\t\tdescriptionForSort[0],\n\t\t],\n\t\t[\n\t\t\tdictionaryId,\n\t\t\tmodifiedDateForSort[1],\n\t\t\tcountForSort[1],\n\t\t\ttextForSort[1],\n\t\t\tdescriptionForSort[1],\n\t\t],\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { DbWord } from '../model/Word'\nimport { countItems } from './countItems'\nimport { Db, getDb, INDEX_WORDS_MODIFIED_DATE_0, STORE_WORDS } from './Db'\nimport { makeKeyRangeWordsModifiedDate } from './makeKeyRangeWordsModifiedDate'\n\nexport async function countWordsByDictionaryId({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tdictionaryId,\n\tfilter,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n\tfilter?: (item: DbWord) => boolean\n}): Promise<number> {\n\tconst dictionaryIdIndex = t\n\t\t.objectStore(STORE_WORDS)\n\t\t.index(INDEX_WORDS_MODIFIED_DATE_0)\n\treturn countItems({\n\t\tsource: dictionaryIdIndex,\n\t\trange: makeKeyRangeWordsModifiedDate({ dictionaryId }),\n\t\tfilter,\n\t})\n}\n","import { useContext, useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { ShowMessageContext } from '../comp/ShowMessageContext'\nimport { TLoadable } from '../model/TLoadable'\nimport { DbWord } from '../model/Word'\nimport { countWordsByDictionaryId } from '../storage/countWordsByDictionaryId'\n\nexport function useWordCountByDictionaryId({\n\tdictionaryId,\n\tfilter,\n}: {\n\tdictionaryId: number | null\n\tfilter?: (word: DbWord) => boolean\n}) {\n\tconst [$wordCount, set$wordCount] = useState<\n\t\tTLoadable<{ current: number }>\n\t>(null)\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst loadWordCount = useCallback(() => {\n\t\tif (dictionaryId == null) {\n\t\t\tset$wordCount({ current: 0 })\n\t\t} else {\n\t\t\tlet aborted = false\n\t\t\tset$wordCount(Date.now())\n\t\t\tcountWordsByDictionaryId({ dictionaryId, filter })\n\t\t\t\t.then(count => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$wordCount({ current: count })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tshowMessage(e)\n\t\t\t\t\tset$wordCount(e + '')\n\t\t\t\t})\n\t\t\treturn () => {\n\t\t\t\taborted = true\n\t\t\t}\n\t\t}\n\t}, [dictionaryId, filter, showMessage])\n\treturn { $wordCount, set$wordCount, loadWordCount }\n}\n","import { isNumber, isString } from 'util'\n\nexport type TLoadable<T extends object> = T | null | number | string\n\nexport function isLoaded<T extends object>(o: TLoadable<T>): o is T {\n\treturn o != null && !isNumber(o) && !isString(o)\n}\n\nexport function hasNotStartedLoading(o: TLoadable<any>): o is null {\n\treturn o === null\n}\n\nexport function isLoading(o: TLoadable<any>): o is number {\n\treturn isNumber(o)\n}\n\nexport function hasLoadError(o: TLoadable<any>): o is string {\n\treturn isString(o)\n}\n","import { IDBPTransaction } from 'idb'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_COUNT_0,\n\tSTORE_DICTIONARIES,\n\tSTORE_WORDS,\n} from './Db'\nimport { makeKeyRangeWordsCount } from './makeKeyRangeWordsCount'\n\nexport async function deleteDictionary({\n\tt = getDb().transaction([STORE_DICTIONARIES, STORE_WORDS], 'readwrite'),\n\tdictionaryId,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n}) {\n\tconst wordsIndex = t.objectStore(STORE_WORDS).index(INDEX_WORDS_COUNT_0)\n\tlet wordCursor = await wordsIndex.openCursor(\n\t\tmakeKeyRangeWordsCount({ dictionaryId }),\n\t)\n\twhile (wordCursor) {\n\t\twordCursor.delete()\n\t\twordCursor = await wordCursor.continue()\n\t}\n\tconst dictionaryStore = t.objectStore(STORE_DICTIONARIES)\n\tdictionaryStore.delete(dictionaryId)\n}\n","import React, { PropsWithChildren } from 'react'\nimport styles from './RowComp.module.css'\n\nexport interface RowCompProps {\n\t_isVertical?: boolean\n\t_gap?: 0 | 1 | 5 | 10 | 20\n\t_padding?: 0 | 1 | 5 | 10 | 20\n\t_fill?: boolean\n\t_wrap?: boolean\n}\n\nexport function RowComp({\n\tchildren,\n\t_isVertical,\n\t_gap,\n\t_padding,\n\t_fill,\n\t_wrap,\n}: PropsWithChildren<RowCompProps>) {\n\treturn (\n\t\t<div\n\t\t\tclassName={[\n\t\t\t\tstyles.wrapper,\n\t\t\t\t_isVertical ? styles.columnWrapper : styles.rowWrapper,\n\t\t\t\t_fill && styles.wrapperFill,\n\t\t\t\t_padding ? styles[`padding${_padding}`] : styles.padding0,\n\t\t\t]\n\t\t\t\t.filter(Boolean)\n\t\t\t\t.join(' ')}\n\t\t>\n\t\t\t<div\n\t\t\t\tclassName={[\n\t\t\t\t\t_isVertical ? styles.column : styles.row,\n\t\t\t\t\t_fill && styles.fill,\n\t\t\t\t\t_wrap && styles.wrap,\n\t\t\t\t\t_gap ? styles[`gap${_gap}`] : styles.gap0,\n\t\t\t\t]\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t.join(' ')}\n\t\t\t>\n\t\t\t\t{children}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n","import React, { PropsWithChildren } from 'react'\nimport { RowComp } from './RowComp'\n\nexport interface ButtonRowCompProps {}\n\nexport function ButtonRowComp(props: PropsWithChildren<ButtonRowCompProps>) {\n\treturn (\n\t\t<RowComp _gap={5} _wrap _fill>\n\t\t\t{props.children}\n\t\t</RowComp>\n\t)\n}\n","import React, { PropsWithChildren } from 'react'\nimport { RowComp } from './RowComp'\n\nexport interface ContentRowCompProps {}\n\nexport function ContentRowComp(props: PropsWithChildren<ContentRowCompProps>) {\n\treturn (\n\t\t<RowComp _isVertical _gap={10}>\n\t\t\t{props.children}\n\t\t</RowComp>\n\t)\n}\n","import React from 'react'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { Dictionary } from '../model/Dictionary'\n\nexport interface DictionaryCompProps {\n\t_dictionary: Dictionary\n}\n\nexport function DictionaryComp({ _dictionary }: DictionaryCompProps) {\n\treturn <>{dictionaryToString(_dictionary)}</>\n}\n","import React, { useEffect } from 'react'\n\nexport interface FocusRefCompProps<T extends HTMLElement> {\n\t_focusThis: React.RefObject<T | null | undefined>\n}\n\nexport function FocusRefComp<T extends HTMLElement>({\n\t_focusThis,\n}: FocusRefCompProps<T>) {\n\tuseEffect(() => {\n\t\tif (_focusThis.current) {\n\t\t\t_focusThis.current.focus()\n\t\t}\n\t}, [_focusThis])\n\treturn <></>\n}\n","import React, { ReactNode, useEffect, useRef } from 'react'\nimport { usePrevious } from '../hook/usePrevious'\nimport { PROGRESS_CHARACTER } from '../model/constants'\nimport {\n\thasLoadError,\n\thasNotStartedLoading,\n\tisLoaded,\n\tisLoading,\n\tTLoadable,\n} from '../model/TLoadable'\n\nexport interface LoadableCompProps<T extends object> {\n\t_value: TLoadable<T>\n\t_load?: () => (() => void) | void\n\t_debugName?: string\n\tchildren: (value: T) => ReactNode\n}\n\nexport function LoadableComp<T extends object>({\n\t_value,\n\t_load,\n\t_debugName,\n\tchildren,\n}: LoadableCompProps<T>) {\n\tconst previousLoad = usePrevious(_load)\n\tconst loadChanged = _load !== previousLoad\n\tconst valueIsLoadingAt = useRef(0)\n\tconst hadNotStartedLoading = useRef(false)\n\tconst valueNeedsLoadingAt =\n\t\t_load &&\n\t\t(loadChanged ||\n\t\t\t(!hadNotStartedLoading.current && hasNotStartedLoading(_value)))\n\t\t\t? Date.now()\n\t\t\t: valueIsLoadingAt.current\n\tif (hadNotStartedLoading.current && hasNotStartedLoading(_value)) {\n\t\tconsole.warn(`[pyfh9t] Már töltöm: ${_debugName}`)\n\t}\n\thadNotStartedLoading.current = hasNotStartedLoading(_value)\n\tuseEffect(() => {\n\t\tif (_load) {\n\t\t\tvalueIsLoadingAt.current = valueNeedsLoadingAt\n\t\t\treturn _load()\n\t\t}\n\t}, [_load, _debugName, valueNeedsLoadingAt, valueIsLoadingAt])\n\treturn (\n\t\t<React.Fragment>\n\t\t\t{!loadChanged && isLoaded(_value) && children(_value)}\n\t\t\t{(loadChanged ||\n\t\t\t\thasNotStartedLoading(_value) ||\n\t\t\t\tisLoading(_value)) &&\n\t\t\t\tPROGRESS_CHARACTER}\n\t\t\t{hasLoadError(_value) && (\n\t\t\t\t<span style={{ color: `#bf0000` }}>{_value}</span>\n\t\t\t)}\n\t\t</React.Fragment>\n\t)\n}\n","import { useEffect, useRef } from 'react'\n\nexport function usePrevious<T>(value: T): T | undefined {\n\tconst ref = useRef<T>()\n\tuseEffect(() => {\n\t\tref.current = value\n\t})\n\treturn ref.current\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport interface UnknownDictionaryCompProps {}\n\nexport function UnknownDictionaryComp(props: UnknownDictionaryCompProps) {\n\treturn (\n\t\t<>\n\t\t\t<h1>Ismeretlen szótár</h1>\n\t\t\t<p>\n\t\t\t\tEz a szótár nem létezik.{' '}\n\t\t\t\t<Link to='/'>Menj vissza a kezdőoldalra</Link>, és válassz egy\n\t\t\t\tmásikat!\n\t\t\t</p>\n\t\t</>\n\t)\n}\n","import React, { useContext, useRef } from 'react'\nimport { useHistory, useRouteMatch } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { useDictionary } from '../hook/useDictionary'\nimport { useNumberOfQuestions } from '../hook/useNumberOfQuestions'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { useWordCountByDictionaryId } from '../hook/useWordCountByDictionaryId'\nimport { isLoaded } from '../model/TLoadable'\nimport { deleteDictionary } from '../storage/deleteDictionary'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryComp } from './DictionaryComp'\nimport { FocusRefComp } from './FocusRefComp'\nimport { LoadableComp } from './LoadableComp'\nimport { ShowMessageContext } from './ShowMessageContext'\nimport { UnknownDictionaryComp } from './UnknownDictionaryComp'\n\nexport interface DictionaryPageProps {}\n\nexport function DictionaryPage(props: DictionaryPageProps) {\n\tconst history = useHistory()\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string }>(\n\t\t'/dictionary/:dictionaryId/',\n\t)\n\tconst dictionaryId = routeMatch\n\t\t? parseInt(routeMatch.params.dictionaryId, 10)\n\t\t: null\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst { $numberOfQuestions, loadNumberOfQuestions } = useNumberOfQuestions(\n\t\tdictionaryId,\n\t)\n\tconst { $wordCount, loadWordCount } = useWordCountByDictionaryId({\n\t\tdictionaryId,\n\t})\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst askLinkRef = useRef<HTMLAnchorElement>(null)\n\tconst addAWordLinkRef = useRef<HTMLAnchorElement>(null)\n\tusePageTitle(\n\t\t!isLoaded($dictionary)\n\t\t\t? `Szótár`\n\t\t\t: $dictionary.current\n\t\t\t? dictionaryToString($dictionary.current)\n\t\t\t: `Ismeretlen szótár`,\n\t)\n\treturn (\n\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t{dictionary =>\n\t\t\t\tdictionary.current ? (\n\t\t\t\t\t<ContentRowComp>\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t<DictionaryComp _dictionary={dictionary.current} />\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<LoadableComp _value={$wordCount} _load={loadWordCount}>\n\t\t\t\t\t\t\t{wordCount =>\n\t\t\t\t\t\t\t\twordCount.current ? (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<LoadableComp\n\t\t\t\t\t\t\t\t\t\t\t_value={$numberOfQuestions}\n\t\t\t\t\t\t\t\t\t\t\t_load={loadNumberOfQuestions}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{numberOfQuestions =>\n\t\t\t\t\t\t\t\t\t\t\t\tnumberOfQuestions.current ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnumberOfQuestions.current\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}{' '}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkérdésem van.\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tGratulálok! Mindet\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tmegtanultad!\n\t\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\tÍme az új szótárad! Először{' '}\n\t\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\t\tto='./word/'\n\t\t\t\t\t\t\t\t\t\t\tinnerRef={addAWordLinkRef}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tadj hozzá szavakat\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t<FocusRefComp\n\t\t\t\t\t\t\t\t\t\t\t_focusThis={addAWordLinkRef}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t, vagy{' '}\n\t\t\t\t\t\t\t\t\t\t<Link to='./import/'>\n\t\t\t\t\t\t\t\t\t\t\ttölts be szavakat!\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t\t\t{isLoaded($numberOfQuestions) &&\n\t\t\t\t\t\t\t\t$numberOfQuestions.current > 0 && (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\t\tto='./learn/'\n\t\t\t\t\t\t\t\t\t\t\tinnerRef={askLinkRef}\n\t\t\t\t\t\t\t\t\t\t\trole='button'\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tKérdezz!\n\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t<FocusRefComp _focusThis={askLinkRef} />\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<Link to='./word/' role='button'>\n\t\t\t\t\t\t\t\tAdj hozzá egy szót\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<Link to='./words/' role='button'>\n\t\t\t\t\t\t\t\tMutasd a szavakat\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<Link to='./export/' role='button'>\n\t\t\t\t\t\t\t\tMentsd ki ezt a szótárat\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<Link to='./import/' role='button'>\n\t\t\t\t\t\t\t\tTölts be szavakat\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<Link to='./edit/' role='button'>\n\t\t\t\t\t\t\t\tMódosítsd ezt a szótárat\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\tdictionaryId != null &&\n\t\t\t\t\t\t\t\t\t\twindow.confirm(\n\t\t\t\t\t\t\t\t\t\t\t`Biztosan törölni akarod ezt a szótárat?`,\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tawait deleteDictionary({\n\t\t\t\t\t\t\t\t\t\t\t\tdictionaryId,\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\thistory.goBack()\n\t\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tTöröld ezt a szótárat\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</ButtonRowComp>\n\t\t\t\t\t</ContentRowComp>\n\t\t\t\t) : (\n\t\t\t\t\t<UnknownDictionaryComp />\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","export function url(\n\tliterals: TemplateStringsArray,\n\t...placeholders: (string | number)[]\n) {\n\tlet result = ''\n\tfor (let i = 0; i < placeholders.length; i++) {\n\t\tresult += literals[i]\n\t\tresult += encodeURIComponent(placeholders[i])\n\t}\n\tresult += literals[literals.length - 1]\n\treturn result\n}\n","export function sanitizeString(s: string): string {\n\treturn s.trim().replace(/\\s+/g, ' ')\n}\n","import { Dictionary } from '../model/Dictionary'\nimport { sanitizeString } from './sanitizeString'\n\nexport function sanitizeDictionary(d: Dictionary): Dictionary {\n\treturn {\n\t\t...(d.id != null && { id: d.id }),\n\t\tname: sanitizeString(d.name),\n\t\tlanguage0: sanitizeString(d.language0),\n\t\tlanguage1: sanitizeString(d.language1),\n\t}\n}\n","import { IDBPTransaction } from 'idb'\nimport { Dictionary, dictionaryToDb } from '../model/Dictionary'\nimport { Db, getDb, INDEX_DICTIONARIES_NAME, STORE_DICTIONARIES } from './Db'\n\nexport class DictionaryNameConflictError extends Error {\n\tconstructor(public dictionary: Dictionary) {\n\t\tsuper('[pyeant] Szótár név ütközés.')\n\t}\n}\n\nexport async function checkForConflictingDictionary({\n\tt = getDb().transaction([STORE_DICTIONARIES], 'readonly'),\n\tdictionary,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionary: Dictionary\n}) {\n\tconst dbDictionary = dictionaryToDb(dictionary)\n\tconst dictionariesStore = t.objectStore(STORE_DICTIONARIES)\n\tconst dictionaryWithSameName = await dictionariesStore\n\t\t.index(INDEX_DICTIONARIES_NAME)\n\t\t.get(dbDictionary.nameForSort)\n\tif (dictionaryWithSameName && dictionaryWithSameName.id !== dictionary.id) {\n\t\tthrow new DictionaryNameConflictError(dictionaryWithSameName)\n\t}\n}\n","import { useMemo } from 'use-memo-one'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded, TLoadable } from '../model/TLoadable'\nimport { useConflictingDictionary } from './useConflictingDictionary'\n\nexport function useDictionaryValidationErrors(\n\tdictionary: Dictionary | null,\n): TLoadable<Error[]> {\n\tconst conflictingDictionary = useConflictingDictionary(dictionary)\n\tconst result: TLoadable<Error[]> = useMemo(() => {\n\t\treturn !isLoaded(conflictingDictionary)\n\t\t\t? conflictingDictionary\n\t\t\t: ([\n\t\t\t\t\tconflictingDictionary.exists &&\n\t\t\t\t\t\tnew Error(`Ezzel a névvel már létezik egy szótár.`),\n\t\t\t\t\tdictionary &&\n\t\t\t\t\t\t!dictionary.name.trim() &&\n\t\t\t\t\t\tnew Error(`A név megadása kötelező.`),\n\t\t\t\t\tdictionary &&\n\t\t\t\t\t\t(!dictionary.language0.trim() ||\n\t\t\t\t\t\t\t!dictionary.language1.trim()) &&\n\t\t\t\t\t\tnew Error(`Mindkét nyelvet el kell nevezned.`),\n\t\t\t\t\tdictionary &&\n\t\t\t\t\t\tdictionary.language0 &&\n\t\t\t\t\t\tdictionary.language0 === dictionary.language1 &&\n\t\t\t\t\t\tnew Error(`A két nyelv neve nem lehet ugyanaz.`),\n\t\t\t  ].filter(Boolean) as Error[])\n\t}, [conflictingDictionary, dictionary])\n\treturn result\n}\n","import { useEffect, useState } from 'react'\nimport { Dictionary } from '../model/Dictionary'\nimport { TLoadable } from '../model/TLoadable'\nimport {\n\tcheckForConflictingDictionary,\n\tDictionaryNameConflictError,\n} from '../storage/checkForConflictingDictionary'\n\nexport function useConflictingDictionary(dictionary: Dictionary | null) {\n\tconst [$conflictingDictionary, set$conflictingDictionary] = useState<\n\t\tTLoadable<{ exists: boolean }>\n\t>(null)\n\tuseEffect(() => {\n\t\tlet isAborted = false\n\t\t;(async () => {\n\t\t\ttry {\n\t\t\t\tif (dictionary) {\n\t\t\t\t\tset$conflictingDictionary(Date.now())\n\t\t\t\t\tawait checkForConflictingDictionary({ dictionary })\n\t\t\t\t\tif (isAborted) return\n\t\t\t\t}\n\t\t\t\tset$conflictingDictionary({ exists: false })\n\t\t\t} catch (e) {\n\t\t\t\tif (isAborted) return\n\t\t\t\tif (e instanceof DictionaryNameConflictError) {\n\t\t\t\t\tset$conflictingDictionary({\n\t\t\t\t\t\texists: true,\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tset$conflictingDictionary(e + '')\n\t\t\t\t}\n\t\t\t}\n\t\t})()\n\t\treturn () => {\n\t\t\tisAborted = true\n\t\t}\n\t}, [dictionary])\n\treturn $conflictingDictionary\n}\n","import React, { PropsWithChildren } from 'react'\nimport { RowComp } from './RowComp'\n\nexport interface FormRowCompProps {}\n\nexport function FormRowComp(props: PropsWithChildren<FormRowCompProps>) {\n\treturn (\n\t\t<RowComp _gap={5} _fill>\n\t\t\t{props.children}\n\t\t</RowComp>\n\t)\n}\n","import React, { PropsWithChildren } from 'react'\nimport styles from './LabelComp.module.css'\n\nexport interface LabelCompProps {\n\t_for?: string\n\t_required?: boolean\n}\n\nexport function LabelComp({\n\t_for,\n\t_required,\n\tchildren,\n}: PropsWithChildren<LabelCompProps>) {\n\treturn (\n\t\t<label htmlFor={_for} className={styles.label}>\n\t\t\t{children}\n\t\t\t{_required && <span className={styles.required}>•</span>}:\n\t\t</label>\n\t)\n}\n","import React from 'react'\nimport { Dictionary } from '../model/Dictionary'\nimport { ContentRowComp } from './ContentRowComp'\nimport { FormRowComp } from './FormRowComp'\nimport { LabelComp } from './LabelComp'\n\nexport interface DictionaryPropsCompProps {\n\t_dictionary: Dictionary\n\t_setDictionary: (v: Dictionary) => void\n}\n\nexport function DictionaryPropsComp({\n\t_dictionary,\n\t_setDictionary,\n}: DictionaryPropsCompProps) {\n\treturn (\n\t\t<ContentRowComp>\n\t\t\t<FormRowComp>\n\t\t\t\t<LabelComp _required>Név</LabelComp>\n\t\t\t\t<input\n\t\t\t\t\tautoFocus\n\t\t\t\t\tvalue={_dictionary.name}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t_setDictionary({ ..._dictionary, name: e.target.value })\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormRowComp>\n\t\t\t<FormRowComp>\n\t\t\t\t<LabelComp _required>Első nyelv neve</LabelComp>\n\t\t\t\t<input\n\t\t\t\t\tvalue={_dictionary.language0}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t_setDictionary({\n\t\t\t\t\t\t\t..._dictionary,\n\t\t\t\t\t\t\tlanguage0: e.target.value,\n\t\t\t\t\t\t})\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormRowComp>\n\t\t\t<FormRowComp>\n\t\t\t\t<LabelComp _required>Második nyelv neve</LabelComp>\n\t\t\t\t<input\n\t\t\t\t\tvalue={_dictionary.language1}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t_setDictionary({\n\t\t\t\t\t\t\t..._dictionary,\n\t\t\t\t\t\t\tlanguage1: e.target.value,\n\t\t\t\t\t\t})\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormRowComp>\n\t\t</ContentRowComp>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { Translation } from '../model/Translation'\nimport { wordFromDb } from '../model/Word'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_TRANSLATION_0,\n\tINDEX_WORDS_TRANSLATION_1,\n\tSTORE_WORDS,\n} from './Db'\n\nexport async function readWordByTranslation({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tdictionaryId,\n\ttranslationIndex,\n\ttranslation,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n\ttranslationIndex: 0 | 1\n\ttranslation: Translation\n}) {\n\tconst wordsStore = t.objectStore(STORE_WORDS)\n\tconst word = await wordsStore\n\t\t.index(\n\t\t\ttranslationIndex === 0\n\t\t\t\t? INDEX_WORDS_TRANSLATION_0\n\t\t\t\t: INDEX_WORDS_TRANSLATION_1,\n\t\t)\n\t\t.get([dictionaryId, translation.text, translation.description])\n\treturn word && wordFromDb(word)\n}\n","import { IDBPTransaction } from 'idb'\nimport { Word } from '../model/Word'\nimport { Db, getDb, STORE_WORDS } from './Db'\nimport { readWordByTranslation } from './readWordByTranslation'\n\nexport class ExistingTranslationError extends Error {\n\tconstructor(public translations: [Word | undefined, Word | undefined]) {\n\t\tsuper('[pyeb4f] Már létező fordítás.')\n\t}\n}\n\nexport async function checkForConflictingWord({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tword,\n}: {\n\tt?: IDBPTransaction<Db>\n\tword: Word\n}) {\n\tconst existingTranslations = await Promise.all([\n\t\treadWordByTranslation({\n\t\t\tt,\n\t\t\tdictionaryId: word.dictionaryId,\n\t\t\ttranslationIndex: 0,\n\t\t\ttranslation: word.translation0,\n\t\t}),\n\t\treadWordByTranslation({\n\t\t\tt,\n\t\t\tdictionaryId: word.dictionaryId,\n\t\t\ttranslationIndex: 1,\n\t\t\ttranslation: word.translation1,\n\t\t}),\n\t])\n\tconst existingTranslationsWithDifferingId = existingTranslations.map(\n\t\tother => (other && other.id !== word.id ? other : undefined),\n\t) as [Word | undefined, Word | undefined]\n\tif (\n\t\texistingTranslationsWithDifferingId[0] ||\n\t\texistingTranslationsWithDifferingId[1]\n\t) {\n\t\tthrow new ExistingTranslationError(existingTranslationsWithDifferingId)\n\t}\n}\n","import React from 'react'\nimport { QUESTIONS_CHARACTER } from '../model/constants'\nimport { Translation } from '../model/Translation'\n\nexport interface TranslationCompProps {\n\t_translation: Translation\n}\n\nexport function TranslationComp({ _translation }: TranslationCompProps) {\n\treturn (\n\t\t<>\n\t\t\t{_translation.count > 0 && `${QUESTIONS_CHARACTER} `}\n\t\t\t{_translation.text}\n\t\t\t{_translation.description && (\n\t\t\t\t<>\n\t\t\t\t\t{' ('}\n\t\t\t\t\t{_translation.description}\n\t\t\t\t\t{')'}\n\t\t\t\t</>\n\t\t\t)}\n\t\t</>\n\t)\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport { Word } from '../model/Word'\nimport { TranslationComp } from './TranslationComp'\n\nexport interface WordCompProps {\n\t_word: Word\n\t_swapTranslations?: boolean\n}\n\nexport function WordComp({ _word, _swapTranslations }: WordCompProps) {\n\treturn (\n\t\t<>\n\t\t\t<Link to={`/dictionary/${_word.dictionaryId}/word/${_word.id}/`}>\n\t\t\t\t<TranslationComp\n\t\t\t\t\t_translation={\n\t\t\t\t\t\t_swapTranslations\n\t\t\t\t\t\t\t? _word.translation1\n\t\t\t\t\t\t\t: _word.translation0\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t\t{` = `}\n\t\t\t\t<TranslationComp\n\t\t\t\t\t_translation={\n\t\t\t\t\t\t_swapTranslations\n\t\t\t\t\t\t\t? _word.translation0\n\t\t\t\t\t\t\t: _word.translation1\n\t\t\t\t\t}\n\t\t\t\t/>\n\t\t\t</Link>\n\t\t</>\n\t)\n}\n","import React from 'react'\nimport { ERROR_CHARACTER } from '../model/constants'\nimport { TLoadable } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport { ExistingTranslationError } from '../storage/checkForConflictingWord'\nimport { LoadableComp } from './LoadableComp'\nimport { WordComp } from './WordComp'\n\nexport interface ErrorsCompProps {\n\t_errors: TLoadable<Error[]>\n}\n\nexport function ErrorsComp({ _errors }: ErrorsCompProps) {\n\treturn (\n\t\t<LoadableComp _value={_errors}>\n\t\t\t{errors =>\n\t\t\t\terrors.length > 0 && (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<p>Hibák:</p>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{errors.map((error, index) => (\n\t\t\t\t\t\t\t\t<li key={index}>\n\t\t\t\t\t\t\t\t\t{error instanceof\n\t\t\t\t\t\t\t\t\tExistingTranslationError ? (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t{ERROR_CHARACTER} Már létező\n\t\t\t\t\t\t\t\t\t\t\tfordítás:{' '}\n\t\t\t\t\t\t\t\t\t\t\t{(error.translations.filter(\n\t\t\t\t\t\t\t\t\t\t\t\tBoolean,\n\t\t\t\t\t\t\t\t\t\t\t) as Word[]).map(\n\t\t\t\t\t\t\t\t\t\t\t\t(translation, index) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<WordComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_word={translation}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t`${ERROR_CHARACTER} ${error.message}`\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</>\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","import React, { useState } from 'react'\nimport { useMemo } from 'use-memo-one'\nimport { sanitizeDictionary } from '../function/sanitizeDictionary'\nimport { useDictionaryValidationErrors } from '../hook/useDictionaryValidationErrors'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded } from '../model/TLoadable'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryPropsComp } from './DictionaryPropsComp'\nimport { ErrorsComp } from './ErrorsComp'\n\nexport interface EditDictionaryCompProps {\n\t_dictionary: Dictionary\n\t_storeDictionary: (d: Dictionary) => void\n}\n\nexport function EditDictionaryComp({\n\t_dictionary,\n\t_storeDictionary,\n}: EditDictionaryCompProps) {\n\tconst [$dictionary, set$dictionary] = useState(_dictionary)\n\tconst sanitizedDictionary = useMemo(() => sanitizeDictionary($dictionary), [\n\t\t$dictionary,\n\t])\n\tconst dictionaryValidationErrors = useDictionaryValidationErrors(\n\t\tsanitizedDictionary,\n\t)\n\tconst touched = !!(\n\t\tsanitizedDictionary.language0 ||\n\t\tsanitizedDictionary.language1 ||\n\t\tsanitizedDictionary.name\n\t)\n\treturn (\n\t\t<form\n\t\t\tonSubmit={async e => {\n\t\t\t\te.preventDefault()\n\t\t\t\t_storeDictionary(sanitizedDictionary)\n\t\t\t}}\n\t\t>\n\t\t\t<ContentRowComp>\n\t\t\t\t<DictionaryPropsComp\n\t\t\t\t\t_dictionary={$dictionary}\n\t\t\t\t\t_setDictionary={set$dictionary}\n\t\t\t\t/>\n\t\t\t\t{touched && <ErrorsComp _errors={dictionaryValidationErrors} />}\n\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t<button\n\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t!isLoaded(dictionaryValidationErrors) ||\n\t\t\t\t\t\t\tdictionaryValidationErrors.length > 0\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\tTárold el\n\t\t\t\t\t</button>\n\t\t\t\t</ButtonRowComp>\n\t\t\t</ContentRowComp>\n\t\t</form>\n\t)\n}\n","import React from 'react'\nimport { useHistory, useRouteMatch } from 'react-router-dom'\nimport { useCallback } from 'use-memo-one'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { url } from '../function/url'\nimport { useDictionary } from '../hook/useDictionary'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded } from '../model/TLoadable'\nimport { storeDictionary } from '../storage/storeDictionary'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryComp } from './DictionaryComp'\nimport { EditDictionaryComp } from './EditDictionaryComp'\nimport { LoadableComp } from './LoadableComp'\n\nexport function EditDictionaryPage() {\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string | undefined }>(\n\t\t`/dictionary/:dictionaryId/edit/`,\n\t)\n\tconst dictionaryId =\n\t\trouteMatch && parseInt(routeMatch.params.dictionaryId + '', 10)\n\tconst history = useHistory()\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst finish = useCallback(\n\t\tasync (dictionary: Dictionary) => {\n\t\t\tconst storedDictionaryId = await storeDictionary({\n\t\t\t\tdictionary,\n\t\t\t})\n\t\t\tif (dictionaryId === storedDictionaryId) {\n\t\t\t\thistory.goBack()\n\t\t\t} else {\n\t\t\t\thistory.replace(url`/dictionary/${storedDictionaryId}/`)\n\t\t\t}\n\t\t},\n\t\t[history, dictionaryId],\n\t)\n\tusePageTitle(\n\t\tisLoaded($dictionary) && $dictionary.current\n\t\t\t? `${dictionaryToString($dictionary.current)} módosítása`\n\t\t\t: `Új szótár`,\n\t)\n\treturn (\n\t\t<>\n\t\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t\t{dictionary => (\n\t\t\t\t\t<ContentRowComp>\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t{dictionary.current ? (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<DictionaryComp\n\t\t\t\t\t\t\t\t\t\t_dictionary={dictionary.current}\n\t\t\t\t\t\t\t\t\t/>{' '}\n\t\t\t\t\t\t\t\t\tmódosítása\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t`Új szótár`\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<EditDictionaryComp\n\t\t\t\t\t\t\t_dictionary={\n\t\t\t\t\t\t\t\tdictionary.current || {\n\t\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\t\tlanguage0: '',\n\t\t\t\t\t\t\t\t\tlanguage1: '',\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t_storeDictionary={finish}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ContentRowComp>\n\t\t\t\t)}\n\t\t\t</LoadableComp>\n\t\t</>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { wordFromDb } from '../model/Word'\nimport { Db, getDb, STORE_WORDS } from './Db'\n\nexport async function readWord({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\twordId,\n}: {\n\tt?: IDBPTransaction<Db>\n\twordId: number\n}) {\n\tconst word = await t.objectStore(STORE_WORDS).get(wordId)\n\treturn word && wordFromDb(word)\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { TLoadable } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport { readWord } from '../storage/readWord'\n\nexport function useWord(wordId: number | null) {\n\tconst [$word, set$word] = useState<\n\t\tTLoadable<{ current: Word | undefined }>\n\t>(null)\n\tconst loadWord = useCallback(() => {\n\t\tif (wordId == null) {\n\t\t\tset$word({ current: undefined })\n\t\t} else {\n\t\t\tlet aborted = false\n\t\t\tset$word(Date.now())\n\t\t\treadWord({ wordId })\n\t\t\t\t.then(word => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$word({ current: word })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tset$word(e + '')\n\t\t\t\t})\n\t\t\treturn () => {\n\t\t\t\taborted = true\n\t\t\t}\n\t\t}\n\t}, [wordId])\n\treturn {\n\t\t$word,\n\t\tset$word,\n\t\tloadWord,\n\t}\n}\n","import { Translation } from '../model/Translation'\nimport { sanitizeString } from './sanitizeString'\n\nexport function sanitizeTranslation(t: Translation): Translation {\n\treturn {\n\t\tcount: t.count,\n\t\ttext: sanitizeString(t.text),\n\t\tdescription: sanitizeString(t.description),\n\t}\n}\n","import { Word } from '../model/Word'\nimport { sanitizeTranslation } from './sanitizeTranslation'\n\nexport function sanitizeWord(w: Word): Word {\n\treturn {\n\t\t...w,\n\t\ttranslation0: sanitizeTranslation(w.translation0),\n\t\ttranslation1: sanitizeTranslation(w.translation1),\n\t}\n}\n","import { useMemo } from 'use-memo-one'\nimport { isLoaded, TLoadable } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport { useExistingTranslationError } from './useExistingTranslationError'\n\nexport function useWordValidationErrors(word: Word | null) {\n\tconst existingTranslationError = useExistingTranslationError(word)\n\tconst result: TLoadable<Error[]> = useMemo(() => {\n\t\treturn !isLoaded(existingTranslationError)\n\t\t\t? existingTranslationError\n\t\t\t: ([\n\t\t\t\t\texistingTranslationError.current,\n\t\t\t\t\tword &&\n\t\t\t\t\t\t(!word.translation0.text.trim() ||\n\t\t\t\t\t\t\t!word.translation1.text.trim()) &&\n\t\t\t\t\t\tnew Error(`Mindkét fordítás megadása kötelező.`),\n\t\t\t  ].filter(Boolean) as Error[])\n\t}, [existingTranslationError, word])\n\treturn result\n}\n","import { useEffect, useState } from 'react'\nimport { TLoadable } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport {\n\tcheckForConflictingWord,\n\tExistingTranslationError,\n} from '../storage/checkForConflictingWord'\n\nexport function useExistingTranslationError(word: Word | null) {\n\tconst [$conflictingTranslations, set$conflictingTranslations] = useState<\n\t\tTLoadable<{ current: ExistingTranslationError | undefined }>\n\t>(null)\n\tuseEffect(() => {\n\t\tlet isAborted = false\n\t\t;(async () => {\n\t\t\ttry {\n\t\t\t\tif (word) {\n\t\t\t\t\tset$conflictingTranslations(Date.now())\n\t\t\t\t\tawait checkForConflictingWord({ word })\n\t\t\t\t\tif (isAborted) return\n\t\t\t\t}\n\t\t\t\tset$conflictingTranslations({ current: undefined })\n\t\t\t} catch (e) {\n\t\t\t\tif (isAborted) return\n\t\t\t\tif (e instanceof ExistingTranslationError) {\n\t\t\t\t\tset$conflictingTranslations({ current: e })\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tset$conflictingTranslations(e + '')\n\t\t\t\t}\n\t\t\t}\n\t\t})()\n\t\treturn () => {\n\t\t\tisAborted = true\n\t\t}\n\t}, [word])\n\treturn $conflictingTranslations\n}\n","import React, { FormEvent, useContext, useState } from 'react'\nimport { useCallback, useMemo } from 'use-memo-one'\nimport { dateToString } from '../function/dateToString'\nimport { sanitizeWord } from '../function/sanitizeWord'\nimport { useWordValidationErrors } from '../hook/useWordValidationErrors'\nimport { DEFAULT_COUNT, QUESTIONS_CHARACTER } from '../model/constants'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport { checkForConflictingWord } from '../storage/checkForConflictingWord'\nimport { getDb, STORE_WORDS } from '../storage/Db'\nimport { storeWord } from '../storage/storeWord'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { ErrorsComp } from './ErrorsComp'\nimport { FormRowComp } from './FormRowComp'\nimport { LabelComp } from './LabelComp'\nimport { ShowMessageContext } from './ShowMessageContext'\n\nexport interface EditWordCompProps {\n\t_dictionary: Dictionary\n\t_word: Word\n\t_refresh: () => void\n\t_onSuccess: () => void\n}\n\nexport function EditWordComp({\n\t_dictionary,\n\t_word,\n\t_refresh,\n\t_onSuccess,\n}: EditWordCompProps) {\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst [$translation0Text, set$translation0Text] = useState(\n\t\t_word.translation0.text,\n\t)\n\tconst [$translation1Text, set$translation1Text] = useState(\n\t\t_word.translation1.text,\n\t)\n\tconst [$translation0Description, set$translation0Description] = useState(\n\t\t_word.translation0.description,\n\t)\n\tconst [$translation1Description, set$translation1Description] = useState(\n\t\t_word.translation1.description,\n\t)\n\tconst touched = !!(\n\t\t$translation0Text ||\n\t\t$translation1Text ||\n\t\t$translation0Description ||\n\t\t$translation1Description\n\t)\n\tconst sanitizedWord = useMemo(\n\t\t() =>\n\t\t\tsanitizeWord({\n\t\t\t\t...(_word.id && { id: _word.id }),\n\t\t\t\tdictionaryId: _dictionary.id!,\n\t\t\t\tmodifiedDate: dateToString(new Date()),\n\t\t\t\ttranslation0: {\n\t\t\t\t\ttext: $translation0Text,\n\t\t\t\t\tdescription: $translation0Description,\n\t\t\t\t\tcount: DEFAULT_COUNT,\n\t\t\t\t},\n\t\t\t\ttranslation1: {\n\t\t\t\t\ttext: $translation1Text,\n\t\t\t\t\tdescription: $translation1Description,\n\t\t\t\t\tcount: DEFAULT_COUNT,\n\t\t\t\t},\n\t\t\t}),\n\t\t[\n\t\t\t_dictionary,\n\t\t\t_word.id,\n\t\t\t$translation0Text,\n\t\t\t$translation0Description,\n\t\t\t$translation1Text,\n\t\t\t$translation1Description,\n\t\t],\n\t)\n\tconst validationErrors = useWordValidationErrors(sanitizedWord)\n\tconst onSubmit = useCallback(\n\t\tasync (e: FormEvent) => {\n\t\t\te.preventDefault()\n\t\t\tif (!sanitizedWord) return\n\t\t\tconst t = getDb().transaction([STORE_WORDS], 'readwrite')\n\t\t\ttry {\n\t\t\t\tawait checkForConflictingWord({\n\t\t\t\t\tt,\n\t\t\t\t\tword: sanitizedWord,\n\t\t\t\t})\n\t\t\t\tawait storeWord({\n\t\t\t\t\tt,\n\t\t\t\t\tword: sanitizedWord,\n\t\t\t\t})\n\t\t\t\tshowMessage(`Eltároltam a szót.`)\n\t\t\t\t_onSuccess()\n\t\t\t} catch (e) {\n\t\t\t\tshowMessage(e)\n\t\t\t}\n\t\t},\n\t\t[sanitizedWord, _onSuccess, showMessage],\n\t)\n\treturn (\n\t\t<form onSubmit={onSubmit}>\n\t\t\t<ContentRowComp>\n\t\t\t\t<h1>{_word.id ? `Módosítsd a szót` : `Adj hozzá egy szót`}</h1>\n\t\t\t\t<FormRowComp>\n\t\t\t\t\t<LabelComp _required>{_dictionary.language0}</LabelComp>\n\t\t\t\t\t<input\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tvalue={$translation0Text}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tset$translation0Text(e.target.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</FormRowComp>\n\t\t\t\t<FormRowComp>\n\t\t\t\t\t<LabelComp>Magyarázat</LabelComp>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={$translation0Description}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tset$translation0Description(e.target.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</FormRowComp>\n\t\t\t\t<FormRowComp>\n\t\t\t\t\t<LabelComp _required>{_dictionary.language1}</LabelComp>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={$translation1Text}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tset$translation1Text(e.target.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</FormRowComp>\n\t\t\t\t<FormRowComp>\n\t\t\t\t\t<LabelComp>Magyarázat</LabelComp>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={$translation1Description}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tset$translation1Description(e.target.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</FormRowComp>\n\t\t\t\t{_word.id && (\n\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t<small>\n\t\t\t\t\t\t\tKérdések:{' '}\n\t\t\t\t\t\t\t{_word.translation0.count > 0 &&\n\t\t\t\t\t\t\t\tQUESTIONS_CHARACTER}{' '}\n\t\t\t\t\t\t\t{_word.translation0.count} /{' '}\n\t\t\t\t\t\t\t{_word.translation1.count > 0 &&\n\t\t\t\t\t\t\t\tQUESTIONS_CHARACTER}{' '}\n\t\t\t\t\t\t\t{_word.translation1.count}\n\t\t\t\t\t\t</small>\n\t\t\t\t\t</FormRowComp>\n\t\t\t\t)}\n\t\t\t\t{touched && <ErrorsComp _errors={validationErrors} />}\n\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t<button\n\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t!isLoaded(validationErrors) ||\n\t\t\t\t\t\t\tvalidationErrors.length > 0\n\t\t\t\t\t\t}\n\t\t\t\t\t>\n\t\t\t\t\t\tTárold el\n\t\t\t\t\t</button>\n\t\t\t\t\t{_word.id &&\n\t\t\t\t\t\t(_word.translation0.count === 0 ||\n\t\t\t\t\t\t\t_word.translation1.count === 0) && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tawait storeWord({\n\t\t\t\t\t\t\t\t\t\t\tword: {\n\t\t\t\t\t\t\t\t\t\t\t\t..._word,\n\t\t\t\t\t\t\t\t\t\t\t\ttranslation0: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t..._word.translation0,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcount:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_word.translation0\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.count ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDEFAULT_COUNT,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\ttranslation1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t..._word.translation1,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcount:\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_word.translation1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.count ||\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tDEFAULT_COUNT,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t_refresh()\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tKapcsold be a szót\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t{_word.id &&\n\t\t\t\t\t\t(_word.translation0.count > 0 ||\n\t\t\t\t\t\t\t_word.translation1.count > 0) && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tawait storeWord({\n\t\t\t\t\t\t\t\t\t\t\tword: {\n\t\t\t\t\t\t\t\t\t\t\t\t..._word,\n\t\t\t\t\t\t\t\t\t\t\t\ttranslation0: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t..._word.translation0,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcount: 0,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\ttranslation1: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t..._word.translation1,\n\t\t\t\t\t\t\t\t\t\t\t\t\tcount: 0,\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t_refresh()\n\t\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tKapcsold ki a szót\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t</ButtonRowComp>\n\t\t\t</ContentRowComp>\n\t\t</form>\n\t)\n}\n","import React from 'react'\nimport { useHistory, useRouteMatch } from 'react-router'\nimport { useCallback } from 'use-memo-one'\nimport { dateToString } from '../function/dateToString'\nimport { useDictionary } from '../hook/useDictionary'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { useWord } from '../hook/useWord'\nimport { DEFAULT_COUNT } from '../model/constants'\nimport { isLoaded } from '../model/TLoadable'\nimport { EditWordComp } from './EditWordComp'\nimport { LoadableComp } from './LoadableComp'\nimport { UnknownDictionaryComp } from './UnknownDictionaryComp'\n\nexport interface EditWordPageProps {}\n\nexport function EditWordPage(props: EditWordPageProps) {\n\tconst history = useHistory()\n\tconst routeMatch = useRouteMatch<{\n\t\tdictionaryId: string\n\t\twordId: string | undefined\n\t}>(`/dictionary/:dictionaryId/word/:wordId?/`)\n\tconst dictionaryId =\n\t\trouteMatch && parseInt(routeMatch.params.dictionaryId, 10)\n\tconst wordId =\n\t\trouteMatch && routeMatch.params.wordId != null\n\t\t\t? parseInt(routeMatch.params.wordId, 10)\n\t\t\t: null\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst { $word, loadWord } = useWord(wordId)\n\tconst onSuccess = useCallback(() => {\n\t\tif (isLoaded($word) && $word.current) {\n\t\t\thistory.goBack()\n\t\t} else {\n\t\t\tloadDictionary()\n\t\t}\n\t}, [$word, history, loadDictionary])\n\tusePageTitle(\n\t\t!isLoaded($word)\n\t\t\t? `Szó`\n\t\t\t: $word.current\n\t\t\t? `Módosítsd a szót`\n\t\t\t: `Adj hozzá egy szót`,\n\t)\n\treturn (\n\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t{dictionary =>\n\t\t\t\tdictionary.current == null ? (\n\t\t\t\t\t<UnknownDictionaryComp />\n\t\t\t\t) : (\n\t\t\t\t\t<LoadableComp _value={$word} _load={loadWord}>\n\t\t\t\t\t\t{word => (\n\t\t\t\t\t\t\t<EditWordComp\n\t\t\t\t\t\t\t\t_dictionary={dictionary.current!}\n\t\t\t\t\t\t\t\t_word={\n\t\t\t\t\t\t\t\t\tword.current || {\n\t\t\t\t\t\t\t\t\t\tdictionaryId: dictionary.current!.id!,\n\t\t\t\t\t\t\t\t\t\tmodifiedDate: dateToString(new Date()),\n\t\t\t\t\t\t\t\t\t\ttranslation0: {\n\t\t\t\t\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\t\t\t\t\t\tcount: DEFAULT_COUNT,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\ttranslation1: {\n\t\t\t\t\t\t\t\t\t\t\ttext: '',\n\t\t\t\t\t\t\t\t\t\t\tdescription: '',\n\t\t\t\t\t\t\t\t\t\t\tcount: DEFAULT_COUNT,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t_onSuccess={onSuccess}\n\t\t\t\t\t\t\t\t_refresh={loadDictionary}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</LoadableComp>\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { DbWord, Word, wordFromDb } from '../model/Word'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_COUNT_TRANSLATION_0,\n\tINDEX_WORDS_COUNT_TRANSLATION_1,\n\tINDEX_WORDS_MODIFIED_DATE_0,\n\tINDEX_WORDS_MODIFIED_DATE_1,\n\tSTORE_WORDS,\n} from './Db'\nimport { makeKeyRangeWordsCountTranslation } from './makeKeyRangeWordsCountTranslation'\nimport { makeKeyRangeWordsModifiedDate } from './makeKeyRangeWordsModifiedDate'\nimport { readItems, ReadItemsPagingParams } from './readItems'\n\nexport enum WordsByDictionaryIdSort {\n\tModifiedDate0,\n\tModifiedDate1,\n\tCountTranslation0,\n\tCountTranslation1,\n}\n\nexport async function readWordsByDictionaryId({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tdictionaryId,\n\tsort = WordsByDictionaryIdSort.ModifiedDate0,\n\t...rest\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n\tsort?: WordsByDictionaryIdSort\n} & Omit<ReadItemsPagingParams<DbWord>, 'range'>): Promise<Word[]> {\n\tconst dictionaryIdIndex = t\n\t\t.objectStore(STORE_WORDS)\n\t\t.index(getIndexName(sort))\n\tconst words = await readItems({\n\t\tsource: dictionaryIdIndex,\n\t\trange: makeKeyRange(dictionaryId, sort),\n\t\t...rest,\n\t})\n\treturn words.map(wordFromDb)\n}\n\nfunction getIndexName(sort: WordsByDictionaryIdSort) {\n\tswitch (sort) {\n\t\tcase WordsByDictionaryIdSort.CountTranslation0:\n\t\t\treturn INDEX_WORDS_COUNT_TRANSLATION_0\n\t\tcase WordsByDictionaryIdSort.CountTranslation1:\n\t\t\treturn INDEX_WORDS_COUNT_TRANSLATION_1\n\t\tcase WordsByDictionaryIdSort.ModifiedDate0:\n\t\t\treturn INDEX_WORDS_MODIFIED_DATE_0\n\t\tcase WordsByDictionaryIdSort.ModifiedDate1:\n\t\t\treturn INDEX_WORDS_MODIFIED_DATE_1\n\t}\n\tthrow new Error(`[q0733u]`)\n}\n\nfunction makeKeyRange(dictionaryId: number, sort: WordsByDictionaryIdSort) {\n\tswitch (sort) {\n\t\tcase WordsByDictionaryIdSort.CountTranslation0:\n\t\tcase WordsByDictionaryIdSort.CountTranslation1:\n\t\t\treturn makeKeyRangeWordsCountTranslation({ dictionaryId })\n\t\tcase WordsByDictionaryIdSort.ModifiedDate0:\n\t\tcase WordsByDictionaryIdSort.ModifiedDate1:\n\t\t\treturn makeKeyRangeWordsModifiedDate({ dictionaryId })\n\t}\n\tthrow new Error(`[q0736h]`)\n}\n","export interface ReadItemsSource<T> {\n\tgetAll(key?: IDBKeyRange): Promise<T[]>\n\topenCursor(\n\t\trange?: IDBKeyRange,\n\t\tdirection?: IDBCursorDirection,\n\t): Promise<ReadItemsCursor<T> | null>\n}\n\nexport interface ReadItemsCursor<T> {\n\tvalue: T\n\tcontinue(): Promise<ReadItemsCursor<T> | null>\n\tadvance(n: number): Promise<ReadItemsCursor<T> | null>\n}\n\nexport interface ReadItemsParams<T> extends ReadItemsPagingParams<T> {\n\tsource: ReadItemsSource<T>\n}\n\nexport interface ReadItemsPagingParams<T> {\n\tpageSize?: number\n\tpage?: number\n\tfilter?: (item: T) => boolean\n\trange?: IDBKeyRange\n\tdirection?: IDBCursorDirection\n}\n\nexport async function readItems<T>({\n\tsource,\n\tpageSize = Infinity,\n\tpage = 0,\n\tfilter,\n\trange,\n\tdirection,\n}: ReadItemsParams<T>): Promise<T[]> {\n\tif (!filter && !isFinite(pageSize) && !direction) {\n\t\treturn source.getAll(range)\n\t}\n\tconst result: T[] = []\n\tlet cursor = await source.openCursor(range, direction)\n\tconst firstItemIndex = page * pageSize\n\tif (cursor) {\n\t\tif (firstItemIndex) {\n\t\t\tif (filter) {\n\t\t\t\tlet index = -1\n\t\t\t\twhile (cursor) {\n\t\t\t\t\tif (filter(cursor.value) && ++index === firstItemIndex) {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tcursor = await cursor.continue()\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcursor = await cursor.advance(firstItemIndex)\n\t\t\t}\n\t\t}\n\t\twhile (cursor && result.length < pageSize) {\n\t\t\tif (!filter || filter(cursor.value)) {\n\t\t\t\tresult.push(cursor.value)\n\t\t\t}\n\t\t\tcursor = await cursor.continue()\n\t\t}\n\t}\n\treturn result\n}\n","import { MIN_MAX_RANGE } from '../model/constants'\nimport { TKeyLimits } from '../model/TKeyLimits'\n\nexport function makeKeyRangeWordsCountTranslation({\n\tdictionaryId,\n\tcountForSort = MIN_MAX_RANGE,\n\ttextForSort = MIN_MAX_RANGE,\n\tdescriptionForSort = MIN_MAX_RANGE,\n}: {\n\tdictionaryId: number\n\tcountForSort?: TKeyLimits<number>\n\ttextForSort?: TKeyLimits<string>\n\tdescriptionForSort?: TKeyLimits<string>\n}) {\n\treturn IDBKeyRange.bound(\n\t\t[dictionaryId, countForSort[0], textForSort[0], descriptionForSort[0]],\n\t\t[dictionaryId, countForSort[1], textForSort[1], descriptionForSort[1]],\n\t)\n}\n","import { useContext, useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { ShowMessageContext } from '../comp/ShowMessageContext'\nimport { TLoadable } from '../model/TLoadable'\nimport { DbWord, Word } from '../model/Word'\nimport {\n\treadWordsByDictionaryId,\n\tWordsByDictionaryIdSort,\n} from '../storage/readWordsByDictionaryId'\n\nexport function useWordsByDictionaryId({\n\tdictionaryId,\n\tpage,\n\tpageSize,\n\tsort,\n\tfilter,\n}: {\n\tdictionaryId: number | null\n\tpage?: number\n\tpageSize?: number\n\tsort?: WordsByDictionaryIdSort\n\tfilter?: (word: DbWord) => boolean\n}) {\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst [$words, set$words] = useState<\n\t\tTLoadable<{ current: readonly Word[] | undefined }>\n\t>(null)\n\tconst loadWords = useCallback(() => {\n\t\tif (dictionaryId == null) {\n\t\t\tset$words({ current: undefined })\n\t\t} else {\n\t\t\tlet aborted = false\n\t\t\tset$words(Date.now())\n\t\t\treadWordsByDictionaryId({\n\t\t\t\tdictionaryId,\n\t\t\t\tpage,\n\t\t\t\tpageSize,\n\t\t\t\tsort,\n\t\t\t\tfilter,\n\t\t\t})\n\t\t\t\t.then(words => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$words({ current: words })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tshowMessage(e)\n\t\t\t\t\tset$words(e + '')\n\t\t\t\t})\n\t\t\treturn () => {\n\t\t\t\taborted = true\n\t\t\t}\n\t\t}\n\t}, [dictionaryId, showMessage, page, pageSize, sort, filter])\n\treturn { $words, set$words, loadWords }\n}\n","import React from 'react'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { LabelComp } from './LabelComp'\n\nexport interface PagingCompProps {\n\t_page: number\n\t_setPage: (n: number) => void\n\t_pageCount: number\n}\n\nexport function PagingComp({ _page, _pageCount, _setPage }: PagingCompProps) {\n\treturn (\n\t\t<ButtonRowComp>\n\t\t\t<button\n\t\t\t\ttype='button'\n\t\t\t\tclassName='does-not-expand'\n\t\t\t\tdisabled={_page === 0}\n\t\t\t\tonClick={() => {\n\t\t\t\t\t_setPage(_page - 1)\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t«\n\t\t\t</button>\n\t\t\t<LabelComp>\n\t\t\t\t{_page + 1} / {_pageCount}\n\t\t\t</LabelComp>\n\t\t\t<button\n\t\t\t\ttype='button'\n\t\t\t\tclassName='does-not-expand'\n\t\t\t\tdisabled={_page === _pageCount - 1}\n\t\t\t\tonClick={() => {\n\t\t\t\t\t_setPage(_page + 1)\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t»\n\t\t\t</button>\n\t\t</ButtonRowComp>\n\t)\n}\n","import React, { useRef, useState } from 'react'\nimport { useRouteMatch } from 'react-router-dom'\nimport { useMemo } from 'use-memo-one'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { url } from '../function/url'\nimport { useDictionary } from '../hook/useDictionary'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { useWordCountByDictionaryId } from '../hook/useWordCountByDictionaryId'\nimport { useWordsByDictionaryId } from '../hook/useWordsByDictionaryId'\nimport { ExportedDictionary } from '../model/Dictionary'\nimport { isLoaded } from '../model/TLoadable'\nimport { ExportedWord } from '../model/Word'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryComp } from './DictionaryComp'\nimport { FocusRefComp } from './FocusRefComp'\nimport { FormRowComp } from './FormRowComp'\nimport { LoadableComp } from './LoadableComp'\nimport { PagingComp } from './PagingComp'\nimport { UnknownDictionaryComp } from './UnknownDictionaryComp'\n\nexport interface ExportDictionaryPageProps {}\n\nexport function ExportDictionaryPage(props: ExportDictionaryPageProps) {\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string }>(\n\t\t'/dictionary/:dictionaryId/export/',\n\t)\n\tconst dictionaryId = routeMatch\n\t\t? parseInt(routeMatch.params.dictionaryId, 10)\n\t\t: null\n\tconst textAreaRef = useRef<HTMLTextAreaElement>(null)\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst { $wordCount, loadWordCount } = useWordCountByDictionaryId({\n\t\tdictionaryId,\n\t})\n\tconst [$page, set$page] = useState(0)\n\tconst pageSize = 100000\n\tconst { $words, loadWords } = useWordsByDictionaryId({\n\t\tdictionaryId,\n\t\tpage: $page,\n\t\tpageSize: pageSize,\n\t})\n\tconst pageCount = isLoaded($wordCount)\n\t\t? Math.max(1, Math.ceil($wordCount.current / pageSize))\n\t\t: 1\n\tconst $json = useMemo(() => {\n\t\tif (\n\t\t\t!isLoaded($dictionary) ||\n\t\t\t!isLoaded($words) ||\n\t\t\t$dictionary.current == null ||\n\t\t\t$words.current == null\n\t\t) {\n\t\t\treturn ''\n\t\t}\n\t\tconst d: ExportedDictionary = {\n\t\t\tversion: 1,\n\t\t\tname: $dictionary.current.name,\n\t\t\tlanguage0: $dictionary.current.language0,\n\t\t\tlanguage1: $dictionary.current.language1,\n\t\t\twords: $words.current.map(\n\t\t\t\t(w): ExportedWord => ({\n\t\t\t\t\tmodifiedDate: w.modifiedDate,\n\t\t\t\t\ttranslation0: w.translation0,\n\t\t\t\t\ttranslation1: w.translation1,\n\t\t\t\t}),\n\t\t\t),\n\t\t}\n\t\treturn JSON.stringify(d, undefined, '\\t')\n\t}, [$words, $dictionary])\n\tusePageTitle(\n\t\t!isLoaded($dictionary)\n\t\t\t? `Szótár kimentése`\n\t\t\t: `${\n\t\t\t\t\t$dictionary.current\n\t\t\t\t\t\t? dictionaryToString($dictionary.current)\n\t\t\t\t\t\t: `Ismeretlen`\n\t\t\t  } szótár kimentése`,\n\t)\n\tconst downloadLinkRef = useRef<HTMLAnchorElement>(null)\n\treturn (\n\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t{dictionary =>\n\t\t\t\tdictionary.current ? (\n\t\t\t\t\t<ContentRowComp>\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t<DictionaryComp _dictionary={dictionary.current} />{' '}\n\t\t\t\t\t\t\tszótár kimentése\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<LoadableComp _value={$wordCount} _load={loadWordCount}>\n\t\t\t\t\t\t\t{wordCount => (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<LoadableComp\n\t\t\t\t\t\t\t\t\t\t_value={$words}\n\t\t\t\t\t\t\t\t\t\t_load={loadWords}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{words => (\n\t\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tref={textAreaRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tvalue={$json}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treadOnly\n\t\t\t\t\t\t\t\t\t\t\t\t\t></textarea>\n\t\t\t\t\t\t\t\t\t\t\t\t</FormRowComp>\n\t\t\t\t\t\t\t\t\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextAreaRef.current\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextAreaRef.current.focus()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttextAreaRef.current.setSelectionRange(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t$json.length,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdocument.execCommand(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'copy',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMásold\n\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\t\t\t\t\t\trole='button'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tref={downloadLinkRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdownload={`${dictionaryToString(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdictionary.current!,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)}${\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tpageCount > 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t? `-${$page +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t1}`\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t: ''\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}.json`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\thref={url`data:text/json;charset=utf-8,${$json}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tTárold el\n\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<FocusRefComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_focusThis={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdownloadLinkRef\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t</ButtonRowComp>\n\t\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t\t\t\t{pageCount > 1 && (\n\t\t\t\t\t\t\t\t\t\t<PagingComp\n\t\t\t\t\t\t\t\t\t\t\t_page={$page}\n\t\t\t\t\t\t\t\t\t\t\t_setPage={set$page}\n\t\t\t\t\t\t\t\t\t\t\t_pageCount={pageCount}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t</ContentRowComp>\n\t\t\t\t) : (\n\t\t\t\t\t<UnknownDictionaryComp />\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","export async function asyncFilter<T>(\n\tarr: T[],\n\tfn: (item: T, index: number, arr: T[]) => Promise<boolean>,\n): Promise<T[]> {\n\tconst flags = await Promise.all(\n\t\tarr.map((item, index, arr) => fn(item, index, arr)),\n\t)\n\treturn arr.filter((item, index) => flags[index])\n}\n","export function withInterface<T>(o: T): T {\n\treturn o\n}\n","import { Dictionary } from '../model/Dictionary'\nimport { Word } from '../model/Word'\nimport { checkForConflictingDictionary } from '../storage/checkForConflictingDictionary'\nimport { checkForConflictingWord } from '../storage/checkForConflictingWord'\nimport { getDb, STORE_DICTIONARIES, STORE_WORDS } from '../storage/Db'\nimport { storeDictionary } from '../storage/storeDictionary'\nimport { storeWord } from '../storage/storeWord'\nimport { asyncFilter } from './asyncFilter'\nimport { withInterface } from './withInterface'\n\nexport async function handleDictionaryImport({\n\tdictionary,\n\twords,\n}: {\n\tdictionary: Dictionary\n\twords: readonly Word[]\n}) {\n\tconst t = getDb().transaction(\n\t\t[STORE_DICTIONARIES, STORE_WORDS],\n\t\t'readwrite',\n\t)\n\tlet dictionaryId: number\n\tawait checkForConflictingDictionary({\n\t\tt,\n\t\tdictionary,\n\t})\n\tdictionaryId = await storeDictionary({\n\t\tt,\n\t\tdictionary,\n\t})\n\tconst wordsWithDictionaryId = words.map(word =>\n\t\twithInterface<Word>({\n\t\t\t...word,\n\t\t\tdictionaryId,\n\t\t}),\n\t)\n\tconst wordsNotConflicting = await asyncFilter(wordsWithDictionaryId, word =>\n\t\tcheckForConflictingWord({\n\t\t\tt,\n\t\t\tword,\n\t\t}).then(() => true, () => false),\n\t)\n\tfor (const word of wordsNotConflicting) {\n\t\tawait storeWord({\n\t\t\tt,\n\t\t\tword,\n\t\t})\n\t}\n\tawait t.done\n\treturn dictionaryId\n}\n","import { Dictionary, DictionaryFromAndroid } from '../model/Dictionary'\n\nexport function dictionaryFromAndroid(\n\tdictionaryFromAndroid: DictionaryFromAndroid,\n): Dictionary {\n\treturn {\n\t\tname: dictionaryFromAndroid.name,\n\t\tlanguage0: dictionaryFromAndroid.firstLanguageName,\n\t\tlanguage1: dictionaryFromAndroid.secondLanguageName,\n\t}\n}\n","import { Dictionary, ExportedDictionary } from '../model/Dictionary'\n\nexport function dictionaryFromExport(d: ExportedDictionary): Dictionary {\n\treturn {\n\t\tname: d.name,\n\t\tlanguage0: d.language0,\n\t\tlanguage1: d.language1,\n\t}\n}\n","import { isString } from 'util'\n\nexport function readJsonFromFile<T extends any>(file: File) {\n\treturn new Promise<T>((resolve, reject) => {\n\t\tconst reader = new FileReader()\n\t\treader.addEventListener('load', () => {\n\t\t\ttry {\n\t\t\t\tif (!isString(reader.result)) {\n\t\t\t\t\tthrow new Error(`[pydwop] ${reader.result}`)\n\t\t\t\t}\n\t\t\t\tresolve(JSON.parse(reader.result))\n\t\t\t} catch (e) {\n\t\t\t\treject(e)\n\t\t\t}\n\t\t})\n\t\treader.addEventListener('error', () => {\n\t\t\treject(reader.error)\n\t\t})\n\t\treader.readAsText(file)\n\t})\n}\n","import { DEFAULT_COUNT } from '../model/constants'\nimport { Word, WordFromAndroid } from '../model/Word'\nimport { dateToString } from './dateToString'\n\nexport function wordFromAndroid(wordFromAndroid: WordFromAndroid): Word {\n\treturn {\n\t\tdictionaryId: -1,\n\t\tmodifiedDate: dateToString(new Date()),\n\t\ttranslation0: {\n\t\t\ttext: wordFromAndroid.inFirstLanguage,\n\t\t\tdescription: wordFromAndroid.firstLanguageComment,\n\t\t\tcount: DEFAULT_COUNT,\n\t\t},\n\t\ttranslation1: {\n\t\t\ttext: wordFromAndroid.inSecondLanguage,\n\t\t\tdescription: wordFromAndroid.secondLanguageComment,\n\t\t\tcount: DEFAULT_COUNT,\n\t\t},\n\t}\n}\n","import { ExportedWord, Word } from '../model/Word'\n\nexport function wordFromExport(w: ExportedWord): Word {\n\treturn {\n\t\tdictionaryId: -1,\n\t\tmodifiedDate: w.modifiedDate,\n\t\ttranslation0: w.translation0,\n\t\ttranslation1: w.translation1,\n\t}\n}\n","import React, { useContext, useState } from 'react'\nimport { dictionaryFromAndroid } from '../function/dictionaryFromAndroid'\nimport { dictionaryFromExport } from '../function/dictionaryFromExport'\nimport { readJsonFromFile } from '../function/readJsonFromFile'\nimport { wordFromAndroid } from '../function/wordFromAndroid'\nimport { wordFromExport } from '../function/wordFromExport'\nimport { DictionaryFromAndroid, ExportedDictionary } from '../model/Dictionary'\nimport { ContentRowComp } from './ContentRowComp'\nimport { FormRowComp } from './FormRowComp'\nimport { ImportableDictionary } from './ImportFromFilePage'\nimport { LabelComp } from './LabelComp'\nimport { ShowMessageContext } from './ShowMessageContext'\n\nexport interface GetWordsCompProps {\n\t_setImportableDictionary: (v: ImportableDictionary) => void\n}\n\nexport function GetWordsComp({ _setImportableDictionary }: GetWordsCompProps) {\n\tconst [$json, set$json] = useState('')\n\tconst showMessage = useContext(ShowMessageContext)\n\treturn (\n\t\t<ContentRowComp>\n\t\t\t<FormRowComp>\n\t\t\t\t<LabelComp>Fájlból</LabelComp>\n\t\t\t\t<input\n\t\t\t\t\tautoFocus\n\t\t\t\t\ttype='file'\n\t\t\t\t\tonChange={async e => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst files = e.target.files\n\t\t\t\t\t\t\tif (!files) return\n\t\t\t\t\t\t\tconst file = files[0]\n\t\t\t\t\t\t\tif (!file) return\n\t\t\t\t\t\t\tconst dictionary = await readJsonFromFile<\n\t\t\t\t\t\t\t\tDictionaryFromAndroid | ExportedDictionary\n\t\t\t\t\t\t\t>(file)\n\t\t\t\t\t\t\tif ('version' in dictionary) {\n\t\t\t\t\t\t\t\t_setImportableDictionary({\n\t\t\t\t\t\t\t\t\tdictionary: dictionaryFromExport(\n\t\t\t\t\t\t\t\t\t\tdictionary,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\twords: dictionary.words.map(wordFromExport),\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t_setImportableDictionary({\n\t\t\t\t\t\t\t\t\tdictionary: dictionaryFromAndroid(\n\t\t\t\t\t\t\t\t\t\tdictionary,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\twords: dictionary.words.map(\n\t\t\t\t\t\t\t\t\t\twordFromAndroid,\n\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</FormRowComp>\n\t\t\t<FormRowComp>\n\t\t\t\t<LabelComp>Vágólapról</LabelComp>\n\t\t\t\t<textarea\n\t\t\t\t\tplaceholder={`Illeszd be ide...`}\n\t\t\t\t\trows={1}\n\t\t\t\t\tcols={`Illeszd be ide...`.length}\n\t\t\t\t\tvalue={$json}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst json = e.currentTarget.value\n\t\t\t\t\t\t\tset$json(json)\n\t\t\t\t\t\t\tif (!json) return\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tvar dictionary:\n\t\t\t\t\t\t\t\t\t| DictionaryFromAndroid\n\t\t\t\t\t\t\t\t\t| ExportedDictionary = JSON.parse(json)\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tconsole.error(e)\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`[pyfjn5] Nem tudtam elolvasni amit beillesztettél: JSON hibát észleltem.`,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tif ('version' in dictionary) {\n\t\t\t\t\t\t\t\t\t_setImportableDictionary({\n\t\t\t\t\t\t\t\t\t\tdictionary: dictionaryFromExport(\n\t\t\t\t\t\t\t\t\t\t\tdictionary,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\twords: dictionary.words.map(\n\t\t\t\t\t\t\t\t\t\t\twordFromExport,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t_setImportableDictionary({\n\t\t\t\t\t\t\t\t\t\tdictionary: dictionaryFromAndroid(\n\t\t\t\t\t\t\t\t\t\t\tdictionary,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\twords: dictionary.words.map(\n\t\t\t\t\t\t\t\t\t\t\twordFromAndroid,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tconsole.error(e)\n\t\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t\t`[pyfjt9] Nem tudtam elolvasni amit beillesztettél: hibás volt a formátuma.`,\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tset$json('')\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t></textarea>\n\t\t\t</FormRowComp>\n\t\t</ContentRowComp>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { Dictionary, dictionaryFromDb } from '../model/Dictionary'\nimport { Db, getDb, INDEX_DICTIONARIES_NAME, STORE_DICTIONARIES } from './Db'\nimport { readItems, ReadItemsPagingParams } from './readItems'\n\nexport async function readDictionaries({\n\tt = getDb().transaction([STORE_DICTIONARIES], 'readonly'),\n\t...rest\n}: {\n\tt?: IDBPTransaction<Db>\n} & ReadItemsPagingParams<Dictionary>): Promise<Dictionary[]> {\n\tconst nameIndex = t\n\t\t.objectStore(STORE_DICTIONARIES)\n\t\t.index(INDEX_DICTIONARIES_NAME)\n\tconst dictionaries = await readItems({\n\t\tsource: nameIndex,\n\t\t...rest,\n\t})\n\treturn dictionaries.map(dictionaryFromDb)\n}\n","import React from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded, TLoadable } from '../model/TLoadable'\nimport { readDictionaries } from '../storage/readDictionaries'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryPropsComp } from './DictionaryPropsComp'\nimport { FormRowComp } from './FormRowComp'\nimport { ImportableDictionary, ImportParams } from './ImportFromFilePage'\nimport { LabelComp } from './LabelComp'\nimport { LoadableComp } from './LoadableComp'\n\nexport interface SetImportParamsCompProps {\n\t_importableDictionary: ImportableDictionary\n\t_importParams: ImportParams\n\t_setImportParams: (\n\t\tcb: (v: ImportParams | null) => ImportParams | null,\n\t) => void\n\t_dictionaryId: number | null\n}\n\nexport function SetImportParamsComp({\n\t_importableDictionary,\n\t_importParams,\n\t_setImportParams,\n\t_dictionaryId,\n}: SetImportParamsCompProps) {\n\tconst [$dictionaries, set$dictionaries] = React.useState<\n\t\tTLoadable<Dictionary[]>\n\t>(null)\n\tconst loadDictionaries = useCallback(() => {\n\t\tlet isAborted = false\n\t\t;(async () => {\n\t\t\tset$dictionaries(Date.now())\n\t\t\tconst dictionaries = await readDictionaries({})\n\t\t\tif (isAborted) return\n\t\t\tset$dictionaries(dictionaries)\n\t\t\tif (_dictionaryId) {\n\t\t\t\tconst dictionaryById = dictionaries.find(\n\t\t\t\t\tdictionary => dictionary.id === _dictionaryId,\n\t\t\t\t)\n\t\t\t\tif (dictionaryById) {\n\t\t\t\t\t_setImportParams(importParams => ({\n\t\t\t\t\t\tdictionary: dictionaryById,\n\t\t\t\t\t\tswapLanguages: false,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t} else if (!_importableDictionary.dictionary.id) {\n\t\t\t\tconst dictionaryWithSameName = dictionaries.find(\n\t\t\t\t\tdictionary =>\n\t\t\t\t\t\tdictionary.name ===\n\t\t\t\t\t\t_importableDictionary.dictionary.name,\n\t\t\t\t)\n\t\t\t\tif (dictionaryWithSameName) {\n\t\t\t\t\t_setImportParams(importParams => ({\n\t\t\t\t\t\tdictionary: dictionaryWithSameName,\n\t\t\t\t\t\tswapLanguages: false,\n\t\t\t\t\t}))\n\t\t\t\t}\n\t\t\t}\n\t\t})()\n\t\treturn () => {\n\t\t\tisAborted = true\n\t\t}\n\t}, [_importableDictionary, _setImportParams, _dictionaryId])\n\tconst setDictionary = useCallback(\n\t\t(dictionary: Dictionary) => {\n\t\t\t_setImportParams(importParams => ({\n\t\t\t\t...importParams!,\n\t\t\t\tdictionary,\n\t\t\t}))\n\t\t},\n\t\t[_setImportParams],\n\t)\n\treturn (\n\t\t<LoadableComp _value={$dictionaries} _load={loadDictionaries}>\n\t\t\t{dictionaries => (\n\t\t\t\t<ContentRowComp>\n\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t<LabelComp>Egyesítsd ezzel a szótárral</LabelComp>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tvalue={_importParams.dictionary.id}\n\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\tconst id = e.currentTarget.value\n\t\t\t\t\t\t\t\t\t? parseInt(e.currentTarget.value, 10)\n\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\tconst dictionary = isLoaded($dictionaries)\n\t\t\t\t\t\t\t\t\t? $dictionaries.find(\n\t\t\t\t\t\t\t\t\t\t\tdictionary => dictionary.id === id,\n\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t\t\t\t_setImportParams(importParams => ({\n\t\t\t\t\t\t\t\t\t...importParams!,\n\t\t\t\t\t\t\t\t\tdictionary:\n\t\t\t\t\t\t\t\t\t\tdictionary ||\n\t\t\t\t\t\t\t\t\t\t_importableDictionary.dictionary,\n\t\t\t\t\t\t\t\t\tswapLanguages: false,\n\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value={''}>Új szótár</option>\n\t\t\t\t\t\t\t{dictionaries.map(dictionary => (\n\t\t\t\t\t\t\t\t<option\n\t\t\t\t\t\t\t\t\tkey={dictionary.id}\n\t\t\t\t\t\t\t\t\tvalue={dictionary.id}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{dictionaryToString(dictionary)}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</FormRowComp>\n\t\t\t\t\t<DictionaryPropsComp\n\t\t\t\t\t\t_dictionary={_importParams.dictionary}\n\t\t\t\t\t\t_setDictionary={setDictionary}\n\t\t\t\t\t/>\n\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t<LabelComp>Nyelvsorrend</LabelComp>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tvalue={_importParams.swapLanguages + ''}\n\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\tconst swapLanguages = JSON.parse(e.target.value)\n\t\t\t\t\t\t\t\t_setImportParams(importParams => ({\n\t\t\t\t\t\t\t\t\t...importParams!,\n\t\t\t\t\t\t\t\t\tswapLanguages,\n\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value='false'>\n\t\t\t\t\t\t\t\t{_importableDictionary.dictionary.language0} →{' '}\n\t\t\t\t\t\t\t\t{_importParams.dictionary.language0} és{' '}\n\t\t\t\t\t\t\t\t{_importableDictionary.dictionary.language1} →{' '}\n\t\t\t\t\t\t\t\t{_importParams.dictionary.language1}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t<option value='true'>\n\t\t\t\t\t\t\t\t{_importableDictionary.dictionary.language0} →{' '}\n\t\t\t\t\t\t\t\t{_importParams.dictionary.language1} és{' '}\n\t\t\t\t\t\t\t\t{_importableDictionary.dictionary.language1} →{' '}\n\t\t\t\t\t\t\t\t{_importParams.dictionary.language0}\n\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</FormRowComp>\n\t\t\t\t</ContentRowComp>\n\t\t\t)}\n\t\t</LoadableComp>\n\t)\n}\n","import React, { useContext, useState } from 'react'\nimport { useHistory, useRouteMatch } from 'react-router'\nimport { useCallback } from 'use-memo-one'\nimport { handleDictionaryImport } from '../function/handleDictionaryImport'\nimport { url } from '../function/url'\nimport { useDictionaryValidationErrors } from '../hook/useDictionaryValidationErrors'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded } from '../model/TLoadable'\nimport { Word } from '../model/Word'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { ErrorsComp } from './ErrorsComp'\nimport { GetWordsComp } from './GetWordsComp'\nimport { SetImportParamsComp } from './SetImportParamsComp'\nimport { ShowMessageContext } from './ShowMessageContext'\n\nexport interface ImportableDictionary {\n\tdictionary: Dictionary\n\twords: readonly Word[]\n}\n\nexport interface ImportParams {\n\tdictionary: Dictionary\n\tswapLanguages: boolean\n}\n\nexport function ImportFromFilePage() {\n\tusePageTitle(`Tölts be szavakat`)\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string | undefined }>(\n\t\t`/dictionary/:dictionaryId/import/`,\n\t)\n\tconst dictionaryId =\n\t\trouteMatch && parseInt(routeMatch.params.dictionaryId + '', 10)\n\tconst history = useHistory()\n\tconst [\n\t\t$importableDictionary,\n\t\tset$importableDictionary,\n\t] = useState<ImportableDictionary | null>(null)\n\tconst [$importParams, set$importParams] = useState<ImportParams | null>(\n\t\tnull,\n\t)\n\tconst dictionaryValidationErrors = useDictionaryValidationErrors(\n\t\t$importParams && $importParams.dictionary,\n\t)\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst setImportableDictionary = useCallback((v: ImportableDictionary) => {\n\t\tset$importableDictionary(v)\n\t\tset$importParams({\n\t\t\tdictionary: v.dictionary,\n\t\t\tswapLanguages: false,\n\t\t})\n\t}, [])\n\treturn (\n\t\t<ContentRowComp>\n\t\t\t<h1>Tölts be szavakat</h1>\n\t\t\t<form\n\t\t\t\tonSubmit={async e => {\n\t\t\t\t\te.preventDefault()\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!$importableDictionary || !$importParams) {\n\t\t\t\t\t\t\tthrow new Error(`[pydz1i]`)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst words = $importParams.swapLanguages\n\t\t\t\t\t\t\t? $importableDictionary.words.map(word => ({\n\t\t\t\t\t\t\t\t\t...word,\n\t\t\t\t\t\t\t\t\ttranslation0: word.translation1,\n\t\t\t\t\t\t\t\t\ttranslation1: word.translation0,\n\t\t\t\t\t\t\t  }))\n\t\t\t\t\t\t\t: $importableDictionary.words\n\t\t\t\t\t\tconst storedDictionaryId = await handleDictionaryImport(\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdictionary: $importParams.dictionary,\n\t\t\t\t\t\t\t\twords,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t)\n\t\t\t\t\t\tif (storedDictionaryId === dictionaryId) {\n\t\t\t\t\t\t\thistory.goBack()\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thistory.replace(\n\t\t\t\t\t\t\t\turl`/dictionary/${storedDictionaryId}/`,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tshowMessage(e)\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<ContentRowComp>\n\t\t\t\t\t{!$importableDictionary && (\n\t\t\t\t\t\t<GetWordsComp\n\t\t\t\t\t\t\t_setImportableDictionary={setImportableDictionary}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t{$importableDictionary && $importParams && (\n\t\t\t\t\t\t<SetImportParamsComp\n\t\t\t\t\t\t\t_importableDictionary={$importableDictionary}\n\t\t\t\t\t\t\t_importParams={$importParams}\n\t\t\t\t\t\t\t_setImportParams={set$importParams}\n\t\t\t\t\t\t\t_dictionaryId={dictionaryId}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\t<ErrorsComp _errors={dictionaryValidationErrors} />\n\t\t\t\t\t{$importableDictionary && (\n\t\t\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tdisabled={\n\t\t\t\t\t\t\t\t\t!isLoaded(dictionaryValidationErrors) ||\n\t\t\t\t\t\t\t\t\tdictionaryValidationErrors.length > 0\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tTárold el\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</ButtonRowComp>\n\t\t\t\t\t)}\n\t\t\t\t</ContentRowComp>\n\t\t\t</form>\n\t\t</ContentRowComp>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { withInterface } from '../function/withInterface'\nimport { Question } from '../model/Question'\nimport {\n\tDb,\n\tgetDb,\n\tINDEX_WORDS_COUNT_0,\n\tINDEX_WORDS_COUNT_1,\n\tSTORE_WORDS,\n} from './Db'\nimport { makeKeyRangeWordsCount } from './makeKeyRangeWordsCount'\n\nexport async function readQuestions({\n\tt = getDb().transaction([STORE_WORDS], 'readonly'),\n\tdictionaryId,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n}): Promise<Question[]> {\n\tconst wordsStore = t.objectStore(STORE_WORDS)\n\tconst translation0Index = wordsStore.index(INDEX_WORDS_COUNT_0)\n\tconst translation1Index = wordsStore.index(INDEX_WORDS_COUNT_1)\n\treturn [\n\t\t...(await translation0Index.getAllKeys(\n\t\t\tmakeKeyRangeWordsCount({\n\t\t\t\tdictionaryId,\n\t\t\t\tcountForSort: [0, 0],\n\t\t\t}),\n\t\t)).map(wordId =>\n\t\t\twithInterface<Question>({\n\t\t\t\twordId,\n\t\t\t\ttranslationId: 0,\n\t\t\t}),\n\t\t),\n\t\t...(await translation1Index.getAllKeys(\n\t\t\tmakeKeyRangeWordsCount({\n\t\t\t\tdictionaryId,\n\t\t\t\tcountForSort: [0, 0],\n\t\t\t}),\n\t\t)).map(wordId =>\n\t\t\twithInterface<Question>({\n\t\t\t\twordId,\n\t\t\t\ttranslationId: 1,\n\t\t\t}),\n\t\t),\n\t]\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { avoidDuplicates } from '../function/avoidDuplicates'\nimport { shuffle } from '../function/shuffle'\nimport { Question } from '../model/Question'\nimport { TLoadable } from '../model/TLoadable'\nimport { readQuestions } from '../storage/readQuestions'\n\nexport function useQuestions({\n\tdictionaryId,\n\twordIdNotFirst,\n}: {\n\tdictionaryId: number | null\n\twordIdNotFirst: React.MutableRefObject<number | null>\n}) {\n\tconst [$questions, set$questions] = useState<\n\t\tTLoadable<{ current: readonly Question[] | undefined }>\n\t>(null)\n\tconst loadQuestions = useCallback(() => {\n\t\tlet aborted = false\n\t\tif (dictionaryId == null) {\n\t\t\tset$questions({ current: undefined })\n\t\t} else {\n\t\t\tset$questions(Date.now())\n\t\t\treadQuestions({\n\t\t\t\tdictionaryId,\n\t\t\t})\n\t\t\t\t.then(questions => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tquestions = shuffle(questions)\n\t\t\t\t\tquestions = avoidDuplicates(\n\t\t\t\t\t\tquestions,\n\t\t\t\t\t\t(a, b) => a.wordId === b.wordId,\n\t\t\t\t\t)\n\t\t\t\t\tif (\n\t\t\t\t\t\twordIdNotFirst.current != null &&\n\t\t\t\t\t\tquestions[0] &&\n\t\t\t\t\t\tquestions[0].wordId === wordIdNotFirst.current\n\t\t\t\t\t) {\n\t\t\t\t\t\tquestions.push(questions.shift()!)\n\t\t\t\t\t}\n\t\t\t\t\tset$questions({ current: questions })\n\t\t\t\t})\n\t\t\t\t.catch(e => {\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tconsole.error(e)\n\t\t\t\t\tset$questions(e + '')\n\t\t\t\t})\n\t\t}\n\t\treturn () => {\n\t\t\taborted = true\n\t\t}\n\t}, [dictionaryId, wordIdNotFirst])\n\treturn { $questions, set$questions, loadQuestions }\n}\n","export function avoidDuplicates<T>(\n\ta: readonly T[],\n\tequals: (a: T, b: T) => boolean,\n): T[] {\n\tconst result = a.slice()\n\tlet count = result.length\n\tlet lastItem: T | undefined = undefined\n\tfor (let i = count - 1; i >= 0; i--) {\n\t\tconst item = result[i]\n\t\tif (lastItem != null) {\n\t\t\tif (equals(lastItem, item)) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tresult.splice(i - 1, 0, ...result.splice(i, 1))\n\t\t\t\t\ti--\n\t\t\t\t} else {\n\t\t\t\t\tresult.splice(i + 2, 0, ...result.splice(i, 1))\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlastItem = item\n\t}\n\tif (result.length > 3 && equals(result[0], result[count - 1])) {\n\t\tresult.splice(1, 0, ...result.splice(0, 1))\n\t}\n\treturn result\n}\n","export function shuffle<T>(a: readonly T[]): T[] {\n\tconst result: T[] = []\n\tfor (const item of a) {\n\t\tconst newIndex = Math.floor(Math.random() * (result.length + 1))\n\t\tresult.splice(newIndex, 0, item)\n\t}\n\treturn result\n}\n","import React, { FormEvent, useRef, useState } from 'react'\nimport { sanitizeString } from '../function/sanitizeString'\nimport { Dictionary } from '../model/Dictionary'\nimport { Word } from '../model/Word'\nimport { storeWord } from '../storage/storeWord'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { FormRowComp } from './FormRowComp'\nimport { LabelComp } from './LabelComp'\n\nexport interface LearnCompProps {\n\t_dictionary: Dictionary\n\t_word: Word\n\t_translationId: 0 | 1\n\t_next: (p: { success: boolean }) => void\n}\n\nexport function LearnComp({\n\t_dictionary,\n\t_word,\n\t_translationId,\n\t_next,\n}: LearnCompProps) {\n\tconst inputRef = useRef<HTMLInputElement>(null)\n\tconst questionLanguage =\n\t\t_translationId === 0 ? _dictionary.language0 : _dictionary.language1\n\tconst answerLanguage =\n\t\t_translationId === 0 ? _dictionary.language1 : _dictionary.language0\n\tconst question =\n\t\t_translationId === 0 ? _word.translation0 : _word.translation1\n\tconst correctAnswer = (_translationId === 0\n\t\t? _word.translation1\n\t\t: _word.translation0\n\t).text\n\tconst [$answer, set$answer] = useState('')\n\tconst isAnswerCorrect = sanitizeString($answer) === correctAnswer\n\tconst [$answerShown, set$answerShown] = useState(false)\n\n\tasync function onSubmit(e: FormEvent) {\n\t\te.preventDefault()\n\t\tconst newCount = Math.min(3, question.count + ($answerShown ? 1 : -1))\n\t\tawait storeWord({\n\t\t\tword: {\n\t\t\t\t..._word,\n\t\t\t\t...(_translationId === 0\n\t\t\t\t\t? {\n\t\t\t\t\t\t\ttranslation0: {\n\t\t\t\t\t\t\t\t..._word.translation0,\n\t\t\t\t\t\t\t\tcount: newCount,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  }\n\t\t\t\t\t: {\n\t\t\t\t\t\t\ttranslation1: {\n\t\t\t\t\t\t\t\t..._word.translation1,\n\t\t\t\t\t\t\t\tcount: newCount,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t  }),\n\t\t\t},\n\t\t})\n\t\tset$answerShown(false)\n\t\tset$answer('')\n\t\t_next({ success: newCount === 0 })\n\t}\n\n\tfunction onShowAnswer() {\n\t\tif (correctAnswer == null) return\n\t\tset$answerShown(true)\n\t\tset$answer(correctAnswer)\n\t\tinputRef.current!.focus()\n\t}\n\n\treturn (\n\t\t<form onSubmit={onSubmit}>\n\t\t\t<ContentRowComp>\n\t\t\t\t<div>\n\t\t\t\t\t{questionLanguage}: {question.text}\n\t\t\t\t</div>\n\t\t\t\t{question.description && (\n\t\t\t\t\t<div>Megjegyzés: {question.description}</div>\n\t\t\t\t)}\n\t\t\t\t<FormRowComp>\n\t\t\t\t\t<LabelComp _required>{answerLanguage}</LabelComp>\n\t\t\t\t\t<input\n\t\t\t\t\t\tref={inputRef}\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tvalue={$answer}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\tset$answer(e.target.value)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</FormRowComp>\n\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t<button disabled={!isAnswerCorrect}>Rendben</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\tonClick={onShowAnswer}\n\t\t\t\t\t\tdisabled={$answerShown}\n\t\t\t\t\t>\n\t\t\t\t\t\tMutasd a választ\n\t\t\t\t\t</button>\n\t\t\t\t</ButtonRowComp>\n\t\t\t</ContentRowComp>\n\t\t</form>\n\t)\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Redirect, useRouteMatch } from 'react-router-dom'\nimport { useCallback } from 'use-memo-one'\nimport { useDictionary } from '../hook/useDictionary'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { useQuestions } from '../hook/useQuestions'\nimport { useWord } from '../hook/useWord'\nimport { isLoaded } from '../model/TLoadable'\nimport { ContentRowComp } from './ContentRowComp'\nimport { FormRowComp } from './FormRowComp'\nimport { LearnComp } from './LearnComp'\nimport { LoadableComp } from './LoadableComp'\nimport { UnknownDictionaryComp } from './UnknownDictionaryComp'\n\nexport interface LearnPageProps {}\n\nexport function LearnPage(props: LearnPageProps) {\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string }>(\n\t\t'/dictionary/:dictionaryId/learn/',\n\t)\n\tconst dictionaryId =\n\t\trouteMatch && parseInt(routeMatch.params.dictionaryId, 10)\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst lastWordId = useRef<number | null>(null)\n\tconst { $questions, set$questions, loadQuestions } = useQuestions({\n\t\tdictionaryId,\n\t\twordIdNotFirst: lastWordId,\n\t})\n\tconst [$questionsCount, set$questionsCount] = useState(0)\n\tconst [$questionsLearnedCount, set$questionsLearnedCount] = useState(0)\n\tconst progress =\n\t\t$questionsCount > 0 ? $questionsLearnedCount / $questionsCount : 0\n\tuseEffect(() => {\n\t\tif (\n\t\t\tisLoaded($questions) &&\n\t\t\t$questions.current &&\n\t\t\t$questions.current.length > $questionsCount\n\t\t) {\n\t\t\tset$questionsCount($questions.current.length)\n\t\t}\n\t}, [$questions, $questionsCount])\n\tconst [$questionIndex, set$questionIndex] = useState(0)\n\tconst { $word, set$word, loadWord } = useWord(\n\t\tisLoaded($questions) &&\n\t\t\t$questions.current &&\n\t\t\t$questions.current[$questionIndex]\n\t\t\t? $questions.current[$questionIndex].wordId\n\t\t\t: null,\n\t)\n\tconst translationId =\n\t\tisLoaded($questions) &&\n\t\t$questions.current &&\n\t\t$questions.current[$questionIndex]\n\t\t\t? $questions.current[$questionIndex].translationId\n\t\t\t: 0\n\n\tconst word = isLoaded($word) && $word.current ? $word.current : undefined\n\tif (word) {\n\t\tlastWordId.current = word.id!\n\t}\n\n\tconst next = useCallback(\n\t\t({ success }: { success: boolean }) => {\n\t\t\tif (!isLoaded($questions) || $questions.current == null)\n\t\t\t\tthrow new Error(`[q0lv6a]`)\n\t\t\tif (success) {\n\t\t\t\tset$questionsLearnedCount($questionsLearnedCount + 1)\n\t\t\t}\n\t\t\tif ($questionIndex + 1 === $questions.current.length) {\n\t\t\t\tset$questionIndex(0)\n\t\t\t\tset$questions(null)\n\t\t\t} else {\n\t\t\t\tset$questionIndex($questionIndex + 1)\n\t\t\t\tset$word(null) // Force refresh word even if it has the same ID\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\t$questions,\n\t\t\t$questionIndex,\n\t\t\tset$questionIndex,\n\t\t\tset$word,\n\t\t\t$questionsLearnedCount,\n\t\t\tset$questions,\n\t\t],\n\t)\n\n\tusePageTitle(`Tanulás`)\n\treturn (\n\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t{dictionary =>\n\t\t\t\tdictionary.current == null ? (\n\t\t\t\t\t<UnknownDictionaryComp />\n\t\t\t\t) : (\n\t\t\t\t\t<ContentRowComp>\n\t\t\t\t\t\t<h1>Tanulás</h1>\n\t\t\t\t\t\t<LoadableComp _value={$questions} _load={loadQuestions}>\n\t\t\t\t\t\t\t{questions =>\n\t\t\t\t\t\t\t\tquestions.current == null ||\n\t\t\t\t\t\t\t\tquestions.current.length === 0 ? (\n\t\t\t\t\t\t\t\t\t<Redirect to={`../`} />\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t\t\t\t\t\t<progress value={progress}>\n\t\t\t\t\t\t\t\t\t\t\t\t{Math.round(progress * 100)}%\n\t\t\t\t\t\t\t\t\t\t\t</progress>\n\t\t\t\t\t\t\t\t\t\t</FormRowComp>\n\t\t\t\t\t\t\t\t\t\t<LoadableComp\n\t\t\t\t\t\t\t\t\t\t\t_value={$word}\n\t\t\t\t\t\t\t\t\t\t\t_load={loadWord}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t{word =>\n\t\t\t\t\t\t\t\t\t\t\t\tword.current == null ? (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<></>\n\t\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<LearnComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_dictionary={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdictionary.current!\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_word={word.current}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_translationId={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttranslationId\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t_next={next}\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t</ContentRowComp>\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","import React from 'react'\n\nexport interface MessagesCompProps {\n\t_messages: readonly string[]\n\t_removeMessageByIndex: (index: number) => void\n}\n\nexport function MessagesComp({\n\t_messages,\n\t_removeMessageByIndex,\n}: MessagesCompProps) {\n\treturn (\n\t\t<>\n\t\t\t{_messages.map((message, index) => (\n\t\t\t\t<div key={index} style={{ whiteSpace: 'pre-wrap' }}>\n\t\t\t\t\t{message}{' '}\n\t\t\t\t\t<button\n\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t_removeMessageByIndex(index)\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t×\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</>\n\t)\n}\n","import React from 'react'\nimport { usePageTitle } from '../hook/usePageTitle'\n\nexport function NotFoundPage() {\n\tusePageTitle(`Ez meg hol van?`)\n\treturn (\n\t\t<>\n\t\t\t<h1>Ez meg hol van?</h1>\n\t\t\t<p>Há’ nem t’om hová menté’, mer’ ez nem az.</p>\n\t\t</>\n\t)\n}\n","import React from 'react'\nimport styles from './SpacerComp.module.css'\n\nexport interface SpacerCompProps {}\n\nexport function SpacerComp(props: SpacerCompProps) {\n\treturn <div className={styles.spacer} />\n}\n","import escapeStringRegexp from 'escape-string-regexp'\n\nexport function queryToRegExp(q: string) {\n\treturn new RegExp(escapeStringRegexp(q.trim()).replace(/\\s+/g, `.*`), `i`)\n}\n","import { isLoaded, TLoadable } from '../model/TLoadable'\n\nexport function selectPageCount(o: {\n\tpageSize: number\n\titemCount: TLoadable<{\n\t\tcount: number\n\t}>\n}) {\n\treturn isLoaded(o.itemCount)\n\t\t? Math.max(1, Math.ceil(o.itemCount.count / o.pageSize))\n\t\t: 1\n}\n","import { IDBPTransaction } from 'idb'\nimport { DbDictionary } from '../model/Dictionary'\nimport { countItems } from './countItems'\nimport { Db, getDb, STORE_DICTIONARIES } from './Db'\n\nexport async function countDictionaries({\n\tt = getDb().transaction([STORE_DICTIONARIES], 'readonly'),\n\tfilter,\n}: {\n\tt?: IDBPTransaction<Db>\n\tfilter?: (v: DbDictionary) => boolean\n}) {\n\tconst dictionariesStore = t.objectStore(STORE_DICTIONARIES)\n\treturn countItems({\n\t\tsource: dictionariesStore,\n\t\tfilter,\n\t})\n}\n","import React, { useContext, useRef, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useCallback } from 'use-memo-one'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { queryToRegExp } from '../function/queryToRegExp'\nimport { url } from '../function/url'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { Dictionary } from '../model/Dictionary'\nimport { isLoaded, TLoadable } from '../model/TLoadable'\nimport { selectPageCount } from '../selector/selectPageCount'\nimport { countDictionaries } from '../storage/countDictionaries'\nimport { getDb, STORE_DICTIONARIES } from '../storage/Db'\nimport { readDictionaries } from '../storage/readDictionaries'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryComp } from './DictionaryComp'\nimport { FocusRefComp } from './FocusRefComp'\nimport { FormRowComp } from './FormRowComp'\nimport { LoadableComp } from './LoadableComp'\nimport { PagingComp } from './PagingComp'\nimport { ShowMessageContext } from './ShowMessageContext'\n\nexport function StartPage() {\n\tusePageTitle(`Szia!`)\n\tconst [$pageSize] = useState(10)\n\tconst [$query, set$query] = useState('')\n\tconst [$totalDictionaryCount, set$totalDictionaryCount] = useState<\n\t\tTLoadable<{ count: number }>\n\t>(null)\n\tconst [$dictionaryCount, set$dictionaryCount] = useState<\n\t\tTLoadable<{ count: number }>\n\t>(null)\n\tconst [$page, set$page] = useState(0)\n\tconst [$dictionariesOnPage, set$dictionariesOnPage] = useState<\n\t\tTLoadable<Dictionary[]>\n\t>(null)\n\tconst showMessage = useContext(ShowMessageContext)\n\tconst loadDictionariesOnPage = useCallback(() => {\n\t\tlet isAborted = false\n\t\t// set$dictionaryCount(Date.now())\n\t\t// set$totalDictionaryCount(Date.now())\n\t\tset$dictionariesOnPage(Date.now())\n\t\t;(async () => {\n\t\t\ttry {\n\t\t\t\tconst t = getDb().transaction([STORE_DICTIONARIES], 'readonly')\n\t\t\t\tconst filter = $query\n\t\t\t\t\t? (() => {\n\t\t\t\t\t\t\tconst queryRe = queryToRegExp($query)\n\t\t\t\t\t\t\treturn (d: Dictionary) =>\n\t\t\t\t\t\t\t\tqueryRe.test(dictionaryToString(d))\n\t\t\t\t\t  })()\n\t\t\t\t\t: undefined\n\t\t\t\tconst [totalCount, count, dictionaries] = await Promise.all([\n\t\t\t\t\tcountDictionaries({ t }),\n\t\t\t\t\tcountDictionaries({ t, filter }),\n\t\t\t\t\treadDictionaries({\n\t\t\t\t\t\tt,\n\t\t\t\t\t\tpageSize: $pageSize,\n\t\t\t\t\t\tpage: $page,\n\t\t\t\t\t\tfilter,\n\t\t\t\t\t}),\n\t\t\t\t])\n\t\t\t\tif (isAborted) return\n\t\t\t\tset$page(\n\t\t\t\t\tMath.min(\n\t\t\t\t\t\t$page,\n\t\t\t\t\t\tselectPageCount({\n\t\t\t\t\t\t\tpageSize: $pageSize,\n\t\t\t\t\t\t\titemCount: count,\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\tset$dictionaryCount({ count })\n\t\t\t\tset$totalDictionaryCount({ count: totalCount })\n\t\t\t\tset$dictionariesOnPage(dictionaries)\n\t\t\t} catch (e) {\n\t\t\t\tif (isAborted) return\n\t\t\t\tshowMessage(e)\n\t\t\t\tset$dictionaryCount(e + '')\n\t\t\t\tset$totalDictionaryCount(e + '')\n\t\t\t\tset$dictionariesOnPage(e + '')\n\t\t\t}\n\t\t})()\n\t\treturn () => {\n\t\t\tisAborted = true\n\t\t}\n\t}, [$query, $page, $pageSize, showMessage])\n\tconst pageCount = selectPageCount({\n\t\tpageSize: $pageSize,\n\t\titemCount: $dictionaryCount,\n\t})\n\tconst makeADictionaryLinkRef = useRef<HTMLAnchorElement>(null)\n\treturn (\n\t\t<ContentRowComp>\n\t\t\t<h1>Szia!</h1>\n\t\t\t<p>\n\t\t\t\tMag vagyok, egy szógyakorló program. Magolj velem! Internet\n\t\t\t\tnélkül is működöm!\n\t\t\t</p>\n\t\t\t{isLoaded($totalDictionaryCount) &&\n\t\t\t\t$totalDictionaryCount.count > 0 && (\n\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\tplaceholder='Szűrd a szótárakat'\n\t\t\t\t\t\t\tvalue={$query}\n\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\tset$query(e.target.value)\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{$query && (\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\tclassName='does-not-expand'\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tset$query('')\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t×\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</FormRowComp>\n\t\t\t\t)}\n\t\t\t<LoadableComp\n\t\t\t\t_value={$dictionariesOnPage}\n\t\t\t\t_load={loadDictionariesOnPage}\n\t\t\t>\n\t\t\t\t{dictionaries => (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{dictionaries.length > 0 ? (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<p>Válassz egy szótárat:</p>\n\t\t\t\t\t\t\t\t<ol start={$page * $pageSize + 1}>\n\t\t\t\t\t\t\t\t\t{dictionaries.map(dictionary => (\n\t\t\t\t\t\t\t\t\t\t<li key={dictionary.id}>\n\t\t\t\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\t\t\t\tto={url`/dictionary/${dictionary.id!}/`}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t<DictionaryComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t_dictionary={dictionary}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t</ol>\n\t\t\t\t\t\t\t\t{pageCount > 1 && (\n\t\t\t\t\t\t\t\t\t<PagingComp\n\t\t\t\t\t\t\t\t\t\t_page={$page}\n\t\t\t\t\t\t\t\t\t\t_setPage={set$page}\n\t\t\t\t\t\t\t\t\t\t_pageCount={pageCount}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\tisLoaded($totalDictionaryCount) &&\n\t\t\t\t\t\t\t$totalDictionaryCount.count > 0 && (\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t<em>Nem találtam egy szótárat sem.</em>\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{isLoaded($totalDictionaryCount) &&\n\t\t\t\t\t\t$totalDictionaryCount.count === 0 ? (\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\tElőször{' '}\n\t\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\t\tto='/dictionary/'\n\t\t\t\t\t\t\t\t\tinnerRef={makeADictionaryLinkRef}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tkészíts egy új szótárat\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t\t<FocusRefComp\n\t\t\t\t\t\t\t\t\t_focusThis={makeADictionaryLinkRef}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t, vagy{' '}\n\t\t\t\t\t\t\t\t<Link to='/import/'>\n\t\t\t\t\t\t\t\t\ttölts be egy szótárat!\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t\t\t\t<Link to='/dictionary/' role='button'>\n\t\t\t\t\t\t\t\t\tKészíts új szótárat\n\t\t\t\t\t\t\t\t</Link>{' '}\n\t\t\t\t\t\t\t\t<Link to='/import/' role='button'>\n\t\t\t\t\t\t\t\t\tTölts be egy szótárat\n\t\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t</ButtonRowComp>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</LoadableComp>\n\t\t</ContentRowComp>\n\t)\n}\n","import React from 'react'\nimport { useMemo } from 'use-memo-one'\nimport { TSelection } from '../model/TSelection'\nimport { deleteWords } from '../storage/deleteWords'\nimport { toggleWords } from '../storage/toggleWords'\n\nenum BulkActions {\n\tEnable = 'Enable',\n\tDisable = 'Disable',\n\tDeselect = 'Deselect',\n\tDelete = 'Delete',\n}\n\nexport interface WordsMenuCompProps {\n\t_dictionaryId: number\n\t_selectedWordIds: TSelection\n\t_setSelectedWordIds: (v: TSelection) => void\n\t_onDone: () => void\n}\n\nexport function WordsMenuComp({\n\t_selectedWordIds,\n\t_setSelectedWordIds,\n\t_dictionaryId,\n\t_onDone,\n}: WordsMenuCompProps) {\n\tconst selectedWordsCount = useMemo(\n\t\t() => Object.keys(_selectedWordIds).length,\n\t\t[_selectedWordIds],\n\t)\n\treturn (\n\t\t<select\n\t\t\tvalue=''\n\t\t\tonChange={async e => {\n\t\t\t\tswitch (e.target.value) {\n\t\t\t\t\tcase BulkActions.Deselect:\n\t\t\t\t\t\t_setSelectedWordIds({})\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase BulkActions.Disable:\n\t\t\t\t\t\tawait toggleWords({\n\t\t\t\t\t\t\tdictionaryId: _dictionaryId,\n\t\t\t\t\t\t\twordIds: Object.keys(_selectedWordIds).map(_ => +_),\n\t\t\t\t\t\t\tenable: false,\n\t\t\t\t\t\t})\n\t\t\t\t\t\t_setSelectedWordIds({})\n\t\t\t\t\t\t_onDone()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase BulkActions.Enable:\n\t\t\t\t\t\tawait toggleWords({\n\t\t\t\t\t\t\tdictionaryId: _dictionaryId,\n\t\t\t\t\t\t\twordIds: Object.keys(_selectedWordIds).map(_ => +_),\n\t\t\t\t\t\t\tenable: true,\n\t\t\t\t\t\t})\n\t\t\t\t\t\t_setSelectedWordIds({})\n\t\t\t\t\t\t_onDone()\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase BulkActions.Delete:\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\twindow.confirm(\n\t\t\t\t\t\t\t\t`Biztosan törölni akarod a kiválasztott szavakat?`,\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tawait deleteWords({\n\t\t\t\t\t\t\t\tdictionaryId: _dictionaryId,\n\t\t\t\t\t\t\t\twordIds: Object.keys(_selectedWordIds).map(\n\t\t\t\t\t\t\t\t\t_ => +_,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t_setSelectedWordIds({})\n\t\t\t\t\t\t\t_onDone()\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}}\n\t\t>\n\t\t\t<option value=''>\n\t\t\t\t{selectedWordsCount\n\t\t\t\t\t? `A kiválasztott szavakat...`\n\t\t\t\t\t: `Az összes szót...`}\n\t\t\t</option>\n\t\t\t{selectedWordsCount > 0 && (\n\t\t\t\t<option value={BulkActions.Deselect}>ne válaszd ki</option>\n\t\t\t)}\n\t\t\t<option value={BulkActions.Enable}>kapcsold be</option>\n\t\t\t<option value={BulkActions.Disable}>kapcsold ki</option>\n\t\t\t{selectedWordsCount > 0 && (\n\t\t\t\t<option value={BulkActions.Delete}>töröld</option>\n\t\t\t)}\n\t\t</select>\n\t)\n}\n","import { Translation } from '../model/Translation'\n\nexport function translationToString(t: Translation): string {\n\treturn t.description ? `${t.text} (${t.description})` : t.text\n}\n","export function omit<T, K extends keyof T>(o: T, keyToOmit: K): Omit<T, K> {\n\tconst result = { ...o }\n\tdelete result[keyToOmit]\n\treturn result\n}\n","import { omit } from './omit'\n\nexport function toggle<T extends { [k: string]: boolean }, K extends keyof T>(\n\to: T,\n\tkey: K,\n\tflag: boolean,\n): T {\n\treturn flag ? { ...o, [key]: true } : (omit(o, key) as T)\n}\n","import React from 'react'\nimport { toggle } from '../function/toggle'\nimport { TSelection } from '../model/TSelection'\nimport { Word } from '../model/Word'\nimport { WordComp } from './WordComp'\n\nexport interface WordListCompProps {\n\t_firstIndex: number\n\t_words: readonly Word[]\n\t_selectedWordIds: TSelection\n\t_setSelectedWordIds: (v: TSelection) => void\n\t_swapTranslations: boolean\n}\n\nexport function WordListComp({\n\t_firstIndex,\n\t_words,\n\t_selectedWordIds,\n\t_setSelectedWordIds,\n\t_swapTranslations,\n}: WordListCompProps) {\n\treturn (\n\t\t<ol start={_firstIndex + 1}>\n\t\t\t{_words.map(word => (\n\t\t\t\t<li key={word.id}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\tchecked={!!_selectedWordIds[word.id + '']}\n\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t_setSelectedWordIds(\n\t\t\t\t\t\t\t\ttoggle(\n\t\t\t\t\t\t\t\t\t_selectedWordIds,\n\t\t\t\t\t\t\t\t\tword.id + '',\n\t\t\t\t\t\t\t\t\te.target.checked,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>{' '}\n\t\t\t\t\t<WordComp\n\t\t\t\t\t\t_word={word}\n\t\t\t\t\t\t_swapTranslations={_swapTranslations}\n\t\t\t\t\t/>\n\t\t\t\t</li>\n\t\t\t))}\n\t\t</ol>\n\t)\n}\n","import React, { Fragment } from 'react'\nimport { useMemo } from 'use-memo-one'\nimport { TSelection } from '../model/TSelection'\nimport { Word } from '../model/Word'\nimport { WordListComp } from './WordListComp'\n\ninterface WordListByDate {\n\tdate: string\n\tfirstIndex: number\n\twords: Word[]\n}\n\nexport interface WordListByDateCompProps {\n\t_words: readonly Word[]\n\t_firstIndex: number\n\t_selectedWordIds: TSelection\n\t_setSelectedWordIds: (v: TSelection) => void\n\t_swapTranslations: boolean\n}\n\nexport function WordListByDateComp({\n\t_words,\n\t_firstIndex,\n\t_selectedWordIds,\n\t_setSelectedWordIds,\n\t_swapTranslations,\n}: WordListByDateCompProps) {\n\tconst wordsByDate = useMemo(\n\t\t() =>\n\t\t\t_words.reduce<WordListByDate[]>((all, word) => {\n\t\t\t\tconst lastList = all[all.length - 1]\n\t\t\t\tif (!lastList || lastList.date !== word.modifiedDate) {\n\t\t\t\t\tall.push({\n\t\t\t\t\t\tdate: word.modifiedDate,\n\t\t\t\t\t\tfirstIndex: lastList\n\t\t\t\t\t\t\t? lastList.firstIndex + lastList.words.length\n\t\t\t\t\t\t\t: _firstIndex,\n\t\t\t\t\t\twords: [word],\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\tlastList.words.push(word)\n\t\t\t\t}\n\t\t\t\treturn all\n\t\t\t}, []),\n\t\t[_words, _firstIndex],\n\t)\n\treturn (\n\t\t<>\n\t\t\t{wordsByDate.map((list, i) => (\n\t\t\t\t<Fragment key={list.date}>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<small>{list.date}</small>\n\t\t\t\t\t</p>\n\t\t\t\t\t<WordListComp\n\t\t\t\t\t\t_firstIndex={list.firstIndex}\n\t\t\t\t\t\t_words={list.words}\n\t\t\t\t\t\t_selectedWordIds={_selectedWordIds}\n\t\t\t\t\t\t_setSelectedWordIds={_setSelectedWordIds}\n\t\t\t\t\t\t_swapTranslations={_swapTranslations}\n\t\t\t\t\t/>\n\t\t\t\t</Fragment>\n\t\t\t))}\n\t\t</>\n\t)\n}\n","import { IDBPTransaction } from 'idb'\nimport { Db, getDb, INDEX_WORDS_MODIFIED_DATE_0, STORE_WORDS } from './Db'\nimport { makeKeyRangeWordsModifiedDate } from './makeKeyRangeWordsModifiedDate'\n\nexport async function deleteWords({\n\tt = getDb().transaction([STORE_WORDS], 'readwrite'),\n\tdictionaryId,\n\twordIds,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n\twordIds: readonly number[]\n}) {\n\tconst wordsStore = t.objectStore(STORE_WORDS)\n\tif (wordIds.length === 0) {\n\t\tconst wordsIndex = t\n\t\t\t.objectStore(STORE_WORDS)\n\t\t\t.index(INDEX_WORDS_MODIFIED_DATE_0)\n\t\tlet cursor = await wordsIndex.openKeyCursor(\n\t\t\tmakeKeyRangeWordsModifiedDate({ dictionaryId }),\n\t\t)\n\t\twhile (cursor) {\n\t\t\tawait cursor.delete()\n\t\t\tcursor = await cursor.continue()\n\t\t}\n\t} else {\n\t\tfor (const wordId of wordIds) {\n\t\t\tawait wordsStore.delete(wordId)\n\t\t}\n\t}\n}\n","import { IDBPTransaction } from 'idb'\nimport { DEFAULT_COUNT } from '../model/constants'\nimport { Word, wordFromDb, wordToDb } from '../model/Word'\nimport { Db, getDb, INDEX_WORDS_MODIFIED_DATE_0, STORE_WORDS } from './Db'\nimport { makeKeyRangeWordsModifiedDate } from './makeKeyRangeWordsModifiedDate'\nimport { readWord } from './readWord'\nimport { storeWord } from './storeWord'\n\nexport async function toggleWords({\n\tt = getDb().transaction([STORE_WORDS], 'readwrite'),\n\tdictionaryId,\n\twordIds,\n\tenable,\n}: {\n\tt?: IDBPTransaction<Db>\n\tdictionaryId: number\n\twordIds: readonly number[]\n\tenable: boolean\n}) {\n\tif (wordIds.length === 0) {\n\t\tconst wordsIndex = t\n\t\t\t.objectStore(STORE_WORDS)\n\t\t\t.index(INDEX_WORDS_MODIFIED_DATE_0)\n\t\tlet cursor = await wordsIndex.openCursor(\n\t\t\tmakeKeyRangeWordsModifiedDate({ dictionaryId }),\n\t\t)\n\t\twhile (cursor) {\n\t\t\tconst word = wordFromDb(cursor.value)\n\t\t\tupdateWord(word, enable)\n\t\t\tcursor.update(wordToDb(word))\n\t\t\tcursor = await cursor.continue()\n\t\t}\n\t} else {\n\t\tfor (const wordId of wordIds) {\n\t\t\tconst word = await readWord({ t, wordId })\n\t\t\tif (!word) throw new Error(`[q06uwo] Ismeretlen szó: ${wordId}`)\n\t\t\tupdateWord(word, enable)\n\t\t\tawait storeWord({ t, word })\n\t\t}\n\t}\n}\n\nexport function updateWord(word: Word, enable: boolean) {\n\tword.translation0.count = enable ? DEFAULT_COUNT : 0\n\tword.translation1.count = enable ? DEFAULT_COUNT : 0\n}\n","import React from 'react'\nimport { WordsByDictionaryIdSort } from '../storage/readWordsByDictionaryId'\nimport { LabelComp } from './LabelComp'\nimport { RowComp } from './RowComp'\n\nexport interface WordsSortCompProps {\n\t_sort: WordsByDictionaryIdSort\n\t_setSort: (v: WordsByDictionaryIdSort) => void\n\t_language0Name: string\n\t_language1Name: string\n}\n\nexport function WordsSortComp({\n\t_sort,\n\t_setSort,\n\t_language0Name,\n\t_language1Name,\n}: WordsSortCompProps) {\n\tconst sortByDate = [\n\t\tWordsByDictionaryIdSort.ModifiedDate0,\n\t\tWordsByDictionaryIdSort.ModifiedDate1,\n\t].includes(_sort)\n\tconst sortByLanguage0 = [\n\t\tWordsByDictionaryIdSort.CountTranslation0,\n\t\tWordsByDictionaryIdSort.ModifiedDate0,\n\t].includes(_sort)\n\treturn (\n\t\t<RowComp _gap={5}>\n\t\t\t<button\n\t\t\t\ttype='button'\n\t\t\t\tonClick={() => {\n\t\t\t\t\t_setSort(\n\t\t\t\t\t\tgetSort({\n\t\t\t\t\t\t\tsortByDate,\n\t\t\t\t\t\t\tsortByLanguage0: !sortByLanguage0,\n\t\t\t\t\t\t}),\n\t\t\t\t\t)\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{sortByLanguage0 ? _language0Name : _language1Name} A-Z\n\t\t\t</button>\n\t\t\t<LabelComp>\n\t\t\t\t<input\n\t\t\t\t\ttype='checkbox'\n\t\t\t\t\tchecked={sortByDate}\n\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t_setSort(\n\t\t\t\t\t\t\tgetSort({\n\t\t\t\t\t\t\t\tsortByDate: e.target.checked,\n\t\t\t\t\t\t\t\tsortByLanguage0,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t)\n\t\t\t\t\t}}\n\t\t\t\t/>{' '}\n\t\t\t\tDátum szerint\n\t\t\t</LabelComp>\n\t\t</RowComp>\n\t)\n}\n\nfunction getSort({\n\tsortByDate,\n\tsortByLanguage0,\n}: {\n\tsortByDate: boolean\n\tsortByLanguage0: boolean\n}) {\n\treturn sortByDate\n\t\t? sortByLanguage0\n\t\t\t? WordsByDictionaryIdSort.ModifiedDate0\n\t\t\t: WordsByDictionaryIdSort.ModifiedDate1\n\t\t: sortByLanguage0\n\t\t? WordsByDictionaryIdSort.CountTranslation0\n\t\t: WordsByDictionaryIdSort.CountTranslation1\n}\n","import qs from 'qs'\nimport React, { useState } from 'react'\nimport { useHistory, useLocation, useRouteMatch } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { useCallback, useMemo } from 'use-memo-one'\nimport { dictionaryToString } from '../function/dictionaryToString'\nimport { queryToRegExp } from '../function/queryToRegExp'\nimport { sanitizeEnumValue } from '../function/sanitizeEnumValue'\nimport { sanitizePageIndex } from '../function/sanitizePageIndex'\nimport { wordToString } from '../function/wordToString'\nimport { useDictionary } from '../hook/useDictionary'\nimport { usePageTitle } from '../hook/usePageTitle'\nimport { useWordCountByDictionaryId } from '../hook/useWordCountByDictionaryId'\nimport { useWordsByDictionaryId } from '../hook/useWordsByDictionaryId'\nimport { isLoaded } from '../model/TLoadable'\nimport { TSelection } from '../model/TSelection'\nimport { DbWord } from '../model/Word'\nimport { WordsByDictionaryIdSort } from '../storage/readWordsByDictionaryId'\nimport { ButtonRowComp } from './ButtonRowComp'\nimport { ContentRowComp } from './ContentRowComp'\nimport { DictionaryComp } from './DictionaryComp'\nimport { FormRowComp } from './FormRowComp'\nimport { LoadableComp } from './LoadableComp'\nimport { PagingComp } from './PagingComp'\nimport { UnknownDictionaryComp } from './UnknownDictionaryComp'\nimport { WordListByDateComp } from './WordListByDateComp'\nimport { WordListComp } from './WordListComp'\nimport { WordsMenuComp } from './WordsMenuComp'\nimport { WordsSortComp } from './WordsSortComp'\n\nexport interface WordsPageProps {}\n\nexport function WordsPage(props: WordsPageProps) {\n\tconst history = useHistory()\n\tconst location = useLocation()\n\tconst routeMatch = useRouteMatch<{ dictionaryId: string }>(\n\t\t`/dictionary/:dictionaryId/words/`,\n\t)\n\tconst dictionaryId =\n\t\trouteMatch && parseInt(routeMatch.params.dictionaryId, 10)\n\tconst query = useMemo(\n\t\t() =>\n\t\t\tqs.parse(location.search.slice(1)) as {\n\t\t\t\tq: string | undefined\n\t\t\t\tpage: string | undefined\n\t\t\t\tsort: string | undefined\n\t\t\t},\n\t\t[location.search],\n\t)\n\tconst q = query.q || ''\n\tconst filter = useMemo(() => {\n\t\tconst qRe = queryToRegExp(q)\n\t\treturn qRe\n\t\t\t? (word: DbWord) => {\n\t\t\t\t\treturn qRe.test(wordToString(word))\n\t\t\t  }\n\t\t\t: undefined\n\t}, [q])\n\tconst { $dictionary, loadDictionary } = useDictionary(dictionaryId)\n\tconst pageSize = 10\n\tconst { $wordCount, loadWordCount } = useWordCountByDictionaryId({\n\t\tdictionaryId,\n\t\tfilter,\n\t})\n\tconst pageCount = isLoaded($wordCount)\n\t\t? Math.max(1, Math.ceil($wordCount.current / pageSize))\n\t\t: 1\n\tconst page =\n\t\tquery && query.page\n\t\t\t? sanitizePageIndex({ page: parseInt(query.page, 10), pageCount })\n\t\t\t: 0\n\tconst sort =\n\t\tquery && query.sort != null\n\t\t\t? sanitizeEnumValue<WordsByDictionaryIdSort>(\n\t\t\t\t\tWordsByDictionaryIdSort,\n\t\t\t\t\tparseInt(query.sort, 10),\n\t\t\t  )\n\t\t\t: WordsByDictionaryIdSort.ModifiedDate0\n\tconst setQ = useCallback(\n\t\t(q: string) => {\n\t\t\thistory.replace(`?${qs.stringify({ q, sort, page })}`)\n\t\t},\n\t\t[history, page, sort],\n\t)\n\tconst setPage = useCallback(\n\t\t(newPage: number) => {\n\t\t\thistory.replace(`?${qs.stringify({ q, sort, page: newPage })}`)\n\t\t},\n\t\t[history, q, sort],\n\t)\n\tconst setSort = useCallback(\n\t\t(newSort: WordsByDictionaryIdSort) => {\n\t\t\thistory.replace(`?${qs.stringify({ q, sort: newSort, page })}`)\n\t\t},\n\t\t[history, q, page],\n\t)\n\tconst { $words, loadWords } = useWordsByDictionaryId({\n\t\tdictionaryId,\n\t\tpage,\n\t\tpageSize,\n\t\tsort,\n\t\tfilter,\n\t})\n\tconst [$selectedWordIds, set$selectedWordIds] = useState<TSelection>({})\n\tusePageTitle(\n\t\tisLoaded($dictionary) && $dictionary.current\n\t\t\t? `${dictionaryToString($dictionary.current)} szavai`\n\t\t\t: `Szavak`,\n\t)\n\treturn (\n\t\t<LoadableComp _value={$dictionary} _load={loadDictionary}>\n\t\t\t{dictionary =>\n\t\t\t\tdictionary.current == null ? (\n\t\t\t\t\t<UnknownDictionaryComp />\n\t\t\t\t) : (\n\t\t\t\t\t<ContentRowComp>\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t<DictionaryComp _dictionary={dictionary.current!} />{' '}\n\t\t\t\t\t\t\tszavai\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<FormRowComp>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\tplaceholder='Szűrd a szavakat'\n\t\t\t\t\t\t\t\tvalue={q}\n\t\t\t\t\t\t\t\tonChange={e => {\n\t\t\t\t\t\t\t\t\tsetQ(e.target.value)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{filter && (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\t\tclassName='does-not-expand'\n\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\tsetQ('')\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t×\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</FormRowComp>\n\t\t\t\t\t\t<WordsSortComp\n\t\t\t\t\t\t\t_sort={sort}\n\t\t\t\t\t\t\t_setSort={setSort}\n\t\t\t\t\t\t\t_language0Name={dictionary.current!.language0}\n\t\t\t\t\t\t\t_language1Name={dictionary.current!.language1}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<LoadableComp _value={$wordCount} _load={loadWordCount}>\n\t\t\t\t\t\t\t{wordCount => (\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<LoadableComp\n\t\t\t\t\t\t\t\t\t\t_value={$words}\n\t\t\t\t\t\t\t\t\t\t_load={loadWords}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{words =>\n\t\t\t\t\t\t\t\t\t\t\twords.current == null ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<em>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tNem találtam egy szót\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tsem.\n\t\t\t\t\t\t\t\t\t\t\t\t\t</em>\n\t\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t\t) : sort == null ||\n\t\t\t\t\t\t\t\t\t\t\t  [\n\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.ModifiedDate0,\n\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.ModifiedDate1,\n\t\t\t\t\t\t\t\t\t\t\t  ].includes(sort) ? (\n\t\t\t\t\t\t\t\t\t\t\t\t<WordListByDateComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t_words={words.current}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_firstIndex={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpageSize * page\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_selectedWordIds={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$selectedWordIds\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_setSelectedWordIds={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tset$selectedWordIds\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_swapTranslations={[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.CountTranslation1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.ModifiedDate1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t].includes(sort)}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t\t\t\t<WordListComp\n\t\t\t\t\t\t\t\t\t\t\t\t\t_words={words.current}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_firstIndex={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tpageSize * page\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_selectedWordIds={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t$selectedWordIds\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_setSelectedWordIds={\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tset$selectedWordIds\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t_swapTranslations={[\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.CountTranslation1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tWordsByDictionaryIdSort.ModifiedDate1,\n\t\t\t\t\t\t\t\t\t\t\t\t\t].includes(sort)}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t\t\t\t{pageCount > 1 && (\n\t\t\t\t\t\t\t\t\t\t<PagingComp\n\t\t\t\t\t\t\t\t\t\t\t_page={page}\n\t\t\t\t\t\t\t\t\t\t\t_pageCount={pageCount}\n\t\t\t\t\t\t\t\t\t\t\t_setPage={setPage}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t\t<ButtonRowComp>\n\t\t\t\t\t\t\t<Link to={`../word/`} role='button'>\n\t\t\t\t\t\t\t\tAdj hozzá egy szót\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t\t<WordsMenuComp\n\t\t\t\t\t\t\t\t_dictionaryId={dictionary.current.id!}\n\t\t\t\t\t\t\t\t_selectedWordIds={$selectedWordIds}\n\t\t\t\t\t\t\t\t_setSelectedWordIds={set$selectedWordIds}\n\t\t\t\t\t\t\t\t_onDone={loadDictionary}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ButtonRowComp>\n\t\t\t\t\t</ContentRowComp>\n\t\t\t\t)\n\t\t\t}\n\t\t</LoadableComp>\n\t)\n}\n","export function sanitizeEnumValue<T>(\n\te: { [k: number]: string },\n\tvalue: number,\n): T {\n\treturn ((value in e ? value : 0) as unknown) as T\n}\n","import { Word } from '../model/Word'\nimport { translationToString } from './translationToString'\n\nexport function wordToString(word: Word): string {\n\treturn `${translationToString(word.translation0)} = ${translationToString(\n\t\tword.translation1,\n\t)}`\n}\n","import { isNumber } from 'util'\n\nexport function sanitizePageIndex({\n\tpage = 0,\n\tpageCount = 1,\n}: {\n\tpage: number\n\tpageCount?: number\n}): number {\n\tif (!isNumber(page) || isNaN(page) || !isFinite(page)) {\n\t\tpage = 0\n\t} else {\n\t\tpage = Math.max(0, Math.min(pageCount - 1, page))\n\t}\n\treturn page\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { HashRouter } from 'react-router-dom'\nimport { AppComp } from './comp/AppComp'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n\t<HashRouter>\n\t\t<AppComp />\n\t</HashRouter>,\n\tdocument.getElementById('root'),\n)\n\nserviceWorker.register()\n","import preval from 'preval.macro'\nimport React, { useEffect, useState } from 'react'\nimport { Route, Switch } from 'react-router'\nimport { Link } from 'react-router-dom'\nimport { setStringToIdbSortableMap } from '../function/stringToIdbSortable'\nimport { useMessages } from '../hook/useMessages'\nimport { usePersistentStorage } from '../hook/usePersistentStorage'\nimport { WARNING_CHARACTER } from '../model/constants'\nimport {\n\tinitDb,\n\tKEY_SETTINGS_STRING_TO_IDB_SORTABLE_MAP,\n\tSTORE_SETTINGS,\n} from '../storage/Db'\nimport styles from './AppComp.module.css'\nimport { DictionaryPage } from './DictionaryPage'\nimport { EditDictionaryPage } from './EditDictionaryPage'\nimport { EditWordPage } from './EditWordPage'\nimport { ExportDictionaryPage } from './ExportDictionaryPage'\nimport { ImportFromFilePage } from './ImportFromFilePage'\nimport { LearnPage } from './LearnPage'\nimport { LoadableComp } from './LoadableComp'\nimport { MessagesComp } from './MessagesComp'\nimport { NotFoundPage } from './NotFoundPage'\nimport { RowComp } from './RowComp'\nimport { ShowMessageContext } from './ShowMessageContext'\nimport { SpacerComp } from './SpacerComp'\nimport { StartPage } from './StartPage'\nimport { WordsPage } from './WordsPage'\n\nexport function AppComp() {\n\tconst [$hasDb, set$hasDb] = useState(false)\n\tconst {\n\t\t$isPersistentStorage,\n\t\tset$isPersistentStorage,\n\t\tloadPersistentStorage,\n\t} = usePersistentStorage()\n\n\tconst { messages, showMessage, removeMessageByIndex } = useMessages()\n\n\tuseEffect(() => {\n\t\t;(async () => {\n\t\t\ttry {\n\t\t\t\tconst db = await initDb(showMessage)\n\t\t\t\tconst t = db.transaction(STORE_SETTINGS, 'readonly')\n\t\t\t\tconst settingsStore = t.objectStore(STORE_SETTINGS)\n\t\t\t\tsetStringToIdbSortableMap(\n\t\t\t\t\tawait settingsStore.get(\n\t\t\t\t\t\tKEY_SETTINGS_STRING_TO_IDB_SORTABLE_MAP,\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\tset$hasDb(true)\n\t\t\t} catch (e) {\n\t\t\t\tshowMessage(e)\n\t\t\t}\n\t\t})()\n\t}, [showMessage])\n\treturn (\n\t\t<ShowMessageContext.Provider value={showMessage}>\n\t\t\t<RowComp _isVertical _gap={20} _padding={20} _fill>\n\t\t\t\t<div className={styles.header}>\n\t\t\t\t\t<Link to='/'>Mag</Link>\n\t\t\t\t</div>\n\t\t\t\t<RowComp _isVertical>\n\t\t\t\t\t<MessagesComp\n\t\t\t\t\t\t_messages={messages}\n\t\t\t\t\t\t_removeMessageByIndex={removeMessageByIndex}\n\t\t\t\t\t/>\n\t\t\t\t\t{!$hasDb && (\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t<em>Adatbázis nélkül nem megy...</em>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t)}\n\t\t\t\t\t{$hasDb && (\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Route exact path='/' component={StartPage} />\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath='/import/'\n\t\t\t\t\t\t\t\tcomponent={ImportFromFilePage}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\t\tpath='/dictionary/'\n\t\t\t\t\t\t\t\tcomponent={EditDictionaryPage}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\t\tpath='/dictionary/:dictionaryId/'\n\t\t\t\t\t\t\t\tcomponent={DictionaryPage}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath='/dictionary/:dictionaryId/export/'\n\t\t\t\t\t\t\t\tcomponent={ExportDictionaryPage}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath='/dictionary/:dictionaryId/word/'\n\t\t\t\t\t\t\t\tcomponent={EditWordPage}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath='/dictionary/:dictionaryId/words/'\n\t\t\t\t\t\t\t\tcomponent={WordsPage}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath='/dictionary/:dictionaryId/import/'\n\t\t\t\t\t\t\t\tcomponent={ImportFromFilePage}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath='/dictionary/:dictionaryId/learn/'\n\t\t\t\t\t\t\t\tcomponent={LearnPage}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\t\tpath='/dictionary/:dictionaryId/edit/'\n\t\t\t\t\t\t\t\tcomponent={EditDictionaryPage}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Route path='/' component={NotFoundPage} />\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t)}\n\t\t\t\t</RowComp>\n\t\t\t\t<SpacerComp />\n\t\t\t\t<div className={styles.footer}>\n\t\t\t\t\tVerzió:{' '}\n\t\t\t\t\t{preval`module.exports = new Date().toLocaleString()`}\n\t\t\t\t\t{' • '}\n\t\t\t\t\t<strong>\n\t\t\t\t\t\t<LoadableComp\n\t\t\t\t\t\t\t_value={$isPersistentStorage}\n\t\t\t\t\t\t\t_load={loadPersistentStorage}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{isPersistentStorage =>\n\t\t\t\t\t\t\t\tisPersistentStorage.current ? (\n\t\t\t\t\t\t\t\t\t<>Maradandó tárhelyem van.</>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t{WARNING_CHARACTER} Nincs maradandó\n\t\t\t\t\t\t\t\t\t\ttárhelyem!{' '}\n\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\ttype='button'\n\t\t\t\t\t\t\t\t\t\t\tonClick={async () => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (navigator.storage) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst isPersistent = await navigator.storage.persist()\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (isPersistent) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tset$isPersistentStorage(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\t\tshowMessage(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t`Ez a böngésző nem támogatja a maradandó tárhelyet!`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\tJavítsd meg\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</LoadableComp>\n\t\t\t\t\t</strong>\n\t\t\t\t</div>\n\t\t\t</RowComp>\n\t\t</ShowMessageContext.Provider>\n\t)\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { TLoadable } from '../model/TLoadable'\n\nexport function usePersistentStorage() {\n\tconst [$isPersistentStorage, set$isPersistentStorage] = useState<\n\t\tTLoadable<{ current: boolean }>\n\t>(null)\n\tconst loadPersistentStorage = useCallback(() => {\n\t\tlet aborted = false\n\t\t;(async () => {\n\t\t\ttry {\n\t\t\t\tif (!navigator.storage) {\n\t\t\t\t\tset$isPersistentStorage({ current: false })\n\t\t\t\t} else {\n\t\t\t\t\tset$isPersistentStorage(Date.now())\n\t\t\t\t\tconst current = await navigator.storage.persisted()\n\t\t\t\t\tif (aborted) return\n\t\t\t\t\tset$isPersistentStorage({\n\t\t\t\t\t\tcurrent,\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tif (aborted) return\n\t\t\t\tconsole.error(e)\n\t\t\t\tset$isPersistentStorage(e + '')\n\t\t\t}\n\t\t})()\n\t\treturn () => {\n\t\t\taborted = true\n\t\t}\n\t}, [])\n\treturn {\n\t\t$isPersistentStorage,\n\t\tset$isPersistentStorage,\n\t\tloadPersistentStorage,\n\t}\n}\n","import { useState } from 'react'\nimport { useCallback } from 'use-memo-one'\nimport { ERROR_CHARACTER } from '../model/constants'\n\nexport function useMessages() {\n\tconst [$messages, set$messages] = useState<readonly string[]>([])\n\tconst showMessage = useCallback((message: any) => {\n\t\tif (message instanceof Error) {\n\t\t\tconsole.error(message)\n\t\t} else {\n\t\t\tconsole.info(message)\n\t\t}\n\t\tconst messageString = (message + '').replace(\n\t\t\t/^Error:\\s*/,\n\t\t\tERROR_CHARACTER + ' ',\n\t\t)\n\t\tset$messages(messages => {\n\t\t\tconst lastMessage = messages[messages.length - 1]\n\t\t\tlet lastMessageCount = 1\n\t\t\tconst lastMessageStart = lastMessage\n\t\t\t\t? lastMessage.replace(/ \\((\\d+)\\)$/, (match, count) => {\n\t\t\t\t\t\tlastMessageCount = parseInt(count, 10)\n\t\t\t\t\t\treturn ''\n\t\t\t\t  })\n\t\t\t\t: undefined\n\t\t\tif (messageString === lastMessageStart) {\n\t\t\t\treturn [\n\t\t\t\t\t...messages.slice(0, messages.length - 1),\n\t\t\t\t\tmessageString + ` (${lastMessageCount + 1})`,\n\t\t\t\t]\n\t\t\t} else {\n\t\t\t\treturn [...messages, messageString]\n\t\t\t}\n\t\t})\n\t}, [])\n\tconst removeMessageByIndex = useCallback((index: number) => {\n\t\tset$messages(messages => [\n\t\t\t...messages.slice(0, index),\n\t\t\t...messages.slice(index + 1),\n\t\t])\n\t}, [])\n\treturn { messages: $messages, showMessage, removeMessageByIndex }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"rowWrapper\":\"RowComp_rowWrapper__2MCRr\",\"row\":\"RowComp_row__Egk8h\",\"columnWrapper\":\"RowComp_columnWrapper__136bt\",\"column\":\"RowComp_column__3-k_k\",\"wrapperFill\":\"RowComp_wrapperFill__1UIOA\",\"fill\":\"RowComp_fill__3J7jB\",\"wrap\":\"RowComp_wrap__WdZI2\",\"gap0\":\"RowComp_gap0__1zBEK\",\"gap1\":\"RowComp_gap1__3wSRY\",\"gap5\":\"RowComp_gap5__2ypI8\",\"gap10\":\"RowComp_gap10__1hW5G\",\"gap20\":\"RowComp_gap20__GijU0\",\"padding0\":\"RowComp_padding0__1x4SV\",\"padding1\":\"RowComp_padding1__3j0BN\",\"padding5\":\"RowComp_padding5__1yO6C\",\"padding10\":\"RowComp_padding10__fU-2E\",\"padding20\":\"RowComp_padding20__292B9\"};"],"sourceRoot":""}